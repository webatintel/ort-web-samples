/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var Nn=Object.defineProperty;var Nl=Object.getOwnPropertyDescriptor;var Vl=Object.getOwnPropertyNames;var Ul=Object.prototype.hasOwnProperty;var F=(e,t)=>()=>(e&&(t=e(e=0)),t);var Xt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),zt=(e,t)=>{for(var r in t)Nn(e,r,{get:t[r],enumerable:!0})},Gl=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Vl(t))!Ul.call(e,n)&&n!==r&&Nn(e,n,{get:()=>t[n],enumerable:!(a=Nl(t,n))||a.enumerable});return e};var Ct=e=>Gl(Nn({},"__esModule",{value:!0}),e);var Hr,Wt,bt,jr,qr=F(()=>{Hr=new Map,Wt=[],bt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Hr.get(e);if(a===void 0)Hr.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Wt.indexOf(e);n!==-1&&Wt.splice(n,1);for(let s=0;s<Wt.length;s++)if(Hr.get(Wt[s]).priority<=r){Wt.splice(s,0,e);return}Wt.push(e)}return}throw new TypeError("not a valid backend")},jr=async e=>{let t=e.length===0?Wt:e,r=[];for(let a of t){let n=Hr.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let s=!!n.initPromise;try{return s||(n.initPromise=n.backend.init()),await n.initPromise,n.initialized=!0,n.backend}catch(u){s||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var Qa=F(()=>{qr()});var Za,eo=F(()=>{Za="1.17.0"});var to,Vn,ro=F(()=>{eo();to="warning",Vn={wasm:{},webgl:{},webgpu:{},versions:{common:Za},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);to=e}},get logLevel(){return to}};Object.defineProperty(Vn,"logLevel",{enumerable:!0})});var Ce,no=F(()=>{ro();Ce=Vn});var ao,oo,io=F(()=>{ao=(e,t)=>{let r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,s;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[3]):(n=e.dims[3],s=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",l=t?.norm,o,p;l===void 0||l.mean===void 0?o=[255,255,255,255]:typeof l.mean=="number"?o=[l.mean,l.mean,l.mean,l.mean]:(o=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(o[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));let m=s*n,w=0,g=m,y=m*2,$=-1;u==="RGBA"?(w=0,g=m,y=m*2,$=m*3):u==="RGB"?(w=0,g=m,y=m*2):u==="RBG"&&(w=0,y=m,g=m*2);for(let v=0;v<s;v++)for(let C=0;C<n;C++){let I=(e.data[w++]-p[0])*o[0],T=(e.data[g++]-p[1])*o[1],P=(e.data[y++]-p[2])*o[2],M=$===-1?255:(e.data[$++]-p[3])*o[3];a.fillStyle="rgba("+I+","+T+","+P+","+M+")",a.fillRect(C,v,1,1)}return r.toDataURL()}else throw new Error("Can not access image data")},oo=(e,t)=>{let r=document.createElement("canvas").getContext("2d"),a;if(r!=null){let n,s,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[1],u=e.dims[3]):(n=e.dims[3],s=e.dims[2],u=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:"RGB",o=t?.norm,p,m;o===void 0||o.mean===void 0?p=[255,255,255,255]:typeof o.mean=="number"?p=[o.mean,o.mean,o.mean,o.mean]:(p=[o.mean[0],o.mean[1],o.mean[2],255],o.mean[3]!==void 0&&(p[3]=o.mean[3])),o===void 0||o.bias===void 0?m=[0,0,0,0]:typeof o.bias=="number"?m=[o.bias,o.bias,o.bias,o.bias]:(m=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(m[3]=o.bias[3]));let w=s*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let g=4,y=0,$=1,v=2,C=3,I=0,T=w,P=w*2,M=-1;l==="RGBA"?(I=0,T=w,P=w*2,M=w*3):l==="RGB"?(I=0,T=w,P=w*2):l==="RBG"&&(I=0,P=w,T=w*2),a=r.createImageData(n,s);for(let D=0;D<s*n;y+=g,$+=g,v+=g,C+=g,D++)a.data[y]=(e.data[I++]-m[0])*p[0],a.data[$]=(e.data[T++]-m[1])*p[1],a.data[v]=(e.data[P++]-m[2])*p[2],a.data[C]=M===-1?255:(e.data[M++]-m[3])*p[3]}else throw new Error("Can not access image data");return a}});var Un,so,uo,lo,co,po=F(()=>{Kr();Un=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},s,u;typeof n.mean=="number"?s=[n.mean,n.mean,n.mean,n.mean]:s=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let l=t.format!==void 0?t.format:"RGBA",o=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",p=r*a,m=o==="RGBA"?new Float32Array(p*4):new Float32Array(p*3),w=4,g=0,y=1,$=2,v=3,C=0,I=p,T=p*2,P=-1;l==="RGB"&&(w=3,g=0,y=1,$=2,v=-1),o==="RGBA"?P=p*3:o==="RBG"?(C=0,T=p,I=p*2):o==="BGR"&&(T=0,I=p,C=p*2);for(let D=0;D<p;D++,g+=w,$+=w,y+=w,v+=w)m[C++]=(e[g]+u[0])/s[0],m[I++]=(e[y]+u[1])/s[1],m[T++]=(e[$]+u[2])/s[2],P!==-1&&v!==-1&&(m[P++]=(e[v]+u[3])/s[3]);return o==="RGBA"?new Le("float32",m,[1,4,r,a]):new Le("float32",m,[1,3,r,a])},so=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",u,l=t??{};if(r){let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let p=o.getContext("2d");if(p!=null){let m=e.height,w=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(m=t.resizedHeight,w=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=m,l.width=w}else l.tensorFormat="RGBA",l.height=m,l.width=w;p.drawImage(e,0,0),u=p.getImageData(0,0,w,m).data}else throw new Error("Can not access image data")}else if(a){let o,p;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(o=t.resizedHeight,p=t.resizedWidth):(o=e.height,p=e.width),t!==void 0&&(l=t),l.format="RGBA",l.height=o,l.width=p,t!==void 0){let m=document.createElement("canvas");m.width=p,m.height=o;let w=m.getContext("2d");if(w!=null)w.putImageData(e,0,0),u=w.getImageData(0,0,p,o).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let p=o.getContext("2d");if(p!=null){let m=e.height,w=e.width;return p.drawImage(e,0,0,w,m),u=p.getImageData(0,0,w,m).data,l.height=m,l.width=w,Un(u,l)}else throw new Error("Can not access image data")}else{if(s)return new Promise((o,p)=>{let m=document.createElement("canvas"),w=m.getContext("2d");if(!e||!w)return p();let g=new Image;g.crossOrigin="Anonymous",g.src=e,g.onload=()=>{m.width=g.width,m.height=g.height,w.drawImage(g,0,0,m.width,m.height);let y=w.getImageData(0,0,m.width,m.height);l.height=m.height,l.width=m.width,o(Un(y.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return Un(u,l);throw new Error("Input data provided is not supported - aborted tensor creation")},uo=(e,t)=>{let{width:r,height:a,download:n,dispose:s}=t,u=[1,a,r,4];return new Le({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:s})},lo=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:s}=t;return new Le({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:s})},co=(e,t,r)=>new Le({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var vr,Yr,fo,mo,ho=F(()=>{vr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Yr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),fo=!1,mo=()=>{if(!fo){fo=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(vr.set("int64",BigInt64Array),Yr.set(BigInt64Array,"int64")),t&&(vr.set("uint64",BigUint64Array),Yr.set(BigUint64Array,"uint64"))}}});var go,yo,bo=F(()=>{Kr();go=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},yo=(e,t)=>{switch(e.location){case"cpu":return new Le(e.type,e.data,t);case"cpu-pinned":return new Le({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Le({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Le({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var Le,Kr=F(()=>{io();po();ho();bo();Le=class{constructor(t,r,a){mo();let n,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,s=t.dims,t.location){case"cpu-pinned":{let l=vr.get(n);if(!l)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,o;if(typeof t=="string")if(n=t,o=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");l=r}else{let p=vr.get(t);if(p===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?l=p.from(r,BigInt):l=p.from(r)}else if(r instanceof p)l=r;else throw new TypeError(`A ${n} tensor's data must be type of ${p}`)}else if(o=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let p=typeof t[0];if(p==="string")n="string",l=t;else if(p==="boolean")n="bool",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${p}.`)}else{let p=Yr.get(t.constructor);if(p===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=p,l=t}if(o===void 0)o=[l.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");s=o,this.cpuData=l,this.dataLocation="cpu"}let u=go(s);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=u}static async fromImage(t,r){return so(t,r)}static fromTexture(t,r){return uo(t,r)}static fromGpuBuffer(t,r){return lo(t,r)}static fromPinnedBuffer(t,r,a){return co(t,r,a)}toDataURL(t){return ao(this,t)}toImageData(t){return oo(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return yo(this,t)}}});var Ve,Xr=F(()=>{Kr();Ve=Le});var wo,Jr,Jt,Qr,Zr,Gn=F(()=>{Jr=e=>{wo=e},Jt=e=>{console.timeStamp(`[ORT] ${e}`)},Qr=e=>{Jt(`BEGIN ${e}`)},Zr=e=>{Jt(`END ${e}`)}});var en,vo=F(()=>{qr();Xr();Gn();en=class e{constructor(t){this.handler=t}async run(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Ve||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Ve)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let p of r){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);n[p]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,m=Object.getOwnPropertyNames(r);for(let w of this.outputNames)if(m.indexOf(w)!==-1){let g=r[w];(g===null||g instanceof Ve)&&(p=!0,u=!1,n[w]=g)}if(p){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of this.inputNames)if(typeof t[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(u)for(let p of this.outputNames)n[p]=null;let l=await this.handler.run(t,n,s),o={};for(let p in l)if(Object.hasOwnProperty.call(l,p)){let m=l[p];m instanceof Ve?o[p]=m:o[p]=new Ve(m.type,m.data,m.dims)}return o}async release(){return this.handler.dispose()}static async create(t,r,a,n){Qr("inferenceSession.create");let s,u={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let w=t,g=0,y=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(g=r,!Number.isSafeInteger(g))throw new RangeError("'byteOffset' must be an integer.");if(g<0||g>=w.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${w.byteLength}).`);if(y=t.byteLength-g,typeof a=="number"){if(y=a,!Number.isSafeInteger(y))throw new RangeError("'byteLength' must be an integer.");if(y<=0||g+y>w.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${w.byteLength-g}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(w,g,y)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let o=(u.executionProviders||[]).map(w=>typeof w=="string"?w:w.name),m=await(await jr(o)).createInferenceSessionHandler(s,u);return Zr("inferenceSession.create"),new e(m)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var $o,xo=F(()=>{vo();$o=en});var So=F(()=>{});var Ll,tn,Co=F(()=>{qr();Xr();Ll="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",tn=class e{constructor(t){this.handler=t}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",s=r||{},l=(s.executionProviders||[]).map(p=>typeof p=="string"?p:p.name),o=await jr(l);if(o.createTrainingSessionHandler){let p=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,s);return new e(p)}else throw new Error(Ll)}typeNarrowingForRunStep(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Ve||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Ve)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let l of r){if(typeof l!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(l)===-1)throw new RangeError(`'fetches' contains invalid output name: ${l}.`);n[l]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let l=!1,o=Object.getOwnPropertyNames(r);for(let p of this.outputNames)if(o.indexOf(p)!==-1){let m=r[p];(m===null||m instanceof Ve)&&(l=!0,u=!1,n[p]=m)}if(l){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let l of this.inputNames)if(typeof t[l]>"u")throw new Error(`input '${l}' is missing in 'feeds'.`);if(u)for(let l of this.outputNames)n[l]=null;return[n,s]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Ve?r[a]=n:r[a]=new Ve(n.type,n.data,n.dims)}return r}async runTrainStep(t,r,a){let[n,s]=this.typeNarrowingForRunStep(t,r,a),u=await this.handler.runTrainStep(t,n,s);return this.convertHandlerReturnTypeToMapOfTensors(u)}async loadParametersBuffer(t,r){throw new Error("Method not implemented.")}async getContiguousParameters(t){throw new Error("Method not implemented.")}async release(){return this.handler.dispose()}}});var Io,Ao=F(()=>{Co();Io=tn});var Ln={};zt(Ln,{InferenceSession:()=>$o,TRACE:()=>Jt,TRACE_BEGIN:()=>Qr,TRACE_END:()=>Zr,Tensor:()=>Ve,TrainingSession:()=>Io,configureTrace:()=>Jr,env:()=>Ce,registerBackend:()=>bt});var at=F(()=>{Qa();no();xo();Xr();Gn();So();Ao()});var Fn={};zt(Fn,{readFile:()=>Fl});var Fl,Hn=F(()=>{Fl=void 0});var jn={};zt(jn,{join:()=>Hl});var Hl,qn=F(()=>{Hl=void 0});var To=Xt((Oo,Kn)=>{"use strict";var _o=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((d,f)=>{a=d,n=f}),r.jsepInit=(d,f,b,S,A,N,G,J)=>{r.ab=d,r.Ra=f,r.Ta=b,r.La=S,r.Sa=A,r.xa=N,r.Ua=G,r.Va=J,f=(Y,ee,Q)=>(...pe)=>{let fe=Xe,_=ee?.();pe=Y(...pe);let re=ee?.();return _!==re&&(Y=re,Q(_),ee=Q=null),Xe!=fe?Mr():pe},b=Y=>async(...ee)=>{try{if(r.Fa)throw Error("Session already started");let Q=r.Fa={Wa:ee[0],errors:[]},pe=await Y(...ee);if(r.Fa!==Q)throw Error("Session mismatch");d.flush();let fe=Q.errors;if(0<fe.length){let _=await Promise.all(fe);if(_=_.filter(re=>re),0<_.length)throw Error(_.join(`
`))}return pe}finally{r.Fa=null}},r._OrtRun=b(f(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=b(f(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=f(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,ee,Q,pe)=>d.registerBuffer(Y,ee,Q,pe),r.jsepUnregisterBuffers=Y=>{d.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>d.getBuffer(Y),r.jsepCreateDownloader=(Y,ee,Q)=>d.createDownloader(Y,ee,Q)};var s=Object.assign({},r),u="./this.program",l=(d,f)=>{throw f},o=typeof window=="object",p=typeof importScripts=="function",m=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="",g,y,$;if(m){var v=(Hn(),Ct(Fn)),C=(qn(),Ct(jn));w=p?C.dirname(w)+"/":__dirname+"/",g=(d,f)=>(d=d.startsWith("file://")?new URL(d):C.normalize(d),v.readFileSync(d,f?void 0:"utf8")),$=d=>(d=g(d,!0),d.buffer||(d=new Uint8Array(d)),d),y=(d,f,b,S=!0)=>{d=d.startsWith("file://")?new URL(d):C.normalize(d),v.readFile(d,S?void 0:"utf8",(A,N)=>{A?b(A):f(S?N.buffer:N)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(d,f)=>{throw process.exitCode=d,f},r.inspect=()=>"[Emscripten Module object]"}else(o||p)&&(p?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),e&&(w=e),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",g=d=>{var f=new XMLHttpRequest;return f.open("GET",d,!1),f.send(null),f.responseText},p&&($=d=>{var f=new XMLHttpRequest;return f.open("GET",d,!1),f.responseType="arraybuffer",f.send(null),new Uint8Array(f.response)}),y=(d,f,b)=>{var S=new XMLHttpRequest;S.open("GET",d,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?f(S.response):b()},S.onerror=b,S.send(null)});var I=r.print||console.log.bind(console),T=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(l=r.quit);var P;r.wasmBinary&&(P=r.wasmBinary);var M=r.noExitRuntime||!0;typeof WebAssembly!="object"&&U("no native wasm support detected");var D,R,B=!1,j,X,le,z,q,xe,oe;function we(){var d=D.buffer;r.HEAP8=X=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAP32=z=new Int32Array(d),r.HEAPU8=le=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAPU32=q=new Uint32Array(d),r.HEAPF32=xe=new Float32Array(d),r.HEAPF64=oe=new Float64Array(d)}var H,Se=[],Oe=[],Ae=[];function _e(){var d=r.preRun.shift();Se.unshift(d)}var je=0,qe=null,Ke=null;function U(d){throw r.onAbort&&r.onAbort(d),d="Aborted("+d+")",T(d),B=!0,j=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}function ce(d){return d.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!ce(de)){var We=de;de=r.locateFile?r.locateFile(We,w):w+We}function Ge(d){if(d==de&&P)return new Uint8Array(P);if($)return $(d);throw"both async and sync fetching of the wasm failed"}function Te(d){if(!P&&(o||p)){if(typeof fetch=="function"&&!d.startsWith("file://"))return fetch(d,{credentials:"same-origin"}).then(f=>{if(!f.ok)throw"failed to load wasm binary file at '"+d+"'";return f.arrayBuffer()}).catch(()=>Ge(d));if(y)return new Promise((f,b)=>{y(d,S=>f(new Uint8Array(S)),b)})}return Promise.resolve().then(()=>Ge(d))}function Me(d,f,b){return Te(d).then(S=>WebAssembly.instantiate(S,f)).then(S=>S).then(b,S=>{T("failed to asynchronously prepare wasm: "+S),U(S)})}function tt(d,f){var b=de;return P||typeof WebAssembly.instantiateStreaming!="function"||ce(b)||b.startsWith("file://")||m||typeof fetch!="function"?Me(b,d,f):fetch(b,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,d).then(f,function(A){return T("wasm streaming compile failed: "+A),T("falling back to ArrayBuffer instantiation"),Me(b,d,f)}))}var Fe,Ye={916496:d=>{r.xa("Abs",d,void 0)},916547:d=>{r.xa("Neg",d,void 0)},916598:d=>{r.xa("Floor",d,void 0)},916651:d=>{r.xa("Ceil",d,void 0)},916703:d=>{r.xa("Reciprocal",d,void 0)},916761:d=>{r.xa("Sqrt",d,void 0)},916813:d=>{r.xa("Exp",d,void 0)},916864:d=>{r.xa("Erf",d,void 0)},916915:d=>{r.xa("Sigmoid",d,void 0)},916970:d=>{r.xa("Log",d,void 0)},917021:d=>{r.xa("Sin",d,void 0)},917072:d=>{r.xa("Cos",d,void 0)},917123:d=>{r.xa("Tan",d,void 0)},917174:d=>{r.xa("Asin",d,void 0)},917226:d=>{r.xa("Acos",d,void 0)},917278:d=>{r.xa("Atan",d,void 0)},917330:d=>{r.xa("Sinh",d,void 0)},917382:d=>{r.xa("Cosh",d,void 0)},917434:d=>{r.xa("Asinh",d,void 0)},917487:d=>{r.xa("Acosh",d,void 0)},917540:d=>{r.xa("Atanh",d,void 0)},917593:d=>{r.xa("Tanh",d,void 0)},917645:d=>{r.xa("Not",d,void 0)},917696:(d,f,b)=>{r.xa("ClipV10",d,{min:f,max:b})},917768:d=>{r.xa("Clip",d,void 0)},917820:(d,f)=>{r.xa("Elu",d,{alpha:f})},917878:d=>{r.xa("Relu",d,void 0)},917930:(d,f)=>{r.xa("LeakyRelu",d,{alpha:f})},917994:(d,f)=>{r.xa("ThresholdedRelu",d,{alpha:f})},918064:(d,f)=>{r.xa("Cast",d,{to:f})},918122:d=>{r.xa("Add",d,void 0)},918173:d=>{r.xa("Sub",d,void 0)},918224:d=>{r.xa("Mul",d,void 0)},918275:d=>{r.xa("Div",d,void 0)},918326:d=>{r.xa("Pow",d,void 0)},918377:d=>{r.xa("Equal",d,void 0)},918430:d=>{r.xa("Greater",d,void 0)},918485:d=>{r.xa("GreaterOrEqual",d,void 0)},918547:d=>{r.xa("Less",d,void 0)},918599:d=>{r.xa("LessOrEqual",d,void 0)},918658:(d,f,b,S,A)=>{r.xa("ReduceMean",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},918822:(d,f,b,S,A)=>{r.xa("ReduceMax",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},918985:(d,f,b,S,A)=>{r.xa("ReduceMin",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},919148:(d,f,b,S,A)=>{r.xa("ReduceProd",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},919312:(d,f,b,S,A)=>{r.xa("ReduceSum",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},919475:(d,f,b,S,A)=>{r.xa("ReduceL1",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},919637:(d,f,b,S,A)=>{r.xa("ReduceL2",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},919799:(d,f,b,S,A)=>{r.xa("ReduceLogSum",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},919965:(d,f,b,S,A)=>{r.xa("ReduceSumSquare",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},920134:(d,f,b,S,A)=>{r.xa("ReduceLogSumExp",d,{keepDims:!!f,noopWithEmptyAxes:!!b,axes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},920303:d=>{r.xa("Where",d,void 0)},920356:(d,f,b)=>{r.xa("Transpose",d,{perm:f?Array.from(z.subarray(b>>>0,b+f>>>0)):[]})},920469:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_,re)=>{r.xa("ConvTranspose",d,{format:Y?"NHWC":"NCHW",autoPad:f,dilations:[b],group:S,kernel_shape:[A],pads:[N,G],strides:[J],wIsConst:()=>!!X[ee>>>0],outputPadding:Q?Array.from(z.subarray(pe>>>0,pe+Q>>>0)):[],outputShape:fe?Array.from(z.subarray(_>>>0,_+fe>>>0)):[],activation:Ne(re)})},920883:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_)=>{r.xa("ConvTranspose",d,{format:J?"NHWC":"NCHW",autoPad:f,dilations:Array.from(z.subarray(b>>>0,b+2>>>0)),group:S,kernelShape:Array.from(z.subarray(A>>>0,A+2>>>0)),pads:Array.from(z.subarray(N>>>0,N+4>>>0)),strides:Array.from(z.subarray(G>>>0,G+2>>>0)),wIsConst:()=>!!X[Y>>>0],outputPadding:0<ee?Array.from(z.subarray(Q>>>0,Q+ee>>>0)):[],outputShape:0<pe?Array.from(z.subarray(fe>>>0,fe+pe>>>0)):[],activation:Ne(_)})},921440:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_,re)=>{r.xa("ConvTranspose",d,{format:Y?"NHWC":"NCHW",autoPad:f,dilations:[b],group:S,kernel_shape:[A],pads:[N,G],strides:[J],wIsConst:()=>!!X[ee>>>0],outputPadding:Q?Array.from(z.subarray(pe>>>0,pe+Q>>>0)):[],outputShape:fe?Array.from(z.subarray(_>>>0,_+fe>>>0)):[],activation:Ne(re)})},921854:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_)=>{r.xa("ConvTranspose",d,{format:J?"NHWC":"NCHW",autoPad:f,dilations:Array.from(z.subarray(b>>>0,b+2>>>0)),group:S,kernelShape:Array.from(z.subarray(A>>>0,A+2>>>0)),pads:Array.from(z.subarray(N>>>0,N+4>>>0)),strides:Array.from(z.subarray(G>>>0,G+2>>>0)),wIsConst:()=>!!X[Y>>>0],outputPadding:0<ee?Array.from(z.subarray(Q>>>0,Q+ee>>>0)):[],outputShape:0<pe?Array.from(z.subarray(fe>>>0,fe+pe>>>0)):[],activation:Ne(_)})},922411:(d,f)=>{r.xa("GlobalAveragePool",d,{format:f?"NHWC":"NCHW"})},922502:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_,re,me)=>{r.xa("AveragePool",d,{format:me?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:S,storage_order:A,dilations:[N,G],kernel_shape:[J,Y],pads:[ee,Q,pe,fe],strides:[_,re]})},922786:(d,f)=>{r.xa("GlobalAveragePool",d,{format:f?"NHWC":"NCHW"})},922877:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_,re,me)=>{r.xa("AveragePool",d,{format:me?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:S,storage_order:A,dilations:[N,G],kernel_shape:[J,Y],pads:[ee,Q,pe,fe],strides:[_,re]})},923161:(d,f)=>{r.xa("GlobalMaxPool",d,{format:f?"NHWC":"NCHW"})},923248:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_,re,me)=>{r.xa("MaxPool",d,{format:me?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:S,storage_order:A,dilations:[N,G],kernel_shape:[J,Y],pads:[ee,Q,pe,fe],strides:[_,re]})},923528:(d,f)=>{r.xa("GlobalMaxPool",d,{format:f?"NHWC":"NCHW"})},923615:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_,re,me)=>{r.xa("MaxPool",d,{format:me?"NHWC":"NCHW",auto_pad:f,ceil_mode:b,count_include_pad:S,storage_order:A,dilations:[N,G],kernel_shape:[J,Y],pads:[ee,Q,pe,fe],strides:[_,re]})},923895:(d,f,b,S,A)=>{r.xa("Gemm",d,{alpha:f,beta:b,transA:S,transB:A})},923999:d=>{r.xa("MatMul",d,void 0)},924053:(d,f,b,S)=>{r.xa("ArgMax",d,{keepDims:!!f,selectLastIndex:!!b,axis:S})},924161:(d,f,b,S)=>{r.xa("ArgMin",d,{keepDims:!!f,selectLastIndex:!!b,axis:S})},924269:(d,f)=>{r.xa("Softmax",d,{axis:f})},924332:(d,f)=>{r.xa("Concat",d,{axis:f})},924392:(d,f,b,S,A)=>{r.xa("Split",d,{axis:f,numOutputs:b,splitSizes:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},924537:d=>{r.xa("Expand",d,void 0)},924591:(d,f)=>{r.xa("Gather",d,{axis:Number(f)})},924662:(d,f)=>{r.xa("GatherElements",d,{axis:Number(f)})},924741:(d,f,b,S,A,N,G,J,Y,ee,Q)=>{r.xa("Resize",d,{antialias:f,axes:b?Array.from(z.subarray(S>>>0,S+b>>>0)):[],coordinateTransformMode:Ne(A),cubicCoeffA:N,excludeOutside:G,extrapolationValue:J,keepAspectRatioPolicy:Ne(Y),mode:Ne(ee),nearestMode:Ne(Q)})},925092:(d,f,b,S,A,N,G)=>{r.xa("Slice",d,{starts:f?Array.from(z.subarray(b>>>0,b+f>>>0)):[],ends:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[],axes:N?Array.from(z.subarray(G>>>0,G+N>>>0)):[]})},925323:d=>{r.xa("Tile",d,void 0)},925375:(d,f,b)=>{r.xa("LayerNormalization",d,{axis:Number(f),epsilon:Number(b)})},925482:(d,f,b)=>{r.xa("InstanceNormalization",d,{epsilon:f,format:b?"NHWC":"NCHW"})},925596:(d,f,b)=>{r.xa("InstanceNormalization",d,{epsilon:f,format:b?"NHWC":"NCHW"})},925710:d=>{r.xa("Range",d,void 0)},925763:(d,f)=>{r.xa("Einsum",d,{equation:Ne(f)})},925844:(d,f,b,S,A)=>{r.xa("Pad",d,{mode:f,value:b,pads:S?Array.from(z.subarray(A>>>0,A+S>>>0)):[]})},925976:d=>{r.xa("Gelu",d,void 0)},926028:d=>{r.xa("BiasAdd",d,void 0)},926083:d=>{r.xa("BiasSplitGelu",d,void 0)},926144:(d,f)=>{r.xa("SkipLayerNormalization",d,{epsilon:f})},926225:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe)=>{r.xa("Conv",d,{format:Y?"NHWC":"NCHW",auto_pad:f,dilations:[b],group:S,kernel_shape:[A],pads:N?Array.from(z.subarray(G>>>0,G+N>>>0)):[],strides:[J],w_is_const:()=>!!X[ee>>>0],activation:Ne(Q),activation_params:pe?Array.from(xe.subarray(fe>>>0,fe+pe>>>0)):[]})},926606:(d,f,b,S,A,N,G,J,Y,ee,Q,pe,fe,_,re,me)=>{r.xa("Conv",d,{format:pe?"NHWC":"NCHW",auto_pad:f,dilations:[b,S],group:A,kernel_shape:[N,G],pads:J?Array.from(z.subarray(Y>>>0,Y+J>>>0)):[],strides:[ee,Q],w_is_const:()=>!!X[fe>>>0],activation:Ne(_),activation_params:re?Array.from(xe.subarray(me>>>0,me+re>>>0)):[]})},927008:d=>{r.Ua(d)},927042:(d,f)=>r.Va(d,f,r.Fa.Wa,r.Fa.errors),927154:d=>r.Ra(d),927187:d=>r.Ta(d),927219:(d,f,b)=>{r.La(d,f,b,!0)},927258:(d,f,b)=>{r.La(d,f,b)}};function Ot(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}var ct=d=>{for(;0<d.length;)d.shift()(r)};function kr(d){this.Ka=d-24,this.Pa=function(f){q[this.Ka+4>>2>>>0]=f},this.Oa=function(f){q[this.Ka+8>>2>>>0]=f},this.Ma=function(f,b){this.Na(),this.Pa(f),this.Oa(b)},this.Na=function(){q[this.Ka+16>>2>>>0]=0}}var er=0,rt=0,tr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,pt=(d,f,b)=>{f>>>=0;var S=f+b;for(b=f;d[b]&&!(b>=S);)++b;if(16<b-f&&d.buffer&&tr)return tr.decode(d.subarray(f,b));for(S="";f<b;){var A=d[f++];if(A&128){var N=d[f++]&63;if((A&224)==192)S+=String.fromCharCode((A&31)<<6|N);else{var G=d[f++]&63;A=(A&240)==224?(A&15)<<12|N<<6|G:(A&7)<<18|N<<12|G<<6|d[f++]&63,65536>A?S+=String.fromCharCode(A):(A-=65536,S+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else S+=String.fromCharCode(A)}return S},Ne=(d,f)=>(d>>>=0)?pt(le,d,f):"",rr=d=>{for(var f=0,b=0;b<d.length;++b){var S=d.charCodeAt(b);127>=S?f++:2047>=S?f+=2:55296<=S&&57343>=S?(f+=4,++b):f+=3}return f},Gt=(d,f,b,S)=>{if(b>>>=0,!(0<S))return 0;var A=b;S=b+S-1;for(var N=0;N<d.length;++N){var G=d.charCodeAt(N);if(55296<=G&&57343>=G){var J=d.charCodeAt(++N);G=65536+((G&1023)<<10)|J&1023}if(127>=G){if(b>=S)break;f[b++>>>0]=G}else{if(2047>=G){if(b+1>=S)break;f[b++>>>0]=192|G>>6}else{if(65535>=G){if(b+2>=S)break;f[b++>>>0]=224|G>>12}else{if(b+3>=S)break;f[b++>>>0]=240|G>>18,f[b++>>>0]=128|G>>12&63}f[b++>>>0]=128|G>>6&63}f[b++>>>0]=128|G&63}}return f[b>>>0]=0,b-A},$t=d=>d%4===0&&(d%100!==0||d%400===0),ft=[0,31,60,91,121,152,182,213,244,274,305,335],Lt=[0,31,59,90,120,151,181,212,243,273,304,334],Tt=d=>{var f=rr(d)+1,b=Kt(f);return b&&Gt(d,le,b,f),b},Rt=[],nr=(d,f)=>{Rt.length=0;var b;for(f>>=2;b=le[d++>>>0];)f+=b!=105&f,Rt.push(b==105?z[f>>>0]:oe[f++>>>1]),++f;return Rt},Ft={},ar=()=>{if(!Ht){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},f;for(f in Ft)Ft[f]===void 0?delete d[f]:d[f]=Ft[f];var b=[];for(f in d)b.push(`${f}=${d[f]}`);Ht=b}return Ht},Ht,Ue=[null,[],[]],or=[31,29,31,30,31,30,31,31,30,31,30,31],jt=[31,28,31,30,31,30,31,31,30,31,30,31];function ie(d){var f=Array(rr(d)+1);return Gt(d,f,0,f.length),f}function kt(d,f,b,S){function A(_,re,me){for(_=typeof _=="number"?_.toString():_||"";_.length<re;)_=me[0]+_;return _}function N(_,re){return A(_,re,"0")}function G(_,re){function me(wr){return 0>wr?-1:0<wr?1:0}var yt;return(yt=me(_.getFullYear()-re.getFullYear()))===0&&(yt=me(_.getMonth()-re.getMonth()))===0&&(yt=me(_.getDate()-re.getDate())),yt}function J(_){switch(_.getDay()){case 0:return new Date(_.getFullYear()-1,11,29);case 1:return _;case 2:return new Date(_.getFullYear(),0,3);case 3:return new Date(_.getFullYear(),0,2);case 4:return new Date(_.getFullYear(),0,1);case 5:return new Date(_.getFullYear()-1,11,31);case 6:return new Date(_.getFullYear()-1,11,30)}}function Y(_){var re=_.Da;for(_=new Date(new Date(_.Ea+1900,0,1).getTime());0<re;){var me=_.getMonth(),yt=($t(_.getFullYear())?or:jt)[me];if(re>yt-_.getDate())re-=yt-_.getDate()+1,_.setDate(1),11>me?_.setMonth(me+1):(_.setMonth(0),_.setFullYear(_.getFullYear()+1));else{_.setDate(_.getDate()+re);break}}return me=new Date(_.getFullYear()+1,0,4),re=J(new Date(_.getFullYear(),0,4)),me=J(me),0>=G(re,_)?0>=G(me,_)?_.getFullYear()+1:_.getFullYear():_.getFullYear()-1}d>>>=0,f>>>=0,b>>>=0,S>>>=0;var ee=z[S+40>>2>>>0];S={Za:z[S>>2>>>0],Ya:z[S+4>>2>>>0],Ga:z[S+8>>2>>>0],Ja:z[S+12>>2>>>0],Ha:z[S+16>>2>>>0],Ea:z[S+20>>2>>>0],Ca:z[S+24>>2>>>0],Da:z[S+28>>2>>>0],bb:z[S+32>>2>>>0],Xa:z[S+36>>2>>>0],$a:ee?Ne(ee):""},b=Ne(b),ee={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var Q in ee)b=b.replace(new RegExp(Q,"g"),ee[Q]);var pe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),fe="January February March April May June July August September October November December".split(" ");ee={"%a":_=>pe[_.Ca].substring(0,3),"%A":_=>pe[_.Ca],"%b":_=>fe[_.Ha].substring(0,3),"%B":_=>fe[_.Ha],"%C":_=>N((_.Ea+1900)/100|0,2),"%d":_=>N(_.Ja,2),"%e":_=>A(_.Ja,2," "),"%g":_=>Y(_).toString().substring(2),"%G":_=>Y(_),"%H":_=>N(_.Ga,2),"%I":_=>(_=_.Ga,_==0?_=12:12<_&&(_-=12),N(_,2)),"%j":_=>{for(var re=0,me=0;me<=_.Ha-1;re+=($t(_.Ea+1900)?or:jt)[me++]);return N(_.Ja+re,3)},"%m":_=>N(_.Ha+1,2),"%M":_=>N(_.Ya,2),"%n":()=>`
`,"%p":_=>0<=_.Ga&&12>_.Ga?"AM":"PM","%S":_=>N(_.Za,2),"%t":()=>"	","%u":_=>_.Ca||7,"%U":_=>N(Math.floor((_.Da+7-_.Ca)/7),2),"%V":_=>{var re=Math.floor((_.Da+7-(_.Ca+6)%7)/7);if(2>=(_.Ca+371-_.Da-2)%7&&re++,re)re==53&&(me=(_.Ca+371-_.Da)%7,me==4||me==3&&$t(_.Ea)||(re=1));else{re=52;var me=(_.Ca+7-_.Da-1)%7;(me==4||me==5&&$t(_.Ea%400-1))&&re++}return N(re,2)},"%w":_=>_.Ca,"%W":_=>N(Math.floor((_.Da+7-(_.Ca+6)%7)/7),2),"%y":_=>(_.Ea+1900).toString().substring(2),"%Y":_=>_.Ea+1900,"%z":_=>{_=_.Xa;var re=0<=_;return _=Math.abs(_)/60,(re?"+":"-")+("0000"+(_/60*100+_%60)).slice(-4)},"%Z":_=>_.$a,"%%":()=>"%"},b=b.replace(/%%/g,"\0\0");for(Q in ee)b.includes(Q)&&(b=b.replace(new RegExp(Q,"g"),ee[Q](S)));return b=b.replace(/\0\0/g,"%"),Q=ie(b),Q.length>f?0:(X.set(Q,d>>>0),Q.length-1)}function Pt(d){try{d()}catch(f){U(f)}}function kn(d){var f={},b;for(b in d)(function(S){var A=d[S];f[S]=typeof A=="function"?function(){Mt.push(S);try{return A.apply(null,arguments)}finally{B||(Mt.pop()===S||U(),Xe&&Qe===1&&Mt.length===0&&(Qe=0,Pt(hr),typeof Fibers<"u"&&Fibers.cb()))}}:A})(b);return f}var Qe=0,Xe=null,ir=0,Mt=[],sr={},ur={},lr=0,qt=null,Pr=[];function Mr(){return new Promise((d,f)=>{qt={resolve:d,reject:f}})}function Dr(){var d=Kt(65548),f=d+12;q[d>>2>>>0]=f,q[d+4>>2>>>0]=f+65536,f=Mt[0];var b=sr[f];return b===void 0&&(b=lr++,sr[f]=b,ur[b]=f),z[d+8>>2>>>0]=b,d}function Br(d){if(!B){if(Qe===0){var f=!1,b=!1;d((S=0)=>{if(!B&&(ir=S,f=!0,b)){Qe=2,Pt(()=>gr(Xe)),typeof Browser<"u"&&Browser.Ia.Qa&&Browser.Ia.resume(),S=!1;try{var A=(0,R[ur[z[Xe+8>>2>>>0]]])()}catch(J){A=J,S=!0}var N=!1;if(!Xe){var G=qt;G&&(qt=null,(S?G.reject:G.resolve)(A),N=!0)}if(S&&!N)throw A}}),b=!0,f||(Qe=1,Xe=Dr(),typeof Browser<"u"&&Browser.Ia.Qa&&Browser.Ia.pause(),Pt(()=>mr(Xe)))}else Qe===2?(Qe=0,Pt(yr),pr(Xe),Xe=null,Pr.forEach(S=>{if(!B)try{if(S(),!M)try{j=j=S=j,M||(r.onExit&&r.onExit(S),B=!0),l(S,new Ot(S))}catch(A){A instanceof Ot||A=="unwind"||l(1,A)}}catch(A){A instanceof Ot||A=="unwind"||l(1,A)}})):U(`invalid state: ${Qe}`);return ir}}function zr(d){return Br(f=>{d().then(f)})}var mt=[],ht=void 0,dr=[];function cr(d,f){if(!ht){ht=new WeakMap;var b=H.length;if(ht)for(var S=0;S<0+b;S++){var A=S,N=mt[A];N||(A>=mt.length&&(mt.length=A+1),mt[A]=N=H.get(A)),(A=N)&&ht.set(A,S)}}if(b=ht.get(d)||0)return b;if(dr.length)b=dr.pop();else{try{H.grow(1)}catch(J){throw J instanceof RangeError?"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.":J}b=H.length-1}try{S=b,H.set(S,d),mt[S]=H.get(S)}catch(J){if(!(J instanceof TypeError))throw J;if(typeof WebAssembly.Function=="function"){S=WebAssembly.Function,A={i:"i32",j:"i64",f:"f32",d:"f64",p:"i32"},N={parameters:[],results:f[0]=="v"?[]:[A[f[0]]]};for(var G=1;G<f.length;++G)N.parameters.push(A[f[G]]);f=new S(N,d)}else{for(S=[1],A=f.slice(0,1),f=f.slice(1),N={i:127,p:127,j:126,f:125,d:124},S.push(96),G=f.length,128>G?S.push(G):S.push(G%128|128,G>>7),G=0;G<f.length;++G)S.push(N[f[G]]);A=="v"?S.push(0):S.push(1,N[A]),f=[0,97,115,109,1,0,0,0,1],A=S.length,128>A?f.push(A):f.push(A%128|128,A>>7),f.push.apply(f,S),f.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),f=new WebAssembly.Module(new Uint8Array(f)),f=new WebAssembly.Instance(f,{e:{f:d}}).exports.f}S=b,H.set(S,f),mt[S]=H.get(S)}return ht.set(d,b),b}var Wr={n:function(d,f,b){return zr(async()=>{await r.Sa(d,f,b)})},a:function(d,f,b){throw d>>>=0,new kr(d).Ma(f>>>0,b>>>0),er=d,rt++,er},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},F:function(){},m:function(){},A:function(){},x:function(){},I:function(){},y:function(){},M:()=>!0,q:function(d,f,b){d=f+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*f:NaN,b>>>=0,d=new Date(1e3*d),z[b>>2>>>0]=d.getUTCSeconds(),z[b+4>>2>>>0]=d.getUTCMinutes(),z[b+8>>2>>>0]=d.getUTCHours(),z[b+12>>2>>>0]=d.getUTCDate(),z[b+16>>2>>>0]=d.getUTCMonth(),z[b+20>>2>>>0]=d.getUTCFullYear()-1900,z[b+24>>2>>>0]=d.getUTCDay(),z[b+28>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,f,b){d=f+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*f:NaN,b>>>=0,d=new Date(1e3*d),z[b>>2>>>0]=d.getSeconds(),z[b+4>>2>>>0]=d.getMinutes(),z[b+8>>2>>>0]=d.getHours(),z[b+12>>2>>>0]=d.getDate(),z[b+16>>2>>>0]=d.getMonth(),z[b+20>>2>>>0]=d.getFullYear()-1900,z[b+24>>2>>>0]=d.getDay(),z[b+28>>2>>>0]=($t(d.getFullYear())?ft:Lt)[d.getMonth()]+d.getDate()-1|0,z[b+36>>2>>>0]=-(60*d.getTimezoneOffset()),f=new Date(d.getFullYear(),6,1).getTimezoneOffset();var S=new Date(d.getFullYear(),0,1).getTimezoneOffset();z[b+32>>2>>>0]=(f!=S&&d.getTimezoneOffset()==Math.min(S,f))|0},s:function(d){d>>>=0;var f=new Date(z[d+20>>2>>>0]+1900,z[d+16>>2>>>0],z[d+12>>2>>>0],z[d+8>>2>>>0],z[d+4>>2>>>0],z[d>>2>>>0],0),b=z[d+32>>2>>>0],S=f.getTimezoneOffset(),A=new Date(f.getFullYear(),6,1).getTimezoneOffset(),N=new Date(f.getFullYear(),0,1).getTimezoneOffset(),G=Math.min(N,A);return 0>b?z[d+32>>2>>>0]=+(A!=N&&G==S):0<b!=(G==S)&&(A=Math.max(N,A),f.setTime(f.getTime()+6e4*((0<b?G:A)-S))),z[d+24>>2>>>0]=f.getDay(),z[d+28>>2>>>0]=($t(f.getFullYear())?ft:Lt)[f.getMonth()]+f.getDate()-1|0,z[d>>2>>>0]=f.getSeconds(),z[d+4>>2>>>0]=f.getMinutes(),z[d+8>>2>>>0]=f.getHours(),z[d+12>>2>>>0]=f.getDate(),z[d+16>>2>>>0]=f.getMonth(),z[d+20>>2>>>0]=f.getYear(),d=f.getTime()/1e3,fr((Fe=d,1<=+Math.abs(Fe)?0<Fe?+Math.floor(Fe/4294967296)>>>0:~~+Math.ceil((Fe-+(~~Fe>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},v:function(d,f,b){function S(Y){return(Y=Y.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Y[1]:"GMT"}b>>>=0;var A=new Date().getFullYear(),N=new Date(A,0,1),G=new Date(A,6,1);A=N.getTimezoneOffset();var J=G.getTimezoneOffset();q[d>>>0>>2>>>0]=60*Math.max(A,J),z[f>>>0>>2>>>0]=+(A!=J),d=S(N),f=S(G),d=Tt(d),f=Tt(f),J<A?(q[b>>2>>>0]=d,q[b+4>>2>>>0]=f):(q[b>>2>>>0]=f,q[b+4>>2>>>0]=d)},e:()=>{U("")},b:function(d,f,b){return d>>>=0,f=nr(f>>>0,b>>>0),Ye[d].apply(null,f)},j:function(d,f,b){return d>>>=0,f=nr(f>>>0,b>>>0),Ye[d].apply(null,f)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(d,f,b){return f>>>=0,le.copyWithin(d>>>0>>>0,f>>>0,f+(b>>>0)>>>0)},u:function(d){d>>>=0;var f=le.length;if(4294901760<d)return!1;for(var b=1;4>=b;b*=2){var S=f*(1+.2/b);S=Math.min(S,d+100663296);var A=Math;S=Math.max(d,S);e:{A=A.min.call(A,4294901760,S+(65536-S%65536)%65536)-D.buffer.byteLength+65535>>>16;try{D.grow(A),we();var N=1;break e}catch{}N=void 0}if(N)return!0}return!1},D:function(d,f){d>>>=0,f>>>=0;var b=0;return ar().forEach(function(S,A){var N=f+b;for(A=q[d+4*A>>2>>>0]=N,N=0;N<S.length;++N)X[A++>>0>>>0]=S.charCodeAt(N);X[A>>0>>>0]=0,b+=S.length+1}),0},E:function(d,f){d>>>=0,f>>>=0;var b=ar();q[d>>2>>>0]=b.length;var S=0;return b.forEach(function(A){S+=A.length+1}),q[f>>2>>>0]=S,0},f:()=>52,l:function(){return 52},t:function(){return 70},k:function(d,f,b,S){f>>>=0,b>>>=0,S>>>=0;for(var A=0,N=0;N<b;N++){var G=q[f>>2>>>0],J=q[f+4>>2>>>0];f+=8;for(var Y=0;Y<J;Y++){var ee=le[G+Y>>>0],Q=Ue[d];ee===0||ee===10?((d===1?I:T)(pt(Q,0)),Q.length=0):Q.push(ee)}A+=J}return q[S>>2>>>0]=A,0},G:kt,d:function(d,f,b,S){return kt(d>>>0,f>>>0,b>>>0,S>>>0)},i:function(d,f,b,S){let A=H.length;d=new Uint8Array(le.slice(d+f,d+b));try{var N=new WebAssembly.Module(d),G=new WebAssembly.Instance(N,{env:{memory:D}}),J;for(J in G.exports)cr(G.exports[J]);return A<H.length?A:S}catch(Y){return console.log(Y),S}}};(function(){function d(b){if(b=b.exports,b=kn(b),R=b=Nr(b),D=R.N,we(),H=R.sa,Oe.unshift(R.O),je--,r.monitorRunDependencies&&r.monitorRunDependencies(je),je==0&&(qe!==null&&(clearInterval(qe),qe=null),Ke)){var S=Ke;Ke=null,S()}return b}var f={a:Wr};if(je++,r.monitorRunDependencies&&r.monitorRunDependencies(je),r.instantiateWasm)try{return r.instantiateWasm(f,d)}catch(b){T("Module.instantiateWasm callback failed with error: "+b),n(b)}return tt(f,function(b){d(b.instance)}).catch(n),{}})(),r._OrtInit=(d,f)=>(r._OrtInit=R.P)(d,f),r._OrtGetLastError=(d,f)=>(r._OrtGetLastError=R.Q)(d,f),r._OrtCreateSessionOptions=(d,f,b,S,A,N,G,J,Y,ee)=>(r._OrtCreateSessionOptions=R.R)(d,f,b,S,A,N,G,J,Y,ee),r._OrtAppendExecutionProvider=(d,f)=>(r._OrtAppendExecutionProvider=R.S)(d,f),r._OrtAddFreeDimensionOverride=(d,f,b)=>(r._OrtAddFreeDimensionOverride=R.T)(d,f,b),r._OrtAddSessionConfigEntry=(d,f,b)=>(r._OrtAddSessionConfigEntry=R.U)(d,f,b),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=R.V)(d),r._OrtCreateSession=(d,f,b)=>(r._OrtCreateSession=R.W)(d,f,b),r._OrtReleaseSession=d=>(r._OrtReleaseSession=R.X)(d),r._OrtGetInputOutputCount=(d,f,b)=>(r._OrtGetInputOutputCount=R.Y)(d,f,b),r._OrtGetInputName=(d,f)=>(r._OrtGetInputName=R.Z)(d,f),r._OrtGetOutputName=(d,f)=>(r._OrtGetOutputName=R._)(d,f),r._OrtFree=d=>(r._OrtFree=R.$)(d),r._OrtCreateTensor=(d,f,b,S,A,N)=>(r._OrtCreateTensor=R.aa)(d,f,b,S,A,N),r._OrtGetTensorData=(d,f,b,S,A)=>(r._OrtGetTensorData=R.ba)(d,f,b,S,A),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=R.ca)(d),r._OrtCreateRunOptions=(d,f,b,S)=>(r._OrtCreateRunOptions=R.da)(d,f,b,S),r._OrtAddRunConfigEntry=(d,f,b)=>(r._OrtAddRunConfigEntry=R.ea)(d,f,b),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=R.fa)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=R.ga)(d),r._OrtBindInput=(d,f,b)=>(r._OrtBindInput=R.ha)(d,f,b),r._OrtBindOutput=(d,f,b,S)=>(r._OrtBindOutput=R.ia)(d,f,b,S),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=R.ja)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=R.ka)(d),r._OrtRunWithBinding=(d,f,b,S,A)=>(r._OrtRunWithBinding=R.la)(d,f,b,S,A),r._OrtRun=(d,f,b,S,A,N,G,J)=>(r._OrtRun=R.ma)(d,f,b,S,A,N,G,J),r._OrtEndProfiling=d=>(r._OrtEndProfiling=R.na)(d),r._JsepOutput=(d,f,b)=>(r._JsepOutput=R.oa)(d,f,b),r._JsepGetNodeName=d=>(r._JsepGetNodeName=R.pa)(d);var Kt=r._malloc=d=>(Kt=r._malloc=R.qa)(d),pr=r._free=d=>(pr=r._free=R.ra)(d),fr=d=>(fr=R.ta)(d),Yt=()=>(Yt=R.ua)(),Dt=d=>(Dt=R.va)(d),gt=d=>(gt=R.wa)(d),mr=d=>(mr=R.ya)(d),hr=()=>(hr=R.za)(),gr=d=>(gr=R.Aa)(d),yr=()=>(yr=R.Ba)();r.___start_em_js=927291,r.___stop_em_js=928064;function Nr(d){d=Object.assign({},d);var f=S=>()=>S()>>>0,b=S=>A=>S(A)>>>0;return d.__errno_location=f(d.__errno_location),d.malloc=b(d.malloc),d.stackSave=f(d.stackSave),d.stackAlloc=b(d.stackAlloc),d}r.stackAlloc=gt,r.stackSave=Yt,r.stackRestore=Dt,r.addFunction=cr,r.UTF8ToString=Ne,r.stringToUTF8=(d,f,b)=>Gt(d,le,f,b),r.lengthBytesUTF8=rr;var xt;Ke=function d(){xt||br(),xt||(Ke=d)};function br(){function d(){if(!xt&&(xt=!0,r.calledRun=!0,!B)){if(ct(Oe),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var f=r.postRun.shift();Ae.unshift(f)}ct(Ae)}}if(!(0<je)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)_e();ct(Se),0<je||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),d()},1)):d())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return br(),t.ready}})();typeof Oo=="object"&&typeof Kn=="object"?Kn.exports=_o:typeof define=="function"&&define.amd&&define([],()=>_o)});var Ro=Xt(()=>{});var ko=Xt(()=>{});var Po={};zt(Po,{cpus:()=>jl});var jl,Mo=F(()=>{jl=void 0});var zo=Xt((Bo,Yn)=>{"use strict";var Do=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return we.buffer!=_e.buffer&&de(),_e}function a(){return we.buffer!=_e.buffer&&de(),je}function n(){return we.buffer!=_e.buffer&&de(),qe}function s(){return we.buffer!=_e.buffer&&de(),Ke}function u(){return we.buffer!=_e.buffer&&de(),U}function l(){return we.buffer!=_e.buffer&&de(),ce}var o=t,p,m;o.ready=new Promise((i,c)=>{p=i,m=c}),o.jsepInit=(i,c,h,x,E,k,V,ae)=>{o.Qb=i,o.wb=c,o.yb=h,o.jb=x,o.xb=E,o.Ea=k,o.zb=V,o.Ab=ae,c=(te,Z,ne)=>(...he)=>{let be=nt,O=Z?.();he=te(...he);let ue=Z?.();return O!==ue&&(te=ue,ne(O),Z=ne=null),nt!=be?Rl():he},h=te=>async(...Z)=>{try{if(o.bb)throw Error("Session already started");let ne=o.bb={Fb:Z[0],errors:[]},he=await te(...Z);if(o.bb!==ne)throw Error("Session mismatch");i.flush();let be=ne.errors;if(0<be.length){let O=await Promise.all(be);if(O=O.filter(ue=>ue),0<O.length)throw Error(O.join(`
`))}return he}finally{o.bb=null}},o._OrtRun=h(c(o._OrtRun,()=>o._OrtRun,te=>o._OrtRun=te)),o._OrtRunWithBinding=h(c(o._OrtRunWithBinding,()=>o._OrtRunWithBinding,te=>o._OrtRunWithBinding=te)),o._OrtBindInput=c(o._OrtBindInput,()=>o._OrtBindInput,te=>o._OrtBindInput=te),o.jsepRegisterBuffer=(te,Z,ne,he)=>i.registerBuffer(te,Z,ne,he),o.jsepUnregisterBuffers=te=>{i.unregisterBuffers(te)},o.jsepGetBuffer=te=>i.getBuffer(te),o.jsepCreateDownloader=(te,Z,ne)=>i.createDownloader(te,Z,ne)};var w=Object.assign({},o),g="./this.program",y=(i,c)=>{throw c},$=typeof window=="object",v=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",I=o.ENVIRONMENT_IS_PTHREAD||!1,T="";function P(i){return o.locateFile?o.locateFile(i,T):T+i}var M,D,R;if(C){var B=(Hn(),Ct(Fn)),j=(qn(),Ct(jn));T=v?j.dirname(T)+"/":__dirname+"/",M=(c,h)=>(c=c.startsWith("file://")?new URL(c):j.normalize(c),B.readFileSync(c,h?void 0:"utf8")),R=c=>(c=M(c,!0),c.buffer||(c=new Uint8Array(c)),c),D=(c,h,x,E=!0)=>{c=c.startsWith("file://")?new URL(c):j.normalize(c),B.readFile(c,E?void 0:"utf8",(k,V)=>{k?x(k):h(E?V.buffer:V)})},!o.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),y=(c,h)=>{throw process.exitCode=c,h},o.inspect=()=>"[Emscripten Module object]";let i;try{i=Ro()}catch(c){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),c}global.Worker=i.Worker}else($||v)&&(v?T=self.location.href:typeof document<"u"&&document.currentScript&&(T=document.currentScript.src),typeof e<"u"&&e&&(T=e),T.indexOf("blob:")!==0?T=T.substr(0,T.replace(/[?#].*/,"").lastIndexOf("/")+1):T="",C||(M=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},v&&(R=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),D=(i,c,h)=>{var x=new XMLHttpRequest;x.open("GET",i,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?c(x.response):h()},x.onerror=h,x.send(null)}));C&&typeof performance>"u"&&(global.performance=ko().performance);var X=console.log.bind(console),le=console.error.bind(console);C&&(X=(...i)=>B.writeSync(1,i.join(" ")+`
`),le=(...i)=>B.writeSync(2,i.join(" ")+`
`));var z=o.print||X,q=o.printErr||le;Object.assign(o,w),w=null,o.thisProgram&&(g=o.thisProgram),o.quit&&(y=o.quit);var xe;o.wasmBinary&&(xe=o.wasmBinary);var oe=o.noExitRuntime||!0;typeof WebAssembly!="object"&&rt("no native wasm support detected");var we,H,Se,Oe=!1,Ae,_e,je,qe,Ke,U,ce;function de(){var i=we.buffer;o.HEAP8=_e=new Int8Array(i),o.HEAP16=new Int16Array(i),o.HEAP32=qe=new Int32Array(i),o.HEAPU8=je=new Uint8Array(i),o.HEAPU16=new Uint16Array(i),o.HEAPU32=Ke=new Uint32Array(i),o.HEAPF32=U=new Float32Array(i),o.HEAPF64=ce=new Float64Array(i)}var We=o.INITIAL_MEMORY||16777216;if(5242880<=We||rt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+We+"! (STACK_SIZE=5242880)"),I)we=o.wasmMemory;else if(o.wasmMemory)we=o.wasmMemory;else if(we=new WebAssembly.Memory({initial:We/65536,maximum:65536,shared:!0}),!(we.buffer instanceof SharedArrayBuffer))throw q("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&q("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");de(),We=we.buffer.byteLength;var Ge=[],Te=[],Me=[],tt=0;function Fe(){return oe||0<tt}var Ye=0,Ot=null,ct=null;function kr(){Ye++,o.monitorRunDependencies&&o.monitorRunDependencies(Ye)}function er(){if(Ye--,o.monitorRunDependencies&&o.monitorRunDependencies(Ye),Ye==0&&(Ot!==null&&(clearInterval(Ot),Ot=null),ct)){var i=ct;ct=null,i()}}function rt(i){throw o.onAbort&&o.onAbort(i),i="Aborted("+i+")",q(i),Oe=!0,Ae=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),m(i),i}function tr(i){return i.startsWith("data:application/octet-stream;base64,")}var pt;pt="ort-wasm-simd-threaded.wasm",tr(pt)||(pt=P(pt));function Ne(i){if(i==pt&&xe)return new Uint8Array(xe);if(R)return R(i);throw"both async and sync fetching of the wasm failed"}function rr(i){if(!xe&&($||v)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+i+"'";return c.arrayBuffer()}).catch(()=>Ne(i));if(D)return new Promise((c,h)=>{D(i,x=>c(new Uint8Array(x)),h)})}return Promise.resolve().then(()=>Ne(i))}function Gt(i,c,h){return rr(i).then(x=>WebAssembly.instantiate(x,c)).then(x=>x).then(h,x=>{q("failed to asynchronously prepare wasm: "+x),rt(x)})}function $t(i,c){var h=pt;return xe||typeof WebAssembly.instantiateStreaming!="function"||tr(h)||h.startsWith("file://")||C||typeof fetch!="function"?Gt(h,i,c):fetch(h,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,i).then(c,function(E){return q("wasm streaming compile failed: "+E),q("falling back to ArrayBuffer instantiation"),Gt(h,i,c)}))}var ft,Lt={1427128:i=>{o.Ea("Abs",i,void 0)},1427179:i=>{o.Ea("Neg",i,void 0)},1427230:i=>{o.Ea("Floor",i,void 0)},1427283:i=>{o.Ea("Ceil",i,void 0)},1427335:i=>{o.Ea("Reciprocal",i,void 0)},1427393:i=>{o.Ea("Sqrt",i,void 0)},1427445:i=>{o.Ea("Exp",i,void 0)},1427496:i=>{o.Ea("Erf",i,void 0)},1427547:i=>{o.Ea("Sigmoid",i,void 0)},1427602:i=>{o.Ea("Log",i,void 0)},1427653:i=>{o.Ea("Sin",i,void 0)},1427704:i=>{o.Ea("Cos",i,void 0)},1427755:i=>{o.Ea("Tan",i,void 0)},1427806:i=>{o.Ea("Asin",i,void 0)},1427858:i=>{o.Ea("Acos",i,void 0)},1427910:i=>{o.Ea("Atan",i,void 0)},1427962:i=>{o.Ea("Sinh",i,void 0)},1428014:i=>{o.Ea("Cosh",i,void 0)},1428066:i=>{o.Ea("Asinh",i,void 0)},1428119:i=>{o.Ea("Acosh",i,void 0)},1428172:i=>{o.Ea("Atanh",i,void 0)},1428225:i=>{o.Ea("Tanh",i,void 0)},1428277:i=>{o.Ea("Not",i,void 0)},1428328:(i,c,h)=>{o.Ea("ClipV10",i,{min:c,max:h})},1428400:i=>{o.Ea("Clip",i,void 0)},1428452:(i,c)=>{o.Ea("Elu",i,{alpha:c})},1428510:i=>{o.Ea("Relu",i,void 0)},1428562:(i,c)=>{o.Ea("LeakyRelu",i,{alpha:c})},1428626:(i,c)=>{o.Ea("ThresholdedRelu",i,{alpha:c})},1428696:i=>{o.zb(i)},1428730:(i,c)=>o.Ab(i,c,o.bb.Fb,o.bb.errors),1428842:(i,c)=>{o.Ea("Cast",i,{to:c})},1428900:i=>{o.Ea("Add",i,void 0)},1428951:i=>{o.Ea("Sub",i,void 0)},1429002:i=>{o.Ea("Mul",i,void 0)},1429053:i=>{o.Ea("Div",i,void 0)},1429104:i=>{o.Ea("Pow",i,void 0)},1429155:i=>{o.Ea("Equal",i,void 0)},1429208:i=>{o.Ea("Greater",i,void 0)},1429263:i=>{o.Ea("GreaterOrEqual",i,void 0)},1429325:i=>{o.Ea("Less",i,void 0)},1429377:i=>{o.Ea("LessOrEqual",i,void 0)},1429436:(i,c,h,x,E)=>{o.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1429600:(i,c,h,x,E)=>{o.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1429763:(i,c,h,x,E)=>{o.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1429926:(i,c,h,x,E)=>{o.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1430090:(i,c,h,x,E)=>{o.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1430253:(i,c,h,x,E)=>{o.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1430415:(i,c,h,x,E)=>{o.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1430577:(i,c,h,x,E)=>{o.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1430743:(i,c,h,x,E)=>{o.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1430912:(i,c,h,x,E)=>{o.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1431081:i=>{o.Ea("Where",i,void 0)},1431134:(i,c,h)=>{o.Ea("Transpose",i,{perm:c?Array.from(n().subarray(h>>>0,h+c>>>0)):[]})},1431247:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be)=>{o.Ea("Conv",i,{format:te?"NHWC":"NCHW",auto_pad:c,dilations:[h],group:x,kernel_shape:[E],pads:k?Array.from(n().subarray(V>>>0,V+k>>>0)):[],strides:[ae],w_is_const:()=>!!r()[Z>>>0],activation:Ue(ne),activation_params:he?Array.from(u().subarray(be>>>0,be+he>>>0)):[]})},1431628:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O,ue,ye)=>{o.Ea("Conv",i,{format:he?"NHWC":"NCHW",auto_pad:c,dilations:[h,x],group:E,kernel_shape:[k,V],pads:ae?Array.from(n().subarray(te>>>0,te+ae>>>0)):[],strides:[Z,ne],w_is_const:()=>!!r()[be>>>0],activation:Ue(O),activation_params:ue?Array.from(u().subarray(ye>>>0,ye+ue>>>0)):[]})},1432030:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O,ue)=>{o.Ea("ConvTranspose",i,{format:te?"NHWC":"NCHW",autoPad:c,dilations:[h],group:x,kernel_shape:[E],pads:[k,V],strides:[ae],wIsConst:()=>!!r()[Z>>>0],outputPadding:ne?Array.from(n().subarray(he>>>0,he+ne>>>0)):[],outputShape:be?Array.from(n().subarray(O>>>0,O+be>>>0)):[],activation:Ue(ue)})},1432444:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O)=>{o.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(h>>>0,h+2>>>0)),group:x,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(k>>>0,k+4>>>0)),strides:Array.from(n().subarray(V>>>0,V+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<Z?Array.from(n().subarray(ne>>>0,ne+Z>>>0)):[],outputShape:0<he?Array.from(n().subarray(be>>>0,be+he>>>0)):[],activation:Ue(O)})},1433001:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O,ue)=>{o.Ea("ConvTranspose",i,{format:te?"NHWC":"NCHW",autoPad:c,dilations:[h],group:x,kernel_shape:[E],pads:[k,V],strides:[ae],wIsConst:()=>!!r()[Z>>>0],outputPadding:ne?Array.from(n().subarray(he>>>0,he+ne>>>0)):[],outputShape:be?Array.from(n().subarray(O>>>0,O+be>>>0)):[],activation:Ue(ue)})},1433415:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O)=>{o.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(h>>>0,h+2>>>0)),group:x,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(k>>>0,k+4>>>0)),strides:Array.from(n().subarray(V>>>0,V+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<Z?Array.from(n().subarray(ne>>>0,ne+Z>>>0)):[],outputShape:0<he?Array.from(n().subarray(be>>>0,be+he>>>0)):[],activation:Ue(O)})},1433972:(i,c)=>{o.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1434063:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O,ue,ye)=>{o.Ea("AveragePool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:x,storage_order:E,dilations:[k,V],kernel_shape:[ae,te],pads:[Z,ne,he,be],strides:[O,ue]})},1434347:(i,c)=>{o.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1434438:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O,ue,ye)=>{o.Ea("AveragePool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:x,storage_order:E,dilations:[k,V],kernel_shape:[ae,te],pads:[Z,ne,he,be],strides:[O,ue]})},1434722:(i,c)=>{o.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1434809:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O,ue,ye)=>{o.Ea("MaxPool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:x,storage_order:E,dilations:[k,V],kernel_shape:[ae,te],pads:[Z,ne,he,be],strides:[O,ue]})},1435089:(i,c)=>{o.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1435176:(i,c,h,x,E,k,V,ae,te,Z,ne,he,be,O,ue,ye)=>{o.Ea("MaxPool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:x,storage_order:E,dilations:[k,V],kernel_shape:[ae,te],pads:[Z,ne,he,be],strides:[O,ue]})},1435456:(i,c,h,x,E)=>{o.Ea("Gemm",i,{alpha:c,beta:h,transA:x,transB:E})},1435560:i=>{o.Ea("MatMul",i,void 0)},1435614:(i,c,h,x)=>{o.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!h,axis:x})},1435722:(i,c,h,x)=>{o.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!h,axis:x})},1435830:(i,c)=>{o.Ea("Softmax",i,{axis:c})},1435893:(i,c)=>{o.Ea("Concat",i,{axis:c})},1435953:(i,c,h,x,E)=>{o.Ea("Split",i,{axis:c,numOutputs:h,splitSizes:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1436098:i=>{o.Ea("Expand",i,void 0)},1436152:(i,c)=>{o.Ea("Gather",i,{axis:Number(c)})},1436223:(i,c)=>{o.Ea("GatherElements",i,{axis:Number(c)})},1436302:(i,c,h,x,E,k,V,ae,te,Z,ne)=>{o.Ea("Resize",i,{antialias:c,axes:h?Array.from(n().subarray(x>>>0,x+h>>>0)):[],coordinateTransformMode:Ue(E),cubicCoeffA:k,excludeOutside:V,extrapolationValue:ae,keepAspectRatioPolicy:Ue(te),mode:Ue(Z),nearestMode:Ue(ne)})},1436653:(i,c,h,x,E,k,V)=>{o.Ea("Slice",i,{starts:c?Array.from(n().subarray(h>>>0,h+c>>>0)):[],ends:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[],axes:k?Array.from(n().subarray(V>>>0,V+k>>>0)):[]})},1436884:i=>{o.Ea("Tile",i,void 0)},1436936:(i,c,h)=>{o.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(h)})},1437043:(i,c,h)=>{o.Ea("InstanceNormalization",i,{epsilon:c,format:h?"NHWC":"NCHW"})},1437157:(i,c,h)=>{o.Ea("InstanceNormalization",i,{epsilon:c,format:h?"NHWC":"NCHW"})},1437271:i=>{o.Ea("Range",i,void 0)},1437324:(i,c)=>{o.Ea("Einsum",i,{equation:Ue(c)})},1437405:(i,c,h,x,E)=>{o.Ea("Pad",i,{mode:c,value:h,pads:x?Array.from(n().subarray(E>>>0,E+x>>>0)):[]})},1437537:i=>{o.Ea("Gelu",i,void 0)},1437589:i=>{o.Ea("BiasAdd",i,void 0)},1437644:i=>{o.Ea("BiasSplitGelu",i,void 0)},1437705:(i,c)=>{o.Ea("SkipLayerNormalization",i,{epsilon:c})},1437786:i=>o.wb(i),1437819:i=>o.yb(i),1437851:(i,c,h)=>{o.jb(i,c,h,!0)},1437890:(i,c,h)=>{o.jb(i,c,h)}};function Tt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Rt(i){i.terminate(),i.onmessage=()=>{}}function nr(i){(i=ie.Qa[i])||rt(),ie.Eb(i)}function Ft(i){var c=ie.tb();if(!c)return 6;ie.Ya.push(c),ie.Qa[i.Xa]=c,c.Xa=i.Xa;var h={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return C&&c.unref(),c.postMessage(h,i.Mb),0}var ar=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ht=(i,c,h)=>{c>>>=0;var x=c+h;for(h=c;i[h]&&!(h>=x);)++h;if(16<h-c&&i.buffer&&ar)return ar.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,h):i.subarray(c,h));for(x="";c<h;){var E=i[c++];if(E&128){var k=i[c++]&63;if((E&224)==192)x+=String.fromCharCode((E&31)<<6|k);else{var V=i[c++]&63;E=(E&240)==224?(E&15)<<12|k<<6|V:(E&7)<<18|k<<12|V<<6|i[c++]&63,65536>E?x+=String.fromCharCode(E):(E-=65536,x+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else x+=String.fromCharCode(E)}return x},Ue=(i,c)=>(i>>>=0)?Ht(a(),i,c):"";function or(i){if(I)return f(1,1,i);Ae=i,Fe()||(ie.Hb(),o.onExit&&o.onExit(i),Oe=!0),y(i,new Tt(i))}var jt=i=>{if(Ae=i,I)throw Pt(i),"unwind";or(i)},ie={ab:[],Ya:[],mb:[],Qa:{},gb:function(){I?ie.vb():ie.ub()},ub:function(){Ge.unshift(()=>{kr(),ie.Bb(()=>er())})},vb:function(){ie.receiveObjectTransfer=ie.Db,ie.threadInitTLS=ie.lb,ie.setExitStatus=ie.kb,oe=!1},kb:function(i){Ae=i},Sb:["$terminateWorker"],Hb:function(){for(var i of ie.Ya)Rt(i);for(i of ie.ab)Rt(i);ie.ab=[],ie.Ya=[],ie.Qa=[]},Eb:function(i){var c=i.Xa;delete ie.Qa[c],ie.ab.push(i),ie.Ya.splice(ie.Ya.indexOf(i),1),i.Xa=0,Dn(c)},Db:function(){},lb:function(){ie.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=k=>{k=k.data;var V=k.cmd;if(k.targetThread&&k.targetThread!=Gr()){var ae=ie.Qa[k.Rb];ae?ae.postMessage(k,k.transferList):q('Internal error! Worker sent a message "'+V+'" to target pthread '+k.targetThread+", but that thread no longer exists!")}else V==="checkMailbox"?Dt():V==="spawnThread"?Ft(k):V==="cleanupThread"?nr(k.thread):V==="killThread"?(k=k.thread,V=ie.Qa[k],delete ie.Qa[k],Rt(V),Dn(k),ie.Ya.splice(ie.Ya.indexOf(V),1),V.Xa=0):V==="cancelThread"?ie.Qa[k.thread].postMessage({cmd:"cancel"}):V==="loaded"?(i.loaded=!0,c(i)):V==="alert"?alert("Thread "+k.threadId+": "+k.text):k.target==="setimmediate"?i.postMessage(k):V==="callHandler"?o[k.handler](...k.args):V&&q("worker sent an unknown command "+V)},i.onerror=k=>{throw q("worker sent an error! "+k.filename+":"+k.lineno+": "+k.message),k},C&&(i.on("message",function(k){i.onmessage({data:k})}),i.on("error",function(k){i.onerror(k)}));var h=[],x=["onExit","onAbort","print","printErr"],E;for(E of x)o.hasOwnProperty(E)&&h.push(E);i.postMessage({cmd:"load",handlers:h,urlOrBlob:o.mainScriptUrlOrBlob||e,wasmMemory:we,wasmModule:Se})}),Bb:function(i){i()},qb:function(){var i=P("ort-wasm-simd-threaded.worker.js");i=new Worker(i),ie.ab.push(i)},tb:function(){return ie.ab.length==0&&(ie.qb(),ie.Cb(ie.ab[0])),ie.ab.pop()}};o.PThread=ie;var kt=i=>{for(;0<i.length;)i.shift()(o)};o.establishStackSpace=function(){var i=Gr(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],Fa(c,c-i),Lr(c)};function Pt(i){if(I)return f(2,0,i);jt(i)}o.invokeEntryPoint=function(i,c){i=Ha.apply(null,[i,c]),Fe()?ie.kb(i):Bn(i)};function kn(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,h){this.nb(),this.pb(c),this.ob(h)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Qe=0,Xe=0;function ir(i,c,h,x){return I?f(3,1,i,c,h,x):Mt(i,c,h,x)}function Mt(i,c,h,x){if(i>>>=0,c>>>=0,h>>>=0,x>>>=0,typeof SharedArrayBuffer>"u")return q("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var E=[];return I&&E.length===0?ir(i,c,h,x):(i={Gb:h,Xa:i,rb:x,Mb:E},I?(i.Ob="spawnThread",postMessage(i,E),0):Ft(i))}function sr(i,c,h){return I?f(4,1,i,c,h):0}function ur(i,c){if(I)return f(5,1,i,c)}var lr=i=>{for(var c=0,h=0;h<i.length;++h){var x=i.charCodeAt(h);127>=x?c++:2047>=x?c+=2:55296<=x&&57343>=x?(c+=4,++h):c+=3}return c},qt=(i,c,h,x)=>{if(h>>>=0,!(0<x))return 0;var E=h;x=h+x-1;for(var k=0;k<i.length;++k){var V=i.charCodeAt(k);if(55296<=V&&57343>=V){var ae=i.charCodeAt(++k);V=65536+((V&1023)<<10)|ae&1023}if(127>=V){if(h>=x)break;c[h++>>>0]=V}else{if(2047>=V){if(h+1>=x)break;c[h++>>>0]=192|V>>6}else{if(65535>=V){if(h+2>=x)break;c[h++>>>0]=224|V>>12}else{if(h+3>=x)break;c[h++>>>0]=240|V>>18,c[h++>>>0]=128|V>>12&63}c[h++>>>0]=128|V>>6&63}c[h++>>>0]=128|V&63}}return c[h>>>0]=0,h-E},Pr=(i,c,h)=>qt(i,a(),c,h);function Mr(i,c){if(I)return f(6,1,i,c)}function Dr(i,c,h){if(I)return f(7,1,i,c,h)}function Br(i,c,h){return I?f(8,1,i,c,h):0}function zr(i,c){if(I)return f(9,1,i,c)}function mt(i,c,h){if(I)return f(10,1,i,c,h)}function ht(i,c,h,x){if(I)return f(11,1,i,c,h,x)}function dr(i,c,h,x){if(I)return f(12,1,i,c,h,x)}function cr(i,c,h,x){if(I)return f(13,1,i,c,h,x)}function Wr(i){if(I)return f(14,1,i)}function Kt(i,c){if(I)return f(15,1,i,c)}function pr(i,c,h){if(I)return f(16,1,i,c,h)}var fr=i=>{if(!Oe)try{if(i(),!Fe())try{I?Bn(Ae):jt(Ae)}catch(c){c instanceof Tt||c=="unwind"||y(1,c)}}catch(c){c instanceof Tt||c=="unwind"||y(1,c)}};function Yt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(Dt),i+=128,Atomics.store(n(),i>>2,1))}o.__emscripten_thread_mailbox_await=Yt;function Dt(){var i=Gr();i&&(Yt(i),fr(()=>Ga()))}o.checkMailbox=Dt;var gt=i=>i%4===0&&(i%100!==0||i%400===0),mr=[0,31,60,91,121,152,182,213,244,274,305,335],hr=[0,31,59,90,120,151,181,212,243,273,304,334];function gr(i,c,h,x,E,k,V,ae){return I?f(17,1,i,c,h,x,E,k,V,ae):-52}function yr(i,c,h,x,E,k,V){if(I)return f(18,1,i,c,h,x,E,k,V)}var Nr=i=>{var c=lr(i)+1,h=Mn(c);return h&&Pr(i,h,c),h},xt=[],br=(i,c)=>{xt.length=0;var h;for(c>>=2;h=a()[i++>>>0];)c+=h!=105&c,xt.push(h==105?n()[c>>>0]:l()[c++>>>1]),++c;return xt},d=i=>{var c=zn();return i=i(),Lr(c),i};function f(i,c){var h=arguments.length-2,x=arguments;return d(()=>{for(var E=Wn(8*h),k=E>>3,V=0;V<h;V++){var ae=x[2+V];l()[k+V>>>0]=ae}return Ua(i,h,E,c)})}var b=[],S={},A=()=>{if(!N){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:g||"./this.program"},c;for(c in S)S[c]===void 0?delete i[c]:i[c]=S[c];var h=[];for(c in i)h.push(`${c}=${i[c]}`);N=h}return N},N;function G(i,c){if(I)return f(19,1,i,c);i>>>=0,c>>>=0;var h=0;return A().forEach(function(x,E){var k=c+h;for(E=s()[i+4*E>>2>>>0]=k,k=0;k<x.length;++k)r()[E++>>0>>>0]=x.charCodeAt(k);r()[E>>0>>>0]=0,h+=x.length+1}),0}function J(i,c){if(I)return f(20,1,i,c);i>>>=0,c>>>=0;var h=A();s()[i>>2>>>0]=h.length;var x=0;return h.forEach(function(E){x+=E.length+1}),s()[c>>2>>>0]=x,0}function Y(i){return I?f(21,1,i):52}function ee(i,c,h,x){return I?f(22,1,i,c,h,x):52}function Q(i,c,h,x,E){return I?f(23,1,i,c,h,x,E):70}var pe=[null,[],[]];function fe(i,c,h,x){if(I)return f(24,1,i,c,h,x);c>>>=0,h>>>=0,x>>>=0;for(var E=0,k=0;k<h;k++){var V=s()[c>>2>>>0],ae=s()[c+4>>2>>>0];c+=8;for(var te=0;te<ae;te++){var Z=a()[V+te>>>0],ne=pe[i];Z===0||Z===10?((i===1?z:q)(Ht(ne,0)),ne.length=0):ne.push(Z)}E+=ae}return s()[x>>2>>>0]=E,0}var _=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function me(i){var c=Array(lr(i)+1);return qt(i,c,0,c.length),c}var yt=(i,c)=>{r().set(i,c>>>0)};function wr(i,c,h,x){function E(O,ue,ye){for(O=typeof O=="number"?O.toString():O||"";O.length<ue;)O=ye[0]+O;return O}function k(O,ue){return E(O,ue,"0")}function V(O,ue){function ye(Ja){return 0>Ja?-1:0<Ja?1:0}var Bt;return(Bt=ye(O.getFullYear()-ue.getFullYear()))===0&&(Bt=ye(O.getMonth()-ue.getMonth()))===0&&(Bt=ye(O.getDate()-ue.getDate())),Bt}function ae(O){switch(O.getDay()){case 0:return new Date(O.getFullYear()-1,11,29);case 1:return O;case 2:return new Date(O.getFullYear(),0,3);case 3:return new Date(O.getFullYear(),0,2);case 4:return new Date(O.getFullYear(),0,1);case 5:return new Date(O.getFullYear()-1,11,31);case 6:return new Date(O.getFullYear()-1,11,30)}}function te(O){var ue=O.Za;for(O=new Date(new Date(O.$a+1900,0,1).getTime());0<ue;){var ye=O.getMonth(),Bt=(gt(O.getFullYear())?_:re)[ye];if(ue>Bt-O.getDate())ue-=Bt-O.getDate()+1,O.setDate(1),11>ye?O.setMonth(ye+1):(O.setMonth(0),O.setFullYear(O.getFullYear()+1));else{O.setDate(O.getDate()+ue);break}}return ye=new Date(O.getFullYear()+1,0,4),ue=ae(new Date(O.getFullYear(),0,4)),ye=ae(ye),0>=V(ue,O)?0>=V(ye,O)?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}i>>>=0,c>>>=0,h>>>=0,x>>>=0;var Z=n()[x+40>>2>>>0];x={Kb:n()[x>>2>>>0],Jb:n()[x+4>>2>>>0],cb:n()[x+8>>2>>>0],ib:n()[x+12>>2>>>0],eb:n()[x+16>>2>>>0],$a:n()[x+20>>2>>>0],Wa:n()[x+24>>2>>>0],Za:n()[x+28>>2>>>0],Tb:n()[x+32>>2>>>0],Ib:n()[x+36>>2>>>0],Lb:Z?Ue(Z):""},h=Ue(h),Z={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ne in Z)h=h.replace(new RegExp(ne,"g"),Z[ne]);var he="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),be="January February March April May June July August September October November December".split(" ");Z={"%a":O=>he[O.Wa].substring(0,3),"%A":O=>he[O.Wa],"%b":O=>be[O.eb].substring(0,3),"%B":O=>be[O.eb],"%C":O=>k((O.$a+1900)/100|0,2),"%d":O=>k(O.ib,2),"%e":O=>E(O.ib,2," "),"%g":O=>te(O).toString().substring(2),"%G":O=>te(O),"%H":O=>k(O.cb,2),"%I":O=>(O=O.cb,O==0?O=12:12<O&&(O-=12),k(O,2)),"%j":O=>{for(var ue=0,ye=0;ye<=O.eb-1;ue+=(gt(O.$a+1900)?_:re)[ye++]);return k(O.ib+ue,3)},"%m":O=>k(O.eb+1,2),"%M":O=>k(O.Jb,2),"%n":()=>`
`,"%p":O=>0<=O.cb&&12>O.cb?"AM":"PM","%S":O=>k(O.Kb,2),"%t":()=>"	","%u":O=>O.Wa||7,"%U":O=>k(Math.floor((O.Za+7-O.Wa)/7),2),"%V":O=>{var ue=Math.floor((O.Za+7-(O.Wa+6)%7)/7);if(2>=(O.Wa+371-O.Za-2)%7&&ue++,ue)ue==53&&(ye=(O.Wa+371-O.Za)%7,ye==4||ye==3&&gt(O.$a)||(ue=1));else{ue=52;var ye=(O.Wa+7-O.Za-1)%7;(ye==4||ye==5&&gt(O.$a%400-1))&&ue++}return k(ue,2)},"%w":O=>O.Wa,"%W":O=>k(Math.floor((O.Za+7-(O.Wa+6)%7)/7),2),"%y":O=>(O.$a+1900).toString().substring(2),"%Y":O=>O.$a+1900,"%z":O=>{O=O.Ib;var ue=0<=O;return O=Math.abs(O)/60,(ue?"+":"-")+("0000"+(O/60*100+O%60)).slice(-4)},"%Z":O=>O.Lb,"%%":()=>"%"},h=h.replace(/%%/g,"\0\0");for(ne in Z)h.includes(ne)&&(h=h.replace(new RegExp(ne,"g"),Z[ne](x)));return h=h.replace(/\0\0/g,"%"),ne=me(h),ne.length>c?0:(yt(ne,i),ne.length-1)}function Vr(i){try{i()}catch(c){rt(c)}}function _l(i){var c={},h;for(h in i)(function(x){var E=i[x];c[x]=typeof E=="function"?function(){Ur.push(x);try{return E.apply(null,arguments)}finally{Oe||(Ur.pop()===x||rt(),nt&&St===1&&Ur.length===0&&(St=0,tt+=1,Vr(qa),typeof Fibers<"u"&&Fibers.Ub()))}}:E})(h);return c}var St=0,nt=null,Ba=0,Ur=[],za={},Wa={},Ol=0,Pn=null,Tl=[];function Rl(){return new Promise((i,c)=>{Pn={resolve:i,reject:c}})}function kl(){var i=Mn(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=Ur[0];var h=za[c];return h===void 0&&(h=Ol++,za[c]=h,Wa[h]=c),c=h,n()[i+8>>2>>>0]=c,i}function Pl(){var i=n()[nt+8>>2>>>0];return i=H[Wa[i]],--tt,i()}function Ml(i){if(!Oe){if(St===0){var c=!1,h=!1;i((x=0)=>{if(!Oe&&(Ba=x,c=!0,h)){St=2,Vr(()=>Ka(nt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),x=!1;try{var E=Pl()}catch(ae){E=ae,x=!0}var k=!1;if(!nt){var V=Pn;V&&(Pn=null,(x?V.reject:V.resolve)(E),k=!0)}if(x&&!k)throw E}}),h=!0,c||(St=1,nt=kl(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Vr(()=>ja(nt)))}else St===2?(St=0,Vr(Ya),Na(nt),nt=null,Tl.forEach(x=>fr(x))):rt(`invalid state: ${St}`);return Ba}}function Dl(i){return Ml(c=>{i().then(c)})}ie.gb();var Bl=[null,or,Pt,ir,sr,ur,Mr,Dr,Br,zr,mt,ht,dr,cr,Wr,Kt,pr,gr,yr,G,J,Y,ee,Q,fe],zl={r:function(i,c,h){return Dl(async()=>{await o.xb(i,c,h)})},b:function(i,c,h){throw i>>>=0,new kn(i).gb(c>>>0,h>>>0),Qe=i,Xe++,Qe},P:function(i){Va(i>>>0,!v,1,!$,131072,!1),ie.lb()},n:function(i){i>>>=0,I?postMessage({cmd:"cleanupThread",thread:i}):nr(i)},K:Mt,g:sr,V:ur,F:Mr,H:Dr,y:Br,T:zr,L:mt,S:ht,p:dr,G:cr,D:Wr,U:Kt,E:pr,q:()=>!0,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>Dt()):I?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=ie.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:Yt,X:function(i){C&&ie.Qa[i>>>0].ref()},u:function(i,c,h){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,h>>>=0,i=new Date(1e3*i),n()[h>>2>>>0]=i.getUTCSeconds(),n()[h+4>>2>>>0]=i.getUTCMinutes(),n()[h+8>>2>>>0]=i.getUTCHours(),n()[h+12>>2>>>0]=i.getUTCDate(),n()[h+16>>2>>>0]=i.getUTCMonth(),n()[h+20>>2>>>0]=i.getUTCFullYear()-1900,n()[h+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[h+28>>2>>>0]=i},v:function(i,c,h){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,h>>>=0,i=new Date(1e3*i),n()[h>>2>>>0]=i.getSeconds(),n()[h+4>>2>>>0]=i.getMinutes(),n()[h+8>>2>>>0]=i.getHours(),n()[h+12>>2>>>0]=i.getDate(),n()[h+16>>2>>>0]=i.getMonth(),n()[h+20>>2>>>0]=i.getFullYear()-1900,n()[h+24>>2>>>0]=i.getDay(),c=(gt(i.getFullYear())?mr:hr)[i.getMonth()]+i.getDate()-1|0,n()[h+28>>2>>>0]=c,n()[h+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var x=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=x&&i.getTimezoneOffset()==Math.min(x,c))|0,n()[h+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),h=n()[i+32>>2>>>0],x=c.getTimezoneOffset(),E=new Date(c.getFullYear(),6,1).getTimezoneOffset(),k=new Date(c.getFullYear(),0,1).getTimezoneOffset(),V=Math.min(k,E);return 0>h?n()[i+32>>2>>>0]=+(E!=k&&V==x):0<h!=(V==x)&&(E=Math.max(k,E),c.setTime(c.getTime()+6e4*((0<h?V:E)-x))),n()[i+24>>2>>>0]=c.getDay(),h=(gt(c.getFullYear())?mr:hr)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=h,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,La((ft=i,1<=+Math.abs(ft)?0<ft?+Math.floor(ft/4294967296)>>>0:~~+Math.ceil((ft-+(~~ft>>>0))/4294967296)>>>0:0)),i>>>0},s:gr,t:yr,A:function(i,c,h){function x(Z){return(Z=Z.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Z[1]:"GMT"}i>>>=0,c>>>=0,h>>>=0;var E=new Date().getFullYear(),k=new Date(E,0,1),V=new Date(E,6,1);E=k.getTimezoneOffset();var ae=V.getTimezoneOffset(),te=Math.max(E,ae);s()[i>>2>>>0]=60*te,n()[c>>2>>>0]=+(E!=ae),i=x(k),c=x(V),i=Nr(i),c=Nr(c),ae<E?(s()[h>>2>>>0]=i,s()[h+4>>2>>>0]=c):(s()[h>>2>>>0]=c,s()[h+4>>2>>>0]=i)},e:()=>{rt("")},c:function(i,c,h){return i>>>=0,c=br(c>>>0,h>>>0),Lt[i].apply(null,c)},l:function(i,c,h){return i>>>=0,c=br(c>>>0,h>>>0),Lt[i].apply(null,c)},o:function(){},k:function(){return Date.now()},W:()=>{throw tt+=1,"unwind"},C:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),j:function(){return C?(Mo(),Ct(Po)).cpus().length:navigator.hardwareConcurrency},M:function(i,c,h,x){for(ie.Pb=c>>>0,b.length=h,c=x>>>0>>3,x=0;x<h;x++)b[x]=l()[c+x>>>0];return(0>i?Lt[-i-1]:Bl[i]).apply(null,b)},z:function(i){i>>>=0;var c=a().length;if(i<=c||4294901760<i)return!1;for(var h=1;4>=h;h*=2){var x=c*(1+.2/h);x=Math.min(x,i+100663296);var E=Math;x=Math.max(i,x);e:{E=E.min.call(E,4294901760,x+(65536-x%65536)%65536)-we.buffer.byteLength+65535>>>16;try{we.grow(E),de();var k=1;break e}catch{}k=void 0}if(k)return!0}return!1},Q:G,R:J,J:jt,h:Y,m:ee,x:Q,i:fe,a:we||o.wasmMemory,I:wr,d:function(i,c,h,x){return wr(i>>>0,c>>>0,h>>>0,x>>>0)}};(function(){function i(h,x){return h=h.exports,h=_l(h),H=h=Wl(h),ie.mb.push(H.Da),Te.unshift(H.Y),Se=x,er(),h}var c={a:zl};if(kr(),o.instantiateWasm)try{return o.instantiateWasm(c,i)}catch(h){q("Module.instantiateWasm callback failed with error: "+h),m(h)}return $t(c,function(h){i(h.instance,h.module)}).catch(m),{}})(),o._OrtInit=(i,c)=>(o._OrtInit=H.Z)(i,c),o._OrtGetLastError=(i,c)=>(o._OrtGetLastError=H._)(i,c),o._OrtCreateSessionOptions=(i,c,h,x,E,k,V,ae,te,Z)=>(o._OrtCreateSessionOptions=H.$)(i,c,h,x,E,k,V,ae,te,Z),o._OrtAppendExecutionProvider=(i,c)=>(o._OrtAppendExecutionProvider=H.aa)(i,c),o._OrtAddFreeDimensionOverride=(i,c,h)=>(o._OrtAddFreeDimensionOverride=H.ba)(i,c,h),o._OrtAddSessionConfigEntry=(i,c,h)=>(o._OrtAddSessionConfigEntry=H.ca)(i,c,h),o._OrtReleaseSessionOptions=i=>(o._OrtReleaseSessionOptions=H.da)(i),o._OrtCreateSession=(i,c,h)=>(o._OrtCreateSession=H.ea)(i,c,h),o._OrtReleaseSession=i=>(o._OrtReleaseSession=H.fa)(i),o._OrtGetInputOutputCount=(i,c,h)=>(o._OrtGetInputOutputCount=H.ga)(i,c,h),o._OrtGetInputName=(i,c)=>(o._OrtGetInputName=H.ha)(i,c),o._OrtGetOutputName=(i,c)=>(o._OrtGetOutputName=H.ia)(i,c),o._OrtFree=i=>(o._OrtFree=H.ja)(i),o._OrtCreateTensor=(i,c,h,x,E,k)=>(o._OrtCreateTensor=H.ka)(i,c,h,x,E,k),o._OrtGetTensorData=(i,c,h,x,E)=>(o._OrtGetTensorData=H.la)(i,c,h,x,E),o._OrtReleaseTensor=i=>(o._OrtReleaseTensor=H.ma)(i),o._OrtCreateRunOptions=(i,c,h,x)=>(o._OrtCreateRunOptions=H.na)(i,c,h,x),o._OrtAddRunConfigEntry=(i,c,h)=>(o._OrtAddRunConfigEntry=H.oa)(i,c,h),o._OrtReleaseRunOptions=i=>(o._OrtReleaseRunOptions=H.pa)(i),o._OrtCreateBinding=i=>(o._OrtCreateBinding=H.qa)(i),o._OrtBindInput=(i,c,h)=>(o._OrtBindInput=H.ra)(i,c,h),o._OrtBindOutput=(i,c,h,x)=>(o._OrtBindOutput=H.sa)(i,c,h,x),o._OrtClearBoundOutputs=i=>(o._OrtClearBoundOutputs=H.ta)(i),o._OrtReleaseBinding=i=>(o._OrtReleaseBinding=H.ua)(i),o._OrtRunWithBinding=(i,c,h,x,E)=>(o._OrtRunWithBinding=H.va)(i,c,h,x,E),o._OrtRun=(i,c,h,x,E,k,V,ae)=>(o._OrtRun=H.wa)(i,c,h,x,E,k,V,ae),o._OrtEndProfiling=i=>(o._OrtEndProfiling=H.xa)(i),o._JsepOutput=(i,c,h)=>(o._JsepOutput=H.ya)(i,c,h),o._JsepGetNodeName=i=>(o._JsepGetNodeName=H.za)(i);var Gr=o._pthread_self=()=>(Gr=o._pthread_self=H.Aa)(),Mn=o._malloc=i=>(Mn=o._malloc=H.Ba)(i),Na=o._free=i=>(Na=o._free=H.Ca)(i);o.__emscripten_tls_init=()=>(o.__emscripten_tls_init=H.Da)();var Va=o.__emscripten_thread_init=(i,c,h,x,E,k)=>(Va=o.__emscripten_thread_init=H.Fa)(i,c,h,x,E,k);o.__emscripten_thread_crashed=()=>(o.__emscripten_thread_crashed=H.Ga)();var Ua=(i,c,h,x)=>(Ua=H.Ha)(i,c,h,x),Dn=i=>(Dn=H.Ia)(i),Bn=o.__emscripten_thread_exit=i=>(Bn=o.__emscripten_thread_exit=H.Ja)(i),Ga=o.__emscripten_check_mailbox=()=>(Ga=o.__emscripten_check_mailbox=H.Ka)(),La=i=>(La=H.La)(i),Fa=(i,c)=>(Fa=H.Ma)(i,c),zn=()=>(zn=H.Na)(),Lr=i=>(Lr=H.Oa)(i),Wn=i=>(Wn=H.Pa)(i),Ha=o.dynCall_ii=(i,c)=>(Ha=o.dynCall_ii=H.Ra)(i,c),ja=i=>(ja=H.Sa)(i),qa=()=>(qa=H.Ta)(),Ka=i=>(Ka=H.Ua)(i),Ya=()=>(Ya=H.Va)();o.___start_em_js=1437923,o.___stop_em_js=1438084;function Wl(i){i=Object.assign({},i);var c=x=>()=>x()>>>0,h=x=>E=>x(E)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=h(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=h(i.stackAlloc),i}o.keepRuntimeAlive=Fe,o.wasmMemory=we,o.stackAlloc=Wn,o.stackSave=zn,o.stackRestore=Lr,o.UTF8ToString=Ue,o.stringToUTF8=Pr,o.lengthBytesUTF8=lr,o.ExitStatus=Tt,o.PThread=ie;var Fr;ct=function i(){Fr||Xa(),Fr||(ct=i)};function Xa(){function i(){if(!Fr&&(Fr=!0,o.calledRun=!0,!Oe)&&(I||kt(Te),p(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!I)){if(o.postRun)for(typeof o.postRun=="function"&&(o.postRun=[o.postRun]);o.postRun.length;){var c=o.postRun.shift();Me.unshift(c)}kt(Me)}}if(!(0<Ye))if(I)p(o),I||kt(Te),startWorker(o);else{if(o.preRun)for(typeof o.preRun=="function"&&(o.preRun=[o.preRun]);o.preRun.length;)Ge.unshift(o.preRun.shift());kt(Ge),0<Ye||(o.setStatus?(o.setStatus("Running..."),setTimeout(function(){setTimeout(function(){o.setStatus("")},1),i()},1)):i())}}if(o.preInit)for(typeof o.preInit=="function"&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return Xa(),t.ready}})();typeof Bo=="object"&&typeof Yn=="object"?Yn.exports=Do:typeof define=="function"&&define.amd&&define([],()=>Do)});var Wo=Xt((If,ql)=>{ql.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var Vo,Kl,Xn,Jn,rn,No,Yl,Xl,Jl,Uo,Re,Qt=F(()=>{"use strict";Vo=To();Kl=zo(),Jn=!1,rn=!1,No=!1,Yl=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Xl=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Jl=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Uo=async e=>{if(Jn)return Promise.resolve();if(rn)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(No)throw new Error("previous call to 'initializeWebAssembly()' failed.");rn=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&Yl(),s=a&&Xl(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,o=Jl(s,n),p=typeof u=="object"?u[o]:void 0,m=!1,w=[];if(t>0&&w.push(new Promise(g=>{setTimeout(()=>{m=!0,g()},t)})),w.push(new Promise((g,y)=>{let $=n?Kl:Vo,v={locateFile:(C,I)=>{if(n&&C.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Wo()],{type:"text/javascript"}));if(C.endsWith(".wasm")){if(p)return p;let T=l??I;return o==="ort-wasm-simd.wasm"?T+"ort-wasm-simd.jsep.wasm":o==="ort-wasm-simd-threaded.wasm"?T+"ort-wasm-simd-threaded.jsep.wasm":T+o}return I+C}};if(n)if(typeof Blob>"u")v.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let C=`var ortWasmThreaded=${$.toString()};`;v.mainScriptUrlOrBlob=new Blob([C],{type:"text/javascript"})}$(v).then(C=>{rn=!1,Jn=!0,Xn=C,g()},C=>{rn=!1,No=!0,y(C)})})),await Promise.race(w),m)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Re=()=>{if(Jn&&Xn)return Xn;throw new Error("WebAssembly is not initialized yet.")}});var De,$r,Ie,nn=F(()=>{"use strict";Qt();De=(e,t)=>{let r=Re(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},$r=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")$r(s,u+".",r,a);else if(typeof s=="string"||typeof s=="number")a(u,s.toString());else if(typeof s=="boolean")a(u,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},Ie=e=>{let t=Re(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],s=t.HEAPU32[a/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var Go,Lo=F(()=>{"use strict";Qt();nn();Go=e=>{let t=Re(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=De(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Ie("Can't create run options."),e?.extra!==void 0&&$r(e.extra,"",new WeakSet,(u,l)=>{let o=De(u,a),p=De(l,a);t._OrtAddRunConfigEntry(r,o,p)!==0&&Ie(`Can't set a run config entry: ${u} - ${l}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),s}}});var Ql,Zl,ed,td,Fo,Ho=F(()=>{"use strict";Qt();nn();Ql=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Zl=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ed=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},td=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let l=De("deviceType",r),o=De(u.deviceType,r);Re()._OrtAddSessionConfigEntry(e,l,o)!==0&&Ie(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.powerPreference){let l=De("powerPreference",r),o=De(u.powerPreference,r);Re()._OrtAddSessionConfigEntry(e,l,o)!==0&&Ie(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let l=De("preferredLayout",r),o=De(u.preferredLayout,r);Re()._OrtAddSessionConfigEntry(e,l,o)!==0&&Ie(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=De(n,r);Re()._OrtAppendExecutionProvider(e,s)!==0&&Ie(`Can't append execution provider: ${n}.`)}},Fo=e=>{let t=Re(),r=0,a=[],n=e||{};ed(n);try{let s=Ql(n.graphOptimizationLevel??"all"),u=Zl(n.executionMode??"sequential"),l=typeof n.logId=="string"?De(n.logId,a):0,o=n.logSeverityLevel??2;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log serverity level is not valid: ${o}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let m=typeof n.optimizedModelFilePath=="string"?De(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,o,p,m),r===0&&Ie("Can't create session options."),n.executionProviders&&td(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[w,g]of Object.entries(n.freeDimensionOverrides)){if(typeof w!="string")throw new Error(`free dimension override name must be a string: ${w}`);if(typeof g!="number"||!Number.isInteger(g)||g<0)throw new Error(`free dimension override value must be a non-negative integer: ${g}`);let y=De(w,a);t._OrtAddFreeDimensionOverride(r,y,g)!==0&&Ie(`Can't set a free dimension override: ${w} - ${g}.`)}return n.extra!==void 0&&$r(n.extra,"",new WeakSet,(w,g)=>{let y=De(w,a),$=De(g,a);t._OrtAddSessionConfigEntry(r,y,$)!==0&&Ie(`Can't set a session config entry: ${w} - ${g}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),s}}});var Qn,xr,Sr,an,Cr,on,Zn,Be=F(()=>{"use strict";Qn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},xr=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Sr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],an=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Cr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},on=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Zn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var rd,nd,jo,qo,Ko,ad,Ee,It=F(()=>{"use strict";Be();rd=["V","I","W","E","F"],nd=(e,t)=>{console.log(`[${rd[e]},${new Date().toISOString()}]${t}`)},Ko=(e,t)=>{jo=e,qo=t},ad=(e,t)=>{let r=Cr(e),a=Cr(jo);r>=a&&nd(r,typeof t=="function"?t():t)},Ee=(...e)=>{qo&&ad(...e)}});var Yo,Xo=F(()=>{"use strict";Be();Yo=(e,t)=>new(an(t))(e)});var Jo=F(()=>{"use strict"});var sn,od,Qo,ta,ea,Zo,ei=F(()=>{"use strict";It();Jo();sn=e=>Math.ceil(e/16)*16,od=1,Qo=()=>od++,ta=async(e,t,r,a)=>{let n=sn(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let l=s.getMappedRange();if(a){let o=a();return o.set(new Uint8Array(l,0,r)),o}else return new Uint8Array(l.slice(0,r))}finally{s.destroy()}},ea=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,s=r.byteLength,u=sn(s),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${s}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=o.getMappedRange();new Uint8Array(p).set(new Uint8Array(a,n,s)),o.unmap();let m=this.backend.getCommandEncoder();this.backend.endComputePass(),m.copyBufferToBuffer(o,0,l.gpuData.buffer,0,u),Ee("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(o)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=sn(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Ee("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=Qo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Ee("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Ee("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=sn(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let o=s?this.freeBuffers:this.freeUniformBuffers,p=o.get(a);p||(p=[],o.set(a,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let l={id:Qo(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Ee("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Ee("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await ta(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Zo=(...e)=>new ea(...e)});var ra,se,ke=F(()=>{"use strict";ra=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this._cacheKey}},se=e=>new ra(e)});var na,ot,W,Nt,un,ln,dn,ge=F(()=>{"use strict";na=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},ot=class{static calcShape(t,r,a=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(a){if(n<2||s<2)return;let o=na.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(o===void 0)return;[l[u-2],l[u-1]]=o}for(let o=a?3:1;o<=u;o++){let p=n-o<0?1:t[n-o],m=s-o<0?1:r[s-o];if(p!==m&&p>1&&m>1)return;l[u-o]=Math.max(p,m)}return l}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let s=1;s<=a;s++)if(t[a-s]!==1&&t[a-s]!==r[n-s])return!1;return!0}},W=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let s=r;s<a;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,s)=>n+r[s]+r[s+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Nt=class e{static adjustPoolAttributes(t,r,a,n,s,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=a.length?a.push(r[l+2]):a[l]=r[l+2];for(let l=0;l<a.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<a.length;l++)if(l<s.length){if(s[l]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let l=0;l<a.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<a.length;l++){if(a[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=a[l]||u[l+a.length]>=a[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,s,u,l){if(l){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let o=0;o<t.length-2;o++)e.adjustPadAndReturnShape(t[o+(u?1:2)],r[o],a[o],n[o],s,o,o+t.length-2,l)}}static computePoolOutputShape(t,r,a,n,s,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let o=[r[0],r[1]];return e.computeShapeHelper(t,r,o,a,n,s,u,l),o}static computeConvOutputShape(t,r,a,n,s,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let o=[t[0],r[0]];return e.computeShapeHelper(!1,t,o,a,n,s,u,l),o}static computeShapeHelper(t,r,a,n,s,u,l,o){if(t)for(let p=0;p<r.length-2;p++)a.push(1);else for(let p=0;p<r.length-2;p++)a.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],l,p,p+r.length-2,o))}static adjustPadAndReturnShape(t,r,a,n,s,u,l,o){let p=a*(n-1)+1;if(o&&o!=="NOTSET")switch(o){case"VALID":return s[u]=0,s[l]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let w=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(o==="SAME_LOWER"?(w+1)/2:w/2),s[l]=w-s[u],Math.floor((t+w-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[l]-p)/r+1)}},un=class{static getShapeOfGemmResult(t,r,a,n,s){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,l,o;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let p=-1;if(n?(o=a[0],p=1):(o=a[1],p=0),a[p]!==l)throw new Error("dimension mismatch");if(u<=0||o<=0||l<=0)throw new Error("invalid shape specified");if(s&&!ot.isValidBroadcast(s,[u,o]))throw new Error("gemm: invalid bias shape for broadcast");return[u,o,l]}},ln=-34028234663852886e22,dn=34028234663852886e22});var id,ti,Pe,Vt,wt,Ze,Ut,At,ri,L,K,aa,ni,oa,Zt,ve=F(()=>{"use strict";Be();ge();id=64,ti=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Pe=(e,t=1)=>{let r=ti(e,t);return typeof r=="string"?r:r[0]},Vt=e=>[{type:"uint32",data:e},{type:"uint32",data:W.computeStrides(e)}],wt=e=>e%4===0?4:e%2===0?2:1,Ze=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Ut=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,At=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,ri=(e,t,r,a,n)=>{let s=typeof r=="number",u=s?r:r.length,l=[...new Array(u).keys()],o=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=ti(t,n),m=typeof p=="string"?p:p[1],w=typeof p=="string"?p:p[0],g={indices:o,value:m,storage:w,tensor:t},y=U=>typeof U=="string"?U:`${U}u`,$={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},v=s?"uniforms.":"",C=`${v}${e}_shape`,I=`${v}${e}_strides`,T="";for(let U=0;U<u-1;U++)T+=`
    let dim${U} = current / ${I}[${U}];
    let rest${U} = current % ${I}[${U}];
    indices[${U}] = dim${U};
    current = rest${U};
    `;T+=`indices[${u-1}] = current;`;let P=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${g.indices} {
    var indices: ${g.indices};
    var current = offset;
    ${T}
    return indices;
  }`,M=U=>($.offsetToIndices=!0,u<2?U:`o2i_${e}(${U})`),D=[];if(u>=2)for(let U=u-1;U>=0;U--)D.push(`${I}[${U}] * (indices[${U}])`);let R=u<2?"":`
  fn i2o_${e}(indices: ${g.indices}) -> u32 {
    return ${D.join("+")};
  }`,B=U=>($.indicesToOffset=!0,u<2?U:`i2o_${e}(${U})`),j=(...U)=>u===0?"0u":`${g.indices}(${U.map(y).join(",")})`,X=(U,ce)=>u<2?`${U}`:`${U}[${ce}]`,le=(U,ce,de)=>u<2?`${U}=${de};`:`${U}[${ce}]=${de};`,z={},q=(U,ce)=>{$.broadcastedIndicesToOffset=!0;let de=`${ce.name}broadcastedIndicesTo${e}Offset`;if(de in z)return`${de}(${U})`;let We=[];for(let Ge=u-1;Ge>=0;Ge--){let Te=ce.indicesGet("outputIndices",Ge+ce.rank-u);We.push(`${X(I,Ge)} * (${Te} % ${X(C,Ge)})`)}return z[de]=`fn ${de}(outputIndices: ${ce.type.indices}) -> u32 {
             return ${We.length>0?We.join("+"):"0u"};
           }`,`${de}(${U})`},xe=(U,ce)=>(()=>{if(g.storage===g.value)return`${e}[${U}]=${ce};`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`${e}[${U}]=vec2<u32>(u32(${ce}), select(0u, 0xFFFFFFFFu, ${ce} < 0));`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`${e}[${U}]=vec2<u32>(u32(${ce}), 0u);`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`${e}[${U}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ce}));`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),oe=U=>(()=>{if(g.storage===g.value)return`${e}[${U}]`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`i32(${e}[${U}].x)`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`u32(${e}[${U}].x)`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${U}] & 0xFFu), bool(${e}[${U}] & 0xFF00u), bool(${e}[${U}] & 0xFF0000u), bool(${e}[${U}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),we=u<2?"":`
  fn get_${e}ByIndices(indices: ${g.indices}) -> ${m} {
    return ${oe(`i2o_${e}(indices)`)};
  }`,H=u<2?"":(()=>{let U=l.map(de=>`d${de}: u32`).join(", "),ce=l.map(de=>`d${de}`).join(", ");return`
  fn get_${e}(${U}) -> ${m} {
    return get_${e}ByIndices(${j(ce)});
  }`})(),Se=(...U)=>{if(U.length!==u)throw new Error(`indices length must be ${u}`);let ce=U.map(y).join(",");return u===0?oe("0u"):u===1?oe(ce[0]):($.get=!0,$.getByIndices=!0,$.indicesToOffset=!0,`get_${e}(${ce})`)},Oe=U=>u<2?oe(U):($.getByIndices=!0,$.indicesToOffset=!0,`get_${e}ByIndices(${U})`),Ae=u<2?"":`
  fn set_${e}ByIndices(indices: ${g.indices}, value: ${m}) {
    ${xe(`i2o_${e}(indices)`,"value")}
  }`,_e=u<2?"":(()=>{let U=l.map(de=>`d${de}: u32`).join(", "),ce=l.map(de=>`d${de}`).join(", ");return`
  fn set_${e}(${U}, value: ${m}) {
    set_${e}ByIndices(${j(ce)}, value);
  }`})();return{impl:()=>{let U=[];return s||(U.push(`const ${C} = ${g.indices}(${r.join(",")});`),U.push(`const ${I} = ${g.indices}(${W.computeStrides(r).join(",")});`)),$.offsetToIndices&&U.push(P),$.indicesToOffset&&U.push(R),$.broadcastedIndicesToOffset&&Object.values(z).forEach(ce=>U.push(ce)),$.set&&U.push(_e),$.setByIndices&&U.push(Ae),$.get&&U.push(H),$.getByIndices&&U.push(we),U.join(`
`)},type:g,offsetToIndices:M,indicesToOffset:B,broadcastedIndicesToOffset:q,indices:j,indicesGet:X,indicesSet:le,set:(...U)=>{if(U.length!==u+1)throw new Error(`indices length must be ${u}`);let ce=U[u];if(typeof ce!="string")throw new Error("value must be string");let de=U.slice(0,u).map(y).join(",");return u===0?xe("0u",ce):u===1?xe(de[0],ce):($.set=!0,$.setByIndices=!0,$.indicesToOffset=!0,`set_${e}(${de}, ${ce})`)},setByOffset:xe,setByIndices:(U,ce)=>u<2?xe(U,ce):($.setByIndices=!0,$.indicesToOffset=!0,`set_${e}ByIndices(${U}, ${ce});`),get:Se,getByOffset:oe,getByIndices:Oe,usage:a?"input":"output",name:e,strides:I,shape:C,rank:u}},L=(e,t,r,a=1)=>ri(e,t,r,!0,a),K=(e,t,r,a=1)=>ri(e,t,r,!1,a),aa=class{constructor(t){this.normalizedDispatchGroup=t;this.indicesHelpers=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=id){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>`,l=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1]}u +
          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${r*a*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${l}
  `}declareVariable(t,r){this.indicesHelpers.push(t),t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices});let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a}of this.uniforms)t.push(`${r}:${a}`);return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.indicesHelpers.map(t=>t.impl()).join(`
`)}},ni=e=>new aa(e),oa=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(s)}return a},Zt=e=>e<=4&&e>0});var sd,ai,ud,ld,Et,oi,ii,Ir=F(()=>{"use strict";ge();ke();ve();sd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},ai=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,ud=(e,t)=>W.sortBasedOnPerm(e,ai(e.length,t)),ld=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`
`)},Et=(e,t)=>{let r=e.dataType,a=e.dims.length,n=ai(a,t),s=Zt(a),u=ud(e.dims,n),l=s?u.length:u,o=s?a:e.dims,p=K("output",r,l),m=L("a",r,o),w=g=>`
  ${g.registerUniform("output_size","u32").declareVariables(m,p)}

  ${ld(n,a,m,p)}

  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${p.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${p.setByOffset("global_idx",m.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:g=>{let y=W.size(u);return{outputs:[{dims:u,dataType:g[0].dataType}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:s?[{type:"uint32",data:y},...Vt(g[0].dims),...Vt(u)]:[{type:"uint32",data:y}]}},getShaderSource:w}},oi=(e,t)=>{sd(e.inputs),e.compute(Et(e.inputs[0],t.perm))},ii=e=>se({perm:e.perm})});var dd,cd,pd,fd,md,hd,gd,yd,bd,wd,it,si,ui,li,di,ci,pi,fi,mi,hi,gi,yi=F(()=>{"use strict";ge();ve();cn();Ir();dd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},cd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},pd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},fd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},md=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},hd=(e,t)=>{let r=[],a=e.length;for(let s=0;s<a;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},gd=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?a.push(e[n++]):a.push(1);return a},yd=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},bd=(e,t)=>{let r=[];if(!yd(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},wd=(e,t,r,a,n,s,u)=>{let l=r[0].dims,o=W.size(s),p=W.size(u),m=L("_A",r[0].dataType,l),w=K("output",n,s),g=32,y=`
          var<workgroup> aBestValues : array<${w.type.storage}, ${g}>;
       `;return{name:e,shaderCache:t,getShaderSource:v=>`
        ${v.registerUniform("reduceSize","u32").declareVariables(m,w)}
        ${y}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${v.mainStart(g)}
          let local_idx = local_id.x;

          let outputIndex = global_idx / ${g};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${w.type.storage}(${pd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${g}) {
           let candidate = ${w.type.storage}(${m.getByOffset("offset + k")});
           bestValue = ${dd[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${g}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${cd[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${w.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${w.type.storage}(uniforms.reduceSize)`:`${fd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:p}]})}},it=(e,t,r,a)=>{let n=e.inputs.length===1?r:ia(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((y,$)=>$));let u=W.normalizeAxes(s,e.inputs[0].dims.length),l=u,o=e.inputs[0],p=bd(l,e.inputs[0].dims.length);p.length>0&&(o=e.compute(Et(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],l=md(l.length,o.dims.length));let[m,w]=hd(o.dims,l),g=m;n.keepDims&&(g=gd(m,u)),e.compute(wd(t,{hint:n.cacheKey,inputDependencies:["type"]},[o],a,e.inputs[0].dataType,g,w),{inputs:[o]})},si=(e,t)=>{it(e,"ReduceMeanShared",t,"mean")},ui=(e,t)=>{it(e,"ReduceL1Shared",t,"l1")},li=(e,t)=>{it(e,"ReduceL2Shared",t,"l2")},di=(e,t)=>{it(e,"ReduceLogSumExpShared",t,"logSumExp")},ci=(e,t)=>{it(e,"ReduceMaxShared",t,"max")},pi=(e,t)=>{it(e,"ReduceMinShared",t,"min")},fi=(e,t)=>{it(e,"ReduceProdShared",t,"prod")},mi=(e,t)=>{it(e,"ReduceSumShared",t,"sum")},hi=(e,t)=>{it(e,"ReduceSumSquareShared",t,"sumSquare")},gi=(e,t)=>{it(e,"ReduceLogSumShared",t,"logSum")}});var st,vd,pn,ia,ut,$d,xd,Sd,Cd,Id,Ad,Ed,_d,Od,Td,lt,bi,wi,vi,$i,xi,Si,Ci,Ii,Ai,Ei,et,cn=F(()=>{"use strict";ge();ke();ve();yi();st=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},vd=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],pn=(e,t,r,a,n,s,u=!1,l=!1)=>{let o=[],p=r[0].dims,m=W.normalizeAxes(n,r[0].dims.length),w=!l&&m.length===0;p.forEach((B,j)=>{w||m.indexOf(j)>=0?u&&o.push(1):o.push(B)});let g=[],y=L("_A",r[0].dataType,p),$=K("output",s,o),v=a(y,$,m),C=`inputOffset = ${y.indicesToOffset("inputIndices")};`,I=`let ${C};`,T=`var ${C};`,P=v[1]===""?"":T,M=(v[1]===""?I:C)+`
`+v[2];for(let B=0,j=0;B<r[0].dims.length;B++)w||m.indexOf(B)>=0?(u&&j++,M=`for(var j${B}: u32 = 0; j${B} < ${r[0].dims[B]}; j${B}++) {
                ${v[2].includes("lastIndex")?`let lastIndex = j${B};`:""}
                ${y.indicesSet("inputIndices",B,`j${B}`)}
                ${M}
              }`):(g.push(`${y.indicesSet("inputIndices",B,$.indicesGet("outputIndices",j))};`),j++);let D=W.size(o);return{name:e,shaderCache:t,getShaderSource:B=>`
        ${B.declareVariables(y,$)}

        ${B.mainStart()}
          ${B.guardAgainstOutOfBoundsWorkgroupSizes(D)}
          var inputIndices: ${y.type.indices};
          let outputIndices = ${$.offsetToIndices("global_idx")};

          ${g.join(`
`)}
          ${v[0]}       // init ops for reduce max/min
          ${P}
          ${v[1]}
          ${M}
          ${v[3]}
          ${v.length===4?$.setByOffset("global_idx","value"):v.slice(4).join(`
`)}
        }`,getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(D/64)}})}},ia=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),se({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ut=(e,t,r,a)=>{let n=e.inputs,s=n.length===1?r:ia(n,r);e.compute(pn(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?vd:a,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},$d=(e,t)=>{st(e.inputs),ut(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,"value = log(value);"])},xd=(e,t)=>{st(e.inputs),ut(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByOffset("inputOffset")});`,""])},Sd=(e,t)=>{st(e.inputs),ut(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},Cd=(e,t)=>{st(e.inputs),ut(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByOffset("inputOffset")});`,"value = log(value);"])},Id=(e,t)=>{st(e.inputs),ut(e,"ReduceMax",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(a.indicesSet("inputIndices",l,0));return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = max(value, ${a.getByOffset("inputOffset")});`,""]})},Ad=(e,t)=>{st(e.inputs),ut(e,"ReduceMean",t,(a,n,s)=>{let u=1;for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${a.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},Ed=(e,t)=>{st(e.inputs),ut(e,"ReduceMin",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = min(value, ${a.getByOffset("inputOffset")});`,""]})},_d=(e,t)=>{st(e.inputs),ut(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByOffset("inputOffset")};`,""])},Od=(e,t)=>{st(e.inputs),ut(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,""])},Td=(e,t)=>{st(e.inputs),ut(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += t * t;`,""])},lt=(e,t,r)=>{if(t.length===0)return!!r;let a=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?a*=e[s]:n*=e[s];return n<32&&a>1024},bi=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ad(e,t):si(e,t)},wi=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xd(e,t):ui(e,t)},vi=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sd(e,t):li(e,t)},$i=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cd(e,t):di(e,t)},xi=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Id(e,t):ci(e,t)},Si=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ed(e,t):pi(e,t)},Ci=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_d(e,t):fi(e,t)},Ii=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Od(e,t):mi(e,t)},Ai=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Td(e,t):hi(e,t)},Ei=(e,t)=>{lt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$d(e,t):gi(e,t)},et=e=>se(e)});var _i,Oi,Ti,Ri,sa,ki=F(()=>{"use strict";Be();ke();cn();_i=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Oi=(e,t)=>se({axis:t.axis,keepDims:t.keepDims,selectLastIndex:t.selectLastIndex}),Ti=(e,t)=>{_i(e.inputs);let r=(n,s,u)=>{let l=[];for(let o=0;o<n.rank;o++)(u.indexOf(o)>=0||u.length===0)&&l.push(`inputIndices[${o}] = 0;`);return[`${l.join(`
`)}`,`var value = ${n.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${n.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",s.setByOffset("global_idx","bestIndex")]},a=e.inputs.length===1?t:Oi(e.inputs,t);e.compute(pn("ArgMin",{hint:a.cacheKey},[e.inputs[0]],r,[a.axis],7,a.keepDims),{inputs:[0]})},Ri=(e,t)=>{_i(e.inputs);let r=(n,s,u)=>{let l=[];for(let o=0;o<n.rank;o++)(u.indexOf(o)>=0||u.length===0)&&l.push(`inputIndices[${o}] = 0;`);return[`${l.join(`
`)}`,`var value = ${n.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${n.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",s.setByOffset("global_idx","bestIndex")]},a=e.inputs.length===1?t:Oi(e.inputs,t);e.compute(pn("argMax",{hint:a.cacheKey},[e.inputs[0]],r,[a.axis],7,a.keepDims),{inputs:[0]})},sa=e=>se(e)});var Rd,kd,Pi,Mi=F(()=>{"use strict";ge();ve();Rd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},kd=e=>{let t=e[0].dims,r=e[0].dims[2],a=W.size(t)/4,n=e[0].dataType,s=L("input",n,t,4),u=L("bias",n,[r],4),l=L("residual",n,t,4),o=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:m=>`
  const channels = ${r}u / 4;
  ${m.declareVariables(s,u,l,o)}

  ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${s.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${o.setByOffset("global_idx","value")}
  }`}},Pi=e=>{Rd(e.inputs),e.compute(kd(e.inputs))}});var Pd,$e,Di,Bi,zi,Wi,Ni,Vi,Ui,Gi,Li,ua,Md,Fi,Hi,ji,qi,fn,Ki,mn,Yi,Xi,Ji,Qi,Zi,es,ts,rs,ns,as,os,is,ss,us,ls,ds,cs,la=F(()=>{"use strict";Be();ge();ke();ve();Pd=(e,t,r,a,n,s)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let o=L("inputData",r,[u],4),p=K("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(o,p)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${o.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",l)}
  }`},$e=(e,t,r,a,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Pd(u,W.size(e.dims),e.dataType,s,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(W.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(W.size(e.dims)/4)}]})}),Di=e=>{e.compute($e(e.inputs[0],"Abs","abs"))},Bi=e=>{e.compute($e(e.inputs[0],"Acos","acos"))},zi=e=>{e.compute($e(e.inputs[0],"Acosh","acosh"))},Wi=e=>{e.compute($e(e.inputs[0],"Asin","asin"))},Ni=e=>{e.compute($e(e.inputs[0],"Asinh","asinh"))},Vi=e=>{e.compute($e(e.inputs[0],"Atan","atan"))},Ui=e=>{e.compute($e(e.inputs[0],"Atanh","atanh"))},Gi=e=>se(e),Li=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute($e(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},ua=(e,t)=>{let r=Pe(e.inputs[0].dataType);e.compute($e(e.inputs[0],"Clip",a=>`clamp(${a}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${r}> = vec4(${r}(${t.min}));
    const clip_max_: vec4<${r}> = vec4(${r}(${t.max}));
`,t.cacheKey),{inputs:[0]})},Md=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:ln,r=e.length>=3?e[2].getFloat32Array()[0]:dn;return se({min:t,max:r})},Fi=e=>{let t=Md(e.inputs);ua(e,t)},Hi=e=>{e.compute($e(e.inputs[0],"Ceil","ceil"))},ji=e=>{e.compute($e(e.inputs[0],"Cos","cos"))},qi=e=>{e.compute($e(e.inputs[0],"Cosh","cosh"))},fn=e=>se(e),Ki=(e,t)=>{e.compute($e(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`
  const elu_alpha_: f32 = f32(${t.alpha});

  fn elu_f32(a: f32) -> f32 {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},mn=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Yi=e=>{let t=Pe(e.inputs[0].dataType);e.compute($e(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,mn(`vec4<${t}>`,t)))},Xi=e=>{e.compute($e(e.inputs[0],"Exp","exp"))},Ji=e=>{e.compute($e(e.inputs[0],"Floor","floor"))},Qi=e=>{let t=Pe(e.inputs[0].dataType);e.compute($e(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,mn(`vec4<${t}>`,t)))},Zi=(e,t)=>{e.compute($e(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},es=e=>{e.compute($e(e.inputs[0],"Not",t=>`!${t}`))},ts=e=>{e.compute($e(e.inputs[0],"Neg",t=>`-${t}`))},rs=e=>{e.compute($e(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ns=e=>{e.compute($e(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},as=e=>{e.compute($e(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},os=e=>{e.compute($e(e.inputs[0],"Sin","sin"))},is=e=>{e.compute($e(e.inputs[0],"Sinh","sinh"))},ss=e=>{e.compute($e(e.inputs[0],"Sqrt","sqrt"))},us=e=>{e.compute($e(e.inputs[0],"Tan","tan"))},ls=e=>{e.compute($e(e.inputs[0],"Tanh","tanh"))},ds=(e,t)=>(e.compute($e(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),cs=e=>{e.compute($e(e.inputs[0],"Log","log"))}});var Bd,zd,ps,fs=F(()=>{"use strict";ge();ve();la();Bd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},zd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=L("input",e[0].dataType,e[0].dims,4),a=L("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),s=W.size(t)/4;return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:l=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${l.declareVariables(r,a,n)}

  ${mn("vec4f")}

  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},ps=e=>{Bd(e.inputs),e.compute(zd(e.inputs))}});var Wd,Nd,dt,ms,hs,gs,ys,bs,ws,vs,$s,xs,Ss,Cs=F(()=>{"use strict";Be();ge();ve();Wd=(e,t,r,a,n,s,u,l,o,p,m,w)=>{let g,y;typeof u=="string"?g=y=(D,R)=>`${u}((${D}),(${R}))`:typeof u=="function"?g=y=u:(g=u.scalar,y=u.vector);let $=m?t.length:t,v=m?r.length:r,C=m?a.length:a,I=K("outputData",p,C,4),T=L("aData",l,$,4),P=L("bData",o,v,4),M;if(n)if(s){let D=W.size(t)===1,R=W.size(r)===1;D||R?M=I.setByOffset("global_idx",y(D?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"),R?`${P.type.value}(${P.getByOffset("0")}.x)`:P.getByOffset("global_idx"))):M=`
            let outputIndices = ${I.offsetToIndices("global_idx * 4u")};
            let offsetA = ${T.broadcastedIndicesToOffset("outputIndices",I)};
            let offsetB = ${P.broadcastedIndicesToOffset("outputIndices",I)};
            ${I.setByOffset("global_idx",y(T.getByOffset("offsetA / 4u"),P.getByOffset("offsetB / 4u")))}
          `}else M=I.setByOffset("global_idx",y(T.getByOffset("global_idx"),P.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let D=(R,B,j="")=>{let X=`aData[indexA${B}][componentA${B}]`,le=`bData[indexB${B}][componentB${B}]`;return`
            let outputIndices${B} = ${I.offsetToIndices(`global_idx * 4u + ${B}u`)};
            let offsetA${B} = ${T.broadcastedIndicesToOffset(`outputIndices${B}`,I)};
            let offsetB${B} = ${P.broadcastedIndicesToOffset(`outputIndices${B}`,I)};
            let indexA${B} = offsetA${B} / 4u;
            let indexB${B} = offsetB${B} / 4u;
            let componentA${B} = offsetA${B} % 4u;
            let componentB${B} = offsetB${B} % 4u;
            ${R}[${B}] = ${j}(${g(X,le)});
          `};p===9?M=`
            var data = vec4<u32>(0);
            ${D("data",0,"u32")}
            ${D("data",1,"u32")}
            ${D("data",2,"u32")}
            ${D("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:M=`
            ${D("outputData[global_idx]",0)}
            ${D("outputData[global_idx]",1)}
            ${D("outputData[global_idx]",2)}
            ${D("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(T,P,I)}

        ${w??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${M}
      }`},Nd=(e,t,r,a,n,s,u=r.dataType)=>{let l=!W.areEqual(r.dims,a.dims),o=r.dims,p=W.size(r.dims),m=!1,w=[l];if(l){let y=ot.calcShape(r.dims,a.dims,!1);if(!y)throw new Error("Can't perform binary op on the given tensors");o=y,p=W.size(o);let $=W.size(r.dims)===1,v=W.size(a.dims)===1;w.push($),w.push(v);let C=1;for(let I=1;I<o.length;I++){let T=r.dims[r.dims.length-I]??1,P=a.dims[a.dims.length-I]??1;if(T===P)C*=T;else break}(C%4===0||$||v)&&(m=!0)}else m=!0;w.push(m);let g=Zt(r.dims.length)&&Zt(a.dims.length)&&Zt(o.length);return{name:e,shaderCache:{hint:t+w.map(y=>y.toString()).join("_"),inputDependencies:g?["rank","rank"]:[r.dims.length>0?"dims":"type",a.dims.length>0?"dims":"type"]},getShaderSource:y=>Wd(y,r.dims,a.dims,o,m,l,n,r.dataType,a.dataType,u,g,s),getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:g?[{type:"uint32",data:Math.ceil(W.size(o)/4)},...Vt(r.dims),...Vt(a.dims),...Vt(o)]:[{type:"uint32",data:Math.ceil(W.size(o)/4)}]})}},dt=(e,t,r,a,n,s)=>{e.compute(Nd(t,n??"",e.inputs[0],e.inputs[1],r,a,s))},ms=e=>{dt(e,"Add",(t,r)=>`${t}+${r}`)},hs=e=>{dt(e,"Div",(t,r)=>`${t}/${r}`)},gs=e=>{dt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},ys=e=>{dt(e,"Mul",(t,r)=>`${t}*${r}`)},bs=e=>{let t=L("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;dt(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},ws=e=>{dt(e,"Sub",(t,r)=>`${t}-${r}`)},vs=e=>{dt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},$s=e=>{dt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},xs=e=>{dt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ss=e=>{dt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Ud,Gd,Ld,Fd,Is,As,Es=F(()=>{"use strict";ge();ke();ve();Ud=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},Gd=e=>`
  fn calculateInputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Ld=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(s):n===0?a.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?a.push(`else { ${s} }`):a.push(`else if (inputIndex == ${n}) { ${s} }`)}return a.join(`
`)},Fd=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let y=1;y<e.length;y++){let $=e[y].dims.slice();for(let v=0;v<r.length;v++)if(v===a)n[a]+=$[v];else if(r[v]!==$[v])throw new Error("non concat dimensions must match")}let s=W.size(n),u=new Array(e.length),l=new Array(e.length),o=e[0].dataType,p=0;for(let y=0;y<e.length;++y)p+=e[y].dims[a],u[y]=p,l[y]=L(`input${y}`,o,e[y].dims);let m=K("output",o,n),w=m.indicesGet("indices",a),g=y=>`
  ${y.declareVariables(...l,m)}

  const sizeInConcatAxis = array<u32, ${u.length}>(${u.map($=>`${$}u`).join(",")});
  ${Gd(u.length)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes(s)}

    var indices = ${m.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${w});
    if (inputIndex != 0u) {
      ${w} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Ld(l,m)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:g}},Is=(e,t)=>{Ud(e.inputs),e.compute(Fd(e.inputs,t.axis))},As=e=>se({axis:e.axis})});var ze,hn,gn,yn=F(()=>{"use strict";ze=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},hn=(e,t=!1,r=!1,a=3)=>"",gn=(e,t)=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      // TODO uncomment the following line when activation is supported above.
      // ${t?"value = activation(value, coords);":""}
      `});var bn,da=F(()=>{"use strict";bn=`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));
}
`});var wn,vn,Ar=F(()=>{"use strict";ge();wn=(e,t=!1)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:t?"value = max(value, vec4(0.0));":"value = max(value, 0.0);"};case"Sigmoid":return{activationFunction:"",applyActivation:"value = (1.0 / (1.0 + exp(-value)));"};case"Clip":return{activationFunction:`const clip_min_=f32(${e.clipMin});const clip_max_=f32(${e.clipMax});`,applyActivation:t?"value = clamp(value, vec4(clip_min_), vec4(clip_max_));":"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},vn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[ln,dn];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var Hd,jd,Er,_s,qd,_r,Kd,$n,Or=F(()=>{"use strict";ge();ve();Ar();yn();Hd=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,jd=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Er=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32)=>{let o=t[1]*e[1],p=t[0]*e[0],m=n?o:s,w=n?s:o,g=m/t[0],y=s/t[1];if(!((n&&g===4&&e[1]===4||!n&&(g===3||g===4))&&m%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${g} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${g} must be 3 or 4.
  tileAWidth ${m} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${g}<${r}>, ${m/g}>, ${w}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${g};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${o};

  let numTiles = ${u?`${Math.ceil(l/s)}`:"(dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${y};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Hd(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${g===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${jd(n,g)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},_s=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,qd=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",_r=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32,o=!1)=>{let p=e[1]*t[1],m=e[0]*t[0],w=n?p:s,g=n?s:p;if(!(g%t[1]===0&&w%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${g} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${w} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let y=g/t[1],$=w/t[0],v=s/t[1],C=o?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${p};
    let globalColStart = i32(workgroupId.x) * ${m};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${g}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${w}; inputCol = inputCol + ${t[0]}) {
          ${_s(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${m}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${p};

let tileRowA = i32(localId.y) * ${y};
let tileColA = i32(localId.x) * ${$};
let tileRowB = i32(localId.y) * ${v};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${$}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${_s(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${qd(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${w}>, ${g}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${m}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(l/s)}`:"(dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${C}
  }
`},Kd=(e,t,r,a,n,s=!1)=>{let u=n[0],l=n[1],o=n[2],p=a[0],m=a[1],w=a[2],g=a[3],y=oa(u,o),$=oa(l,o),v=Pe(a[0].type.tensor),C=()=>{let P=m.rank,M=p.rank,D=`var aIndices: ${m.type.indices};`;for(let R=P-2-1,B=M-1;R>=0;R--,B--)D+=`
aIndices[${R}] = ${M>1?`batchIndices[${B}]`:"batchIndices"};`;return y.forEach(R=>{D+=`
aIndices[${R}] = 0;`}),D+=`
aIndices[${P-2}] = u32(row);
                   aIndices[${P-1}] = u32(colIn);`,D},I=()=>{let P=w.rank,M=p.rank,D=`var bIndices: ${w.type.indices};`;for(let R=P-2-1,B=M-1;R>=0;R--,B--)D+=`
bIndices[${R}] = ${M>1?`batchIndices[${B}]`:"batchIndices"};`;return $.forEach(R=>{D+=`
bIndices[${R}] = 0;`}),D+=`
bIndices[${P-2}] = u32(row);
                   bIndices[${P-1}] = u32(colIn);`,D};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${ze(e,v)} {
      var value = ${ze(e,v)}(0.0);
      let col = colIn * ${e};
      if(row < dimAOuter && col < dimInner)
      {
        ${C()}
        value = ${m.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${ze(e,v)} {
      var value = ${ze(e,v)}(0.0);
      let col = colIn * ${e};
      if(row < dimInner && col < dimBOuter)
      {
        ${I()}
        value = ${w.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${ze(e,v)}) {
      let col = colIn * ${e};
      if (row < dimAOuter && col < dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${s?"bias[colIn]":`${ze(e,v)}(bias[row])`};`:""}
        ${r}
        ${g.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},$n=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,l=s.slice(0,-2),o=u.slice(0,-2),p=a?a.slice(0,-2):r.slice(0,-2),m=L("batchDims",e[0].dataType,p),w=[m],g=[l,o,p],y=W.size(p),$=s[s.length-2],v=s[s.length-1],C=u[u.length-1],I=v%4===0&&C%4===0,{activationFunction:T,applyActivation:P}=wn(t,I),M=$<=8?[4,1,1]:[4,4,1],D=[8,8,1],R=[Math.ceil(C/D[0]/M[0]),Math.ceil($/D[1]/M[1]),Math.ceil(y/D[2]/M[2])],B=Pe(e[0].dataType),j=I?4:1,X=L("a",e[0].dataType,[...l,$,v/j],j),le=L("b",e[1].dataType,[...o,v,C/j],j),z=K("result",e[0].dataType,[y,$,C/j],j);w.push(X),w.push(le),w.push(z);let q=[X,le],xe=e.length>2,oe=Kd(j,xe,P,w,g,n);if(xe){let H=n?j:1;q.push(L("bias",e[2].dataType,e[2].dims,H))}let we=H=>`
  const dimAOuter: i32 = ${$};
  const dimBOuter: i32 = ${C};
  const dimInner: i32 = ${v};
  ${H.declareVariables(...q,z)}
  ${T}
  ${oe}
  ${I?Er(M,D,B,m):_r(M,D,B,m)}
                   ${m.impl()}`;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]}}),getShaderSource:we}}});var Yd,Os,Ts=F(()=>{"use strict";It();ge();ve();yn();da();Or();Yd=(e,t,r,a,n=!1,s,u=!1,l=4,o=4,p=4,m="f32")=>{let w=le=>{switch(le){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${m}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${le} is not supported.`)}},g=le=>{switch(le){case 1:return"return w[row * wShape[3] + colIn];";case 4:return"return w[row * wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${le} is not supported.`)}},y=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,$=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,v=e?"xShape[1]":"xShape[2]",C=e?"xShape[2]":"xShape[3]",I=e?"row":"col",T=e?"col":"row",P=`
    let inChannels = wShape[2];
    let outWidth = ${e?"outShape[2]":"outShape[3]"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${T} / (filterDims[1] * inChannels);
    let WCol = ${T} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${T} % inChannels;
    var resData = ${ze(l,m)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${v} && xCol >= 0 && xCol < ${C}) {
      ${y}
      let xIndex = getIndexFromCoords4D(coord, xShape);
      ${w(l)}
    }
    return resData;`,M=e?t&&a?`
    let col = colIn * ${l};
    ${P}`:`
    let col = colIn * ${l};
    if (row < dimAOuter && col < dimInner) {
      ${P}
    }
    return ${ze(l,m)}(0.0);`:a&&r?`
    let col = colIn * ${l};
    ${P}`:`
    let col = colIn * ${l};
    if (row < dimInner && col < dimBOuter) {
      ${P}
    }
    return ${ze(l,m)}(0.0);`,D=`${g(o)}`,R=ze(p,m),B=e?ze(l,m):ze(o,m),j=e?ze(o,m):ze(l,m);return`
    ${hn(s,u,p===4,4)}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${B} {
      ${e?M:D}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${j} {
      ${e?D:M}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${R}) {
      let col = colIn * ${p};
      if (row < dimAOuter && col < dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"outShape[2]":"outShape[3]"};
      ${$}
      ${gn(n,s)}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Os=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",p=o?e[0].dims[3]:e[0].dims[1],m=r[0],w=o?r[2]:r[3],g=o?r[1]:r[2],y=o?r[3]:r[1],$=o&&(p%4===0||p%3===0)&&y%4===0,v=o?y:w*g,C=o?w*g:y,I=[8,8,1],T=a<=8?[4,1,1]:[4,4,1],P=[Math.ceil(v/I[0]/T[0]),Math.ceil(C/I[1]/T[1]),Math.ceil(m/I[2]/T[2])];Ee("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${P}`);let M=$?o&&p%4!==0?3:4:T[0],D=I[1]*T[1],R=I[0]*T[0],B=Math.max(I[0]*M,I[1]),j=a%D===0,X=n%R===0,le=s%B===0,z=$?[M,4,4]:[1,1,1],q=Pe(e[0].dataType),xe=[`@group(0) @binding(0) var<storage, read> x: array<${$&&M===4?`vec4<${q}>`:q}>;`,`@group(0) @binding(1) var<storage, read> w: array<${$?`vec4<${q}>`:q}>;`],oe=`
      fn setOutputAtIndex(flatIndex : i32, value : ${$?`vec4<${q}>`:q}) {
        result[flatIndex] = ${$?`vec4<${q}>`:q}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${$?`vec4<${q}>`:q}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${$?"/ 4":""}, value);
      }`;return u&&(xe.push(`@group(0) @binding(2) var<storage, read> bias: array<${$?`vec4<${q}>`:q}>;`),oe+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?`vec4<${q}>`:q} {
          return bias[coords.${o?"w":"y"}${$?"/ 4":""}];
        }`),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]}}),getShaderSource:()=>`
        ${bn}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${xe.join("")}
        @group(0) @binding(${xe.length}) var<storage, read_write> result: array<${$?`vec4<${q}>`:q}>;
        //@group(0) @binding(${xe.length+1}) var<uniform> uniforms: Uniforms;

        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(",")});
        const outShape : vec4<i32> = vec4<i32>(${r.join(",")});
        const outShapeStrides : vec3<i32> = vec3<i32>(${W.computeStrides(r).slice(0,3).join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${s};
        ${oe}
        ${Yd(o,j,X,le,u,t.activation.toLowerCase(),!1,z[0],z[1],z[2],q)}
            ${$?Er(T,I,q,void 0,!o,B):_r(T,I,q,void 0,!o,B,!1,void 0,l)}`}}});var ca,Rs=F(()=>{"use strict";ge();ve();fa();Ar();ca=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,l=u[0]/t.group,{activationFunction:o,applyActivation:p}=wn(t),m=t.format==="NHWC",w=pa(s,u,t.dilations,t.pads,t.strides,m),g=W.size(w),y=K("output",e[0].dataType,w),$=L("x",e[0].dataType,s),v=L("w",e[1].dataType,u),C=[$,v];a&&C.push(L("b",e[2].dataType,e[2].dims));let I=T=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${T.declareVariables(...C,y)}

  ${o}

  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes(g)}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${m?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${m?1:2}], outputIndices[${m?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${l}u;

    var value: ${y.type.value} = ${y.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${s[m?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${s[m?2:3]}u) {
            continue;
          }

          let xVal = ${m?$.get("batch","xHeight","xWidth","input_channel"):$.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${v.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${p}
    ${y.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(w):w,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)}}),getShaderSource:I}}});var pa,ks,Xd,Ps,ma,Jd,Qd,ha,fa=F(()=>{"use strict";ge();ke();Ts();Or();Rs();Ar();Ir();pa=(e,t,r,a,n,s)=>{let u=e[0],l=e.slice(s?1:2,s?3:4),o=l.length,p=t[0],w=t.slice(2).map(($,v)=>$+($-1)*(r[v]-1)),y=l.map(($,v)=>$+a[v]+a[v+o]).map(($,v)=>Math.floor(($-w[v]+n[v])/n[v]));return y.splice(0,0,u),y.splice(s?3:1,0,p),y},ks=[2,3,1,0],Xd=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Ps=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let a=e.pads.slice();Nt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},ma=e=>{let t=vn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,l=e.pads,o=e.strides,p=e.w_is_const();return se({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,pads:l,strides:o,wIsConst:p,...t})},Jd=(e,t,r)=>{let a=Ps(r,t);if(r.group!==1){e.compute(ca(t,a));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],o=t[0].dims[n?3:1],p=t[1].dims[2],m=t[1].dims[3],w=pa(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),g=w[n?1:2],y=w[n?2:3],$=w[n?3:1],v=n&&p===u&&m===l&&r.pads[0]===0&&r.pads[1]===0;if(v||p===1&&m===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let R=w[0],B,j,X,le=[];if(n){let z=e.kernelCustomData.wT??e.compute(Et(t[1],ks),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=z),v){let q=u*l*o;B=t[0].reshape([1,R,q]),j=z.reshape([1,q,$]),X=[1,R,$]}else B=t[0].reshape([R,u*l,o]),j=z.reshape([1,o,$]),X=[R,g*y,$];le.push(B),le.push(j)}else B=t[0].reshape([R,o,u*l]),j=t[1].reshape([1,$,o]),X=[R,$,g*y],le.push(j),le.push(B);s&&le.push(t[2]),e.compute($n(le,a,w,X,n),{inputs:le});return}let C=!0,I=e.kernelCustomData.wT??e.compute(Et(t[1],ks),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let T=[t[0],I];s&&T.push(t[2]);let P=n?g*y:$,M=n?$:g*y,D=p*m*o;e.compute(Os(T,a,w,P,M,D,s,C),{inputs:T})},Qd=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),o=Ps({...t,pads:n,strides:s,dilations:u,kernelShape:l},a);e.compute(ca(a,o,p=>r?[p[0],p[2],p[3]]:[]))},ha=(e,t)=>{Xd(e.inputs,t),e.inputs[0].dims.length===3?Qd(e,t):Jd(e,e.inputs,t)}});var Zd,Ms,Ds=F(()=>{"use strict";It();ge();yn();da();Or();Zd=(e,t=!1,r,a=!1,n=4)=>{let s=ze(n,"f32"),u=I=>{switch(I){case 1:return"return W[getIndexFromCoords4D(coord, wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${I} is not supported.`)}},l=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,o=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,p=e?"outBackprop[1]":"outBackprop[2]",m=e?"outBackprop[2]":"outBackprop[3]",w=e?"row":"col",g=e?"col":"row",y=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"outShape[2]":"outShape[3]"};
      let outRow = ${w} / outWidth;
      let outCol = ${w} % outWidth;

      let WRow = ${g} / (filterDims[1] * inChannels);
      let WCol = ${g} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${p}) || fract(xR) > 0.0) {
        return ${s}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${m}) || fract(xC) > 0.0) {
        return ${s}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${g} % inChannels;
      ${l}
      return x[getIndexFromCoords4D(coord, xShape)/${n}];`,$=e?`
      let col = colIn * ${n};
      if (row < dimAOuter && col < dimInner) {
        ${y}
      }
      return ${s}(0.0);`:`
      let col = colIn * ${n};
      if (row < dimInner && col < dimBOuter) {
        ${y}
      }
      return ${s}(0.0);`,v=`
      let col = colIn * ${n};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < dimInner && col < dimBOuter":"row < dimInner && col < dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${u(n)}
      }
      return ${s}(0.0);
      `;return`
  ${hn(r,a,n===4,4)}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${s} {
    ${e?$:v}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${s} {
    ${e?v:$}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${s}) {
    let col = colIn * ${n};
    if (row < dimAOuter && col < dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"outShape[2]":"outShape[3]"};
      ${o}
      ${gn(t,r)}
      result[getIndexFromCoords4D(coords, outShape)/${n}] = value;
    }
  }`},Ms=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",p=o?e[0].dims[3]:e[0].dims[1],m=r[0],w=o?r[2]:r[3],g=o?r[1]:r[2],y=o?r[3]:r[1],$=o?p%4===0&&y%4===0:w%4===0&&y%4===0,v=o?y:w*g,C=o?w*g:y,I=$?[8,8,1]:[v<=4||C<=4?4:16,v>4&&C<=4?4:16,1],T=$?[4,4,1]:[v<=4?1:4,v>4&&C<=4?1:4,1],P=[Math.ceil(v/I[0]/T[0]),Math.ceil(C/I[1]/T[1]),Math.ceil(m/I[2]/T[2])];Ee("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${P}`);let M=$?4:1,D=Math.max(I[0]*M,I[1]),R=[`@group(0) @binding(0) var<storage, read> x: array<${$?"vec4<f32>":"f32"}>;`,"@group(0) @binding(1) var<storage, read> W: array<f32>;"],B="";return u&&(R.push(`@group(0) @binding(2) var<storage, read> bias: array<${$?"vec4<f32>":"f32"}>;`),B+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?"vec4<f32>":"f32"} {
          return bias[coords.${o?"w":"y"}${$?"/ 4":""}];
        }`),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]}}),getShaderSource:()=>`
        ${bn}
        ${R.join(`
`)}
        @group(0) @binding(${R.length}) var<storage, read_write> result: array<${$?"vec4<f32>":"f32"}>;
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(",")});
        const outShape : vec4<i32> = vec4<i32>(${r.join(",")});
        const outShapeStrides : vec3<i32> = vec3<i32>(${W.computeStrides(r).slice(0,3).join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[o?1:2]}, ${t.kernelShape[o?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${s};
        ${B}
        ${Zd(o,u,t.activation.toLowerCase(),!1,M)}
        ${$?Er(T,I,"f32",void 0,!o,D):_r(T,I,"f32",void 0,!o,D,!1,void 0,l)}`}}});var ec,ga,Bs=F(()=>{"use strict";It();ge();ve();ec=(e,t,r,a,n,s,u=!1,l)=>{let o=r.format==="NHWC",p=o?1:2,m=o?2:3,w=o?3:1,g=W.size(a),y=u?2:1,$=r.group,v=t[1].dims,C=v[0]/$,I=v[1],T=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {
    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);
  }`;n&&(T+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {
      return bias[coords.${o?"w":"y"}${u?"/ 4":""}];
    }`);let P=u?4:1,M=L("W",t[1].dataType,t[1].dims,P),D=L("Dy",t[0].dataType,t[0].dims,P),R=[D,M];n&&R.push(L("bias",t[2].dataType,[a[w]],P));let B=K("result",t[0].dataType,a,P),j=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${y};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${l}>, ${y}>;
        for (var i = 0; i < ${y}; i++) {
          dotProd[i] = vec4<${l}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);
            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${D.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${D.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${w}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${D.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${M.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${D.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${y}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};
          ${B.set("batch","r","c + i","d1","value")};
        }
      }`,X=`
          let outputIndices = ${B.offsetToIndices("global_idx")};
          let batch = ${B.indicesGet("outputIndices",0)};
          let d1 = ${B.indicesGet("outputIndices",w)};
          let r = ${B.indicesGet("outputIndices",p)};
          let c = ${B.indicesGet("outputIndices",m)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${I};
          let wOutChannel = d1 - groupId * ${I};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = 0.0;
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${p}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${m}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${C};
              for (var d2: u32 = 0; d2 < ${C}; d2 = d2 + 1) {
                let xValue = ${o?D.get("batch","idyR","idyC","inputChannel"):D.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${M.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":"0.0"};
          ${B.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...R,B)}
  ${T}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[o?1:2]}, ${r.kernelShape[o?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)};
  ${u?j:X}}`},ga=(e,t,r)=>{let a=e.length>2,n=t.outputShape,s=W.size(n),u=[Math.ceil(s/64),1,1];Ee("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Pe(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:o=>ec(o,e,t,n,a,u[1]===1&&u[2]===1,!1,l)}}});var tc,rc,nc,zs,Ws,ac,oc,ic,sc,Ns,Vs=F(()=>{"use strict";ke();Ds();Bs();Ar();Ir();tc=(e,t,r,a,n,s)=>(e-1)*t+r+(a-1)*n+1-s,rc=(e,t,r,a,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[a]=e-s,r[n]=s)},nc=(e,t,r,a,n,s,u,l,o,p)=>{let m=e.length-2,w=p.length===0;if(o.length===0)for(let $=0;$<m;++$)o.push(0);let g=e[0],y=t[l?3:1]*n;for(let $=0,v=e.length-m-(l?1:0);$<m;++$,++v){let C=e[v],I=w?C*u[$]:p[$],T=tc(C,u[$],s[$],t[v],r[$],I);rc(T,a,s,$,$+m),w&&p.push(u[$]*(C-1)+o[$]+(t[v]-1)*r[$]+1-s[$]-s[$+m])}p.splice(0,0,g),p.splice(l?3:1,0,y)},zs=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,y)=>g*y,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,o=e.dilations.slice();if(o.reduce((g,y)=>g+y,0)===0){let g=t[0].dims.length-2;o=new Array(g).fill(1)}let p=e.strides.slice();if(p.reduce((g,y)=>g+y,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}nc(l,r,o,e.autoPad,e.group,n,p,a,u,s);let m=Object.assign({},e),w=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),o.join(",")].join("_");return Object.assign(m,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:o,strides:p,cacheKey:w}),m},Ws=e=>{let t=vn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,o=e.strides,p=e.wIsConst(),m=e.outputPadding,w=e.outputShape;return se({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,outputPadding:m,outputShape:w,pads:l,strides:o,wIsConst:p,...t})},ac=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((m,w)=>m+w,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((m,w)=>m+w,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((m,w)=>m+w,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((m,w)=>m+w,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},oc=[2,3,1,0],ic=(e,t,r)=>{let a=zs(r,t),n=r.format==="NHWC",s=t.length===3;if(a.group!==1){e.compute(ga(t,a));return}let u=a.outputShape,l=u[n?1:2],o=u[n?2:3],p=u[n?3:1],m=t[1].dims[2],w=t[1].dims[3],g=t[0].dims[n?3:1],y=n?l*o:p,$=n?p:l*o,v=m*w*g,C=!0,I=e.kernelCustomData.wT??e.compute(Et(t[1],oc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let T=[t[0],I];s&&(!n&&t[2].dims.length===1?T.push(t[2].reshape([t[2].dims[0],1,1])):T.push(t[2])),e.compute(Ms(T,a,u,y,$,v,s,C),{inputs:T})},sc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let o=zs({...t,pads:l,strides:u,dilations:s,kernelShape:n},a);e.compute(ga(a,o,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Ns=(e,t)=>{ac(e.inputs,t),e.inputs[0].dims.length===3?sc(e,t):ic(e,e.inputs,t)}});var ya,xn,Us,uc,lc,ba,wa,dc,Gs,Ls,Fs=F(()=>{"use strict";ge();ke();ve();ya="[a-zA-Z]|\\.\\.\\.",xn="("+ya+")+",Us="^"+xn+"$",uc="("+xn+",)*"+xn,lc="^"+uc+"$",ba=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},wa=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(lc)))throw new Error("Invalid LHS term");if(a.split(",").forEach((l,o)=>{let p=t[o].dims.slice();if(!l.match(RegExp(Us)))throw new Error("Invalid LHS term");let m=this.processTerm(l,!0,p,o);this.lhs.push(m)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,o])=>o.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(xn)))throw new Error("Invalid RHS");n.match(RegExp(ya,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(l);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(n,!0,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let s=a.length,u=!1,l=[],o=0;if(!t.match(RegExp(Us))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(ya,"g")),m=new ba(n);return p?.forEach((w,g)=>{if(w==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let y=s-p.length+1;if(y<0)throw new Error("Ellipsis out of bounds");if(l=a.slice(o,o+y),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let $=0;$<l.length;$++){let v=String.fromCharCode("0".charCodeAt(0)+g);m.addSymbol(v,g+$),this.addSymbol(v,a[o++],n)}}else m.addSymbol(w,g),this.addSymbol(w,a[o++],n)}),m}},dc=(e,t)=>{let r=e[0].dataType,a=new Array(e.length);for(let P=0;P<e.length;++P)a[P]=L(`input${P}`,r,e[P].dims);let n=t.outputDims,s=W.size(n),u=K("output",r,n),l=[],o=Array.from(t.rhs.symbolToIndices.keys()),p="var prod = 1.0;",m="var sum = 0.0;",w="sum += prod;",g=[],y=[],$=[],v=[],C=t.symbolToInfo.size===o.length;t.symbolToInfo.forEach((P,M)=>{if(o.includes(M)){let D=o.indexOf(M);t.lhs.forEach((R,B)=>{if(P.inputIndices.includes(B)){let j=R.symbolToIndices.get(M);if(j===void 0)throw new Error("Invalid symbol error");j.forEach(X=>{l.push(`${a[B].indicesSet(`input${B}Indices`,X,u.indicesGet("outputIndices",D))}`)})}})}else t.lhs.forEach((D,R)=>{let B=t.symbolToInfo.get(M);if(B===void 0)throw new Error("Invalid symbol error");if(B.inputIndices.includes(R)){let j=D.symbolToIndices.get(M);if(j===void 0)throw new Error("Invalid symbol error");j.forEach(X=>{g.push(`${a[R].indicesSet(`input${R}Indices`,X,`${M}`)}`)}),v.push(`prod *= ${a[R].getByIndices(`input${R}Indices`)};`)}}),y.push(`for(var ${M}: u32 = 0; ${M} < ${t.symbolToInfo.get(M)?.dimValue}; ${M}++) {`),$.push("}")});let I=C?[...l,`let sum = ${a.map((P,M)=>P.getByIndices(`input${M}Indices`)).join(" * ")};`]:[...l,m,...y,...g,p,...v,w,...$],T=P=>`
      ${P.declareVariables(...a,u)}

      ${P.mainStart()}
        ${P.guardAgainstOutOfBoundsWorkgroupSizes(s)}
        var outputIndices = ${u.offsetToIndices("global_idx")};
        ${a.map((M,D)=>`var input${D}Indices: ${a[D].type.indices};`).join(`
`)}
        ${I.join(`
`)};
        ${u.setByOffset("global_idx","sum")};
      }`;return{name:"Einsum",shaderCache:{hint:t.equation},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:T}},Gs=(e,t)=>{let r=new wa(e.inputs,t.equation);e.compute(dc(e.inputs,r))},Ls=e=>{let t=e.equation.replace(/\s+/g,"");return se({equation:t})}});var cc,Hs,pc,fc,js,qs=F(()=>{"use strict";ge();ve();cc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Hs=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},pc=(e,t)=>e.length>t.length?Hs(e,t):Hs(t,e),fc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=pc(t,r),n=W.size(a),s=e[0].dataType,u=L("input",s,t),l=K("output",s,a),o=p=>`
  const inputShape = ${u.indices(...t)};
  ${p.declareVariables(u,l)}
  ${p.mainStart()}
  ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let outputIndices = ${l.offsetToIndices("global_idx")};
    var inputIndices: ${u.type.indices};
    for (var i = 0; i < ${t.length}; i++) {
      if (${u.indicesGet("inputShape","i")} == 1) {
        ${u.indicesSet("inputIndices","i",0)}
      } else {
        ${u.indicesSet("inputIndices","i",l.indicesGet("outputIndices",`i + ${a.length-t.length}`))}
      }
    }
    ${l.setByOffset("global_idx",u.getByIndices("inputIndices"))}
  }`;return{name:"Expand",shaderCache:{hint:`${a}`},getShaderSource:o,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}})}},js=e=>{cc(e.inputs),e.compute(fc(e.inputs),{inputs:[0]})}});var mc,hc,Ks,Ys,Xs=F(()=>{"use strict";ge();ke();ve();mc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},hc=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,s=W.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...a);let l=r[s],o=W.size(u),p=L("data",e[0].dataType,e[0].dims),m=L("inputIndices",e[1].dataType,e[1].dims),w=K("output",e[0].dataType,u),g=()=>{let $=a.length,v=`var indicesIndices  = ${m.type.indices}(0);`;for(let C=0;C<$;C++)v+=`${$>1?`indicesIndices[${C}]`:"indicesIndices"} = ${u.length>1?`outputIndices[${s+C}]`:"outputIndices"};`;v+=`
        var idx = ${m.getByIndices("indicesIndices")};
        if (idx < 0) {
          idx = idx + ${l};
        }
        var dataIndices = ${p.type.indices}(0);
      `;for(let C=0,I=0;C<n;C++)C===s?(v+=`${n>1?`dataIndices[${C}]`:"dataIndices"} = u32(idx);`,I+=$):(v+=`${n>1?`dataIndices[${C}]`:"dataIndices"} = ${u.length>1?`outputIndices[${I}]`:"outputIndices"};`,I++);return v},y=$=>`
      ${$.declareVariables(p,m,w)}
      ${$.mainStart()}
        ${$.guardAgainstOutOfBoundsWorkgroupSizes(o)}
        let outputIndices = ${w.offsetToIndices("global_idx")};
        ${g()};
        let value = ${p.getByIndices("dataIndices")};
        ${w.setByOffset("global_idx","value")};
      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:y}},Ks=e=>se({axis:e.axis}),Ys=(e,t)=>{let r=e.inputs;mc(r),e.compute(hc(e.inputs,t))}});var gc,yc,Js,Qs,Zs=F(()=>{"use strict";ge();ke();ve();gc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},yc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,s=W.computeStrides(r),u=W.size(r),l=e[1].dims,o=e[1].dataType,p=W.size(l),m=W.normalizeAxis(t.axis,n),w=r[m],g=l.slice(0),y=W.size(g),$=L("input",a,r),v=L("indices",o,[p]),C=K("output",a,g),I=T=>`
      const inputStrides = array<u32, ${s.length}>(${s.map(P=>`${P}u`).join(",")});
      ${T.declareVariables($,v,C)}
      ${T.mainStart()}
      ${T.guardAgainstOutOfBoundsWorkgroupSizes(y)}

      let outputIndices = ${C.offsetToIndices("global_idx")};

      var idx = ${v.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + ${w};
      }

      var srcOffset = u32(0);

      for (var i = 0; i < ${r.length}; i++) {
        if (i == ${m}) {
          srcOffset +=  u32(idx) * inputStrides[i];
        } else {
          srcOffset += ${C.indicesGet("outputIndices","i")} * inputStrides[i];
        }
      }

      // Should never hit this with valid values in indices
      // This is a guard against malicious data in the indices input
      if (srcOffset < 0 || srcOffset >= ${u}) {
        return;
      }

      output[global_idx] = input[srcOffset];
  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:g,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(y/64)}}),getShaderSource:I}},Js=e=>se({axis:e.axis}),Qs=(e,t)=>{let r=e.inputs;gc(r),e.compute(yc(e.inputs,t))}});var bc,wc,vc,eu,tu,ru=F(()=>{"use strict";ge();ke();ve();bc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},wc=(e,t,r)=>{if(r.length===0)return"0u";let a=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return a||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},vc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,s,u]=un.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),l=[n,s];if(!l)throw new Error("Can't use gemm on the given tensors");let o=W.size(l),p="";t.transA&&t.transB?p="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?p="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?p="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(p="value += a[m * K + k] * b[k * N + n];");let m=Pe(e[0].dataType),w=t.alpha===1?"":"value *= alpha;",g=e.length===3?`value += beta * c[${wc(n,s,e[2].dims)}];`:"",y=[`@group(0) @binding(0) var<storage, read> a : array<${m}>;`,`@group(0) @binding(1) var<storage, read> b : array<${m}>;`];e.length===3&&y.push(`@group(0) @binding(2) var<storage, read> c : array<${m}>;`);let $=v=>`
  const M: u32 = ${n}u;
  const N: u32 = ${s}u;
  const K: u32 = ${u}u;
  const alpha = ${m}(${t.alpha});
  const beta = ${m}(${t.beta});

  ${y.join(`
`)}
  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${m}>;

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes(o)}

    let m = global_id.x / N;
    let n = global_id.x % N;

    var value = ${m}(0);
    for (var k: u32 = 0u; k<${u}u; k++) {
      ${p}
    }

    ${w}
    ${g}
    output[global_id.x] = value;

  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:$}},eu=(e,t)=>{bc(e.inputs),e.compute(vc(e.inputs,t))},tu=e=>se(e)});var $c,xc,Sc,Cc,nu,au,ou=F(()=>{"use strict";Be();ge();ke();ve();$c={name:"InstanceNormalization"},xc=(e,t)=>{let r=e[0].dims,a=r,n=2,s=W.sizeToDimension(r,n),u=W.sizeFromDimension(r,n),l=r[1],o=L("x",e[0].dataType,[r[0],r[1],u]),p=L("scale",e[1].dataType,e[1].dims),m=L("bias",e[2].dataType,e[2].dims),w=K("output",e[0].dataType,[r[0],r[1],u]),g=[o,p,m,w],y=o.type.value,$=64,v=C=>`

  const C: u32 = ${l};
  const normSize: u32 = ${u};
  const epsilon: f32 = ${t.epsilon};
  var<workgroup> meanShared : ${y};
  var<workgroup> squaredNormShared : ${y};
  var<workgroup> workgroupShared : array<${y}, ${$}>;
  const workgroupSize = ${$}u;
  ${C.declareVariables(...g)}
  ${C.mainStart($)}
    let norm = global_idx / workgroupSize;
    let batch = norm / C;
    let channel = norm % C;
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial: ${y} = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      initial = initial + ${o.get("batch","channel","h")};
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = workgroupShared[0] / ${y}(normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let deviation =  ${o.get("batch","channel","h")} - meanShared;
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = workgroupShared[0];
    }
    workgroupBarrier();

    let invStdDev = 1 / sqrt(squaredNormShared / ${y}(normSize) + epsilon);
    let channelScale = invStdDev * ${p.getByOffset("channel")};
    let channelShift = ${m.getByOffset("channel")} - meanShared * channelScale;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let value = ${o.get("batch","channel","h")} * channelScale + channelShift;
      ${w.set("batch","channel","h","value")};
    }
  }`;return{...$c,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:v}},Sc=(e,t,r,a,n,s,u,l)=>{let o=wt(u),p=L("input",t.dataType,t.dims,o),m=L("scale",r.dataType,r.dims,o),w=L("bias",a.dataType,a.dims,o),g=64,y=o===1?"vec2f":`mat2x${o}f`,$=o===1?"f32":`vec${o}f`,v=(D,R)=>`${y}(${D}, ${R})`,C=n*u/o,I=Math.ceil(s/g),T=D=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${s*u/o};

  ${D.declareVariables(p)}
  @group(0) @binding(1) var<storage, read_write> output : array<${y}>;

  ${D.mainStart(g)}
    let currentImageNumber = global_idx / ${g} / C;
    let currentChannelNumber = (global_idx / ${g}) % C;
    let wgId = global_idx % ${g};
    let wgOffset = wgId * ${I};
    if (wgOffset >= H) {
        return;
    }
    let wgMax = min(wgOffset + ${I}, H);

    let offset = currentImageNumber * imageSize + currentChannelNumber;
    var sum = ${Ze("f32",o)};
    var squaredSum = ${Ze("f32",o)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${$}(input[offset + i * C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${v("sum","squaredSum")};
  }`,P=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,g,2],dataType:1}],dispatchGroup:{x:n*u/o}}),getShaderSource:T},{inputs:[t],outputs:[-1]})[0],M=D=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${g*u/o};
  const epsilon: f32 = ${l};

  @group(0) @binding(0) var<storage, read> input : array<${y}>;
  @group(0) @binding(1) var<storage, read> scale : array<${m.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${w.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${y}>;

  ${D.mainStart()}
    ${D.guardAgainstOutOfBoundsWorkgroupSizes(C)}
    let currentImageNumber = global_idx / C;
    let currentChannelNumber = global_idx % C;

    let offset = currentImageNumber * imageSize;
    var sum = ${Ze("f32",o)};
    var squaredSum = ${Ze("f32",o)};
    for (var i: u32 = 0; i < ${g}; i++) {
        let value = input[offset + i + currentChannelNumber * ${g}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(H);
    squaredSum = squaredSum / f32(H);
    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);
    let channelScale = invStdDev * ${$}(scale[currentChannelNumber]);
    let channelShift = ${$}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${v("channelScale","channelShift")};
  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u,epsilon:l})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(C/64)}}),getShaderSource:M},{inputs:[P,r,a],outputs:[-1]})[0]},Cc=(e,t,r)=>{let a=t[0].dims,n=a,s=a[0],u=a[a.length-1],l=W.sizeFromDimension(a,1)/u,o=wt(u),p=W.size(n)/o,m=L("input",t[0].dataType,t[0].dims,o),w=K("output",t[0].dataType,n,o),g=Pe(t[0].dataType),y=o===1?"vec2f":`mat2x${o}f`,$=o===1?g:`vec${o}<${g}>`,v=Sc(e,t[0],t[1],t[2],s,l,u,r.epsilon),C=I=>`
  const H: u32 = ${l};
  const C: u32 = ${u/o};

  @group(0) @binding(0) var<storage, read> input : array<${m.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${y}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${w.type.storage}>;

  ${I.mainStart()}
    let currentImageNumber = global_idx / (C * H);
    let currentChannelNumber = global_idx % C;

    let scaleOffset = currentImageNumber * C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${$}(scale[0]), ${$}(scale[1]));
  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)}}),getShaderSource:C},{inputs:[t[0],v]})},nu=e=>se({epsilon:e.epsilon,format:e.format}),au=(e,t)=>{t.format==="NHWC"?Cc(e,e.inputs,t):e.compute(xc(e.inputs,t))}});var Ic,Ac,iu,su,uu=F(()=>{"use strict";Be();ge();ke();ve();Ic=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Ac=(e,t,r)=>{let a=e[0].dims,n=e[1],s=e[2],u=a,l=W.normalizeAxis(t.axis,a.length),o=W.sizeToDimension(a,l),p=W.sizeFromDimension(a,l),m=W.size(n.dims),w=s?W.size(s.dims):0;if(m!==p||s&&w!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${m} and bias size of ${w}`);let g=[];for(let M=0;M<a.length;++M)M<l?g.push(a[M]):g.push(1);let y=wt(p),$=Pe(e[0].dataType),v=[L("x",e[0].dataType,e[0].dims,y),L("scale",n.dataType,n.dims,y)];s&&v.push(L("bias",s.dataType,s.dims,y)),v.push(K("output",e[0].dataType,u,y));let C=r>1,I=r>2;C&&v.push(K("meanDataOutput",1,g)),I&&v.push(K("invStdOutput",1,g));let T=M=>`
  const normSize: f32 = ${p};
  const normSizeVectorized: u32 = ${p/y};
  const epsilon: f32 = ${t.epsilon};

  ${M.declareVariables(...v)}
  ${M.mainStart()}
    ${M.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let offset = global_idx * normSizeVectorized;
    var meanVector = ${Ze("f32",y)};
    var meanSquareVector = ${Ze("f32",y)};

    for (var h: u32 = 0u; h < normSizeVectorized; h++) {
      let value = ${Ut($,y,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${At("meanVector",y)} / normSize;
    let meanSquare = sqrt(${At("meanSquareVector",y)} 
      / normSize - mean * mean + epsilon);

    for (var j: u32 = 0; j < normSizeVectorized; j++) {
      let f32input = ${Ut($,y,"x[j + offset]")};
      let f32scale = ${Ut($,y,"scale[j]")};
      output[j + offset] = ${v[0].type.value}((f32input - mean) / meanSquare * f32scale
        ${s?`+ ${Ut($,y,"bias[j]")}`:""}
      );
    }

    ${C?"meanDataOutput[global_idx] = mean":""};
    ${I?"invStdOutput[global_idx] = 1 / meanSquare":""};
  }`,P=[{dims:u,dataType:e[0].dataType}];return C&&P.push({dims:g,dataType:1}),I&&P.push({dims:g,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:P,dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:T}},iu=e=>se({axis:e.axis,epsilon:e.epsilon}),su=(e,t)=>{Ic(e.inputs),e.compute(Ac(e.inputs,t,e.outputCount))}});var Ec,lu,du=F(()=>{"use strict";ge();Or();Ec=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},lu=e=>{Ec(e.inputs);let t=ot.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");e.compute($n(e.inputs,{activation:"",activationCacheKey:""},t))}});var _c,Oc,Tc,Rc,kc,Pc,Mc,Dc,Bc,cu,pu,fu=F(()=>{"use strict";Be();ge();ke();ve();_c=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Oc=(e,t,r,a,n,s,u)=>{let l=r.length,o="";for(let p=l-1;p>=0;--p)o+=`
            k = i32(${e.indicesGet("indices",p)}) - ${n[p]};
            if (k < 0) {
              break;
            }
            if (k >= ${r[p]}) {
              break;
            }
            offset += k * ${a[p]};
        `;return`
          value = ${s}(${u});
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${o}
            value = x[offset];
          }
      `},Tc=(e,t,r,a,n)=>{let s=r.length,u="";for(let l=s-1;l>=0;--l)u+=`
                k = i32(${e.indicesGet("indices",l)}) - ${n[l]};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = ${2*(r[l]-1)};
                  k = k % _2n_1;
                  if(k >= ${r[l]}) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * ${a[l]};
            `;return`
              var offset = 0;
              var k = 0;
              ${u}
              value = x[offset];
          `},Rc=(e,t,r,a,n)=>{let s=r.length,u="";for(let l=s-1;l>=0;--l)u+=`
                k = i32(${e.indicesGet("indices",l)}) - ${n[l]};
                if (k < 0) {
                  k = 0;
                }
                if (k >= ${r[l]}) {
                  k = ${r[l]-1};
                }
                offset += k * ${a[l]};
            `;return`
              var offset = 0;
              var k = 0;
              ${u}
              value = x[offset];
          `},kc=(e,t,r,a,n)=>{let s=r.length,u="";for(let l=s-1;l>=0;--l)u+=`
                k = i32(${e.indicesGet("indices",l)}) - ${n[l]};
                if (k < 0)  {
                  k += ${r[l]};
                }
                if (k >= ${r[l]}) {
                  k -= ${r[l]};
                }
                offset += k * ${a[l]};
            `;return`
              var offset = 0;
              var k = 0;
              ${u}
              value = x[offset];
          `},Pc=(e,t,r,a,n,s)=>{switch(n.mode){case 0:return Oc(e,t,r,a,n.pads,s,n.value);case 1:return Tc(e,t,r,a,n.pads);case 2:return Rc(e,t,r,a,n.pads);case 3:return kc(e,t,r,a,n.pads);default:throw new Error("Invalid mode")}},Mc=(e,t,r,a)=>{let n=t[0].dims,s=W.padShape(n.slice(),r.pads),u=W.size(s),l=W.computeStrides(n),o=K("output",t[0].dataType,s),p=L("x",t[0].dataType,n),m=Pc(o,s,n,l,r,a);return`
              ${e.declareVariables(p,o)}
              ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}

              let indices = ${o.offsetToIndices("global_idx")};

              var value = ${a}(0);
              ${m}
              output[global_idx] = value;
          }`},Dc=(e,t)=>{let r=W.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(W.size(r)/64)}}),getShaderSource:a=>Mc(a,e,t,"f32")}},Bc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let o=0;o<l.length;o++)s[Number(l[o])]=Number(r[o]),s[Number(l[o])+n]=Number(r[o+l.length])}else r.forEach((l,o)=>s[Number(o)]=Number(l));let u=[];return s.forEach(l=>u.push(l)),se({mode:t.mode,value:a,pads:u})}else return t},cu=(e,t)=>{_c(e.inputs);let r=Bc(e.inputs,t);e.compute(Dc(e.inputs,r),{inputs:[0]})},pu=e=>{let t=e.mode,r=e.value,a=e.pads;return se({mode:t,value:r,pads:a})}});var Sn,mu,hu,gu,yu,bu,wu,vu,$u,xu,Su,Cu,Iu,Au,Eu,_u=F(()=>{"use strict";ge();ke();ve();Sn=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},mu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),o=s?t.dilations.slice():[],p=t.pads.slice();Nt.adjustPoolAttributes(r,n,u,l,o,p);let m=Nt.computePoolOutputShape(r,n,l,o,u,p,t.autoPad),w=Object.assign({},t);s?Object.assign(w,{kernelShape:u,strides:l,pads:p,dilations:o,cacheKey:t.cacheKey}):Object.assign(w,{kernelShape:u,strides:l,pads:p,cacheKey:t.cacheKey});let g=m.slice();return g.push(g.splice(1,1)[0]),[w,a?g:m]},hu=(e,t,r,a,n,s,u,l)=>{let o=n.format==="NHWC",p=r,m=t.type.value,w=p.length,g=W.size(a),y=K("output",t.type.tensor,a);if(n.kernelShape.length<=2){let $=n.kernelShape[n.kernelShape.length-1],v=n.strides[n.strides.length-1],C=n.pads[n.pads.length/2-1],I=n.pads[n.pads.length-1],T=w-(o?2:1),P="",M="",D="";if(C+I!==0?P=`
                for (var i: u32 = 0u; i < ${$}u; i++) {
                  xIndices[${T}] = indices[${T}] * ${v} - ${C} + i;
                  if (xIndices[${T}] < 0 || xIndices[${T}] >= ${p[T]}) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:P=`
                for (var i: u32 = 0u; i < ${$}u; i++) {
                  xIndices[${T}] = indices[${T}] * ${v} - ${C} + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,n.kernelShape.length===2){let B=n.kernelShape[n.kernelShape.length-2],j=n.strides[n.strides.length-2],X=n.pads[n.pads.length/2-2],le=n.pads[n.pads.length-2],z=w-(o?3:2),q=p[z];X+le!==0?M=`
                for (var j: u32 = 0u; j < ${B}u; j++) {
                  xIndices[${z}] = indices[${z}] * ${j} - ${X} + j;
                  if (xIndices[${z}] < 0 || xIndices[${z}] >= ${q}) {
                    pad+= ${$};
                    continue;
                  }
              `:M=`
                for (var j: u32 = 0u; j < ${B}u; j++) {
                  xIndices[${z}] = indices[${z}] * ${j} - ${X} + j;
                `,D=`
              }
            `}return`
            ${e.declareVariables(t,y)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}

              let indices = ${y.offsetToIndices("global_idx")};
              var xIndices = ${y.offsetToIndices("global_idx")};

              var value: ${m} = ${m}(${l});
              var pad = 0;
              ${M}
              ${P}
              ${D}
              ${u}

              output[global_idx] = value;
            }`}else{if(o)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let $=W.size(n.kernelShape),v=W.computeStrides(n.kernelShape),C=v.length,I=n.pads.length,T=n.pads.reduce((D,R)=>D+R),P="";return T?P=`
                if (xIndices[j] >= inputDims[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:P=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.declareVariables(t,y)}

            const pads = array<u32, ${I}>(${n.pads.map(D=>`${D}u`).join(",")});
            const inputDims = array<u32, ${w}>(${p.map(D=>`${D}u`).join(",")});
            const kernelStrides = array<u32, ${C}>(${v.map(D=>`${D}u`).join(",")});
            const strides = array<u32, ${C}>(${n.strides.map(D=>`${D}u`).join(",")});

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}

              let indices = ${y.offsetToIndices("global_idx")};
              let xIndices = ${y.offsetToIndices("global_idx")};

              var offsets: array<u32, ${C}>;

              var value = ${y.type.value}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < ${$}u; i++) {
                var offset = i;
                for (var j = 0u; j < ${C-1}u; j++) {
                  offsets[j] = offset / kernelStrides[j];
                  offset -= offsets[j] * kernelStrides[j];
                }
                offsets[${C-1}] = offset;

                isPad = false;
                for (var j = ${w-C}u; j < ${w}u; j++) {
                  xIndices[j] = indices[j] * strides[j - ${w-C}u]
                    + offsets[j - ${w-C}u] - pads[j - 2u];
                  ${P}
              }
              ${u}

              output[global_idx] = value;
            }`}},gu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),yu=(e,t,r,a)=>{let[n,s]=mu(t,a,r),u=W.size(n.kernelShape),l=L("x",t.dataType,t.dims),o=l.type.value,p="value += x_val;",m="";return n.countIncludePad?m+=`value /= ${o}(${u});`:m+=`value /= ${o}(${u} - pad);`,{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:w=>hu(w,l,t.dims,s,n,p,m,"0.0")}},bu=e=>{let t=e.count_include_pad!==0,r=gu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return se({countIncludePad:t,...r})},wu=(e,t)=>{Sn(e.inputs),e.compute(yu("AveragePool",e.inputs[0],!1,t))},vu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},$u=e=>{let t=e.format;return{format:t,...vu,cacheKey:t}},xu=(e,t)=>{Sn(e.inputs),e.compute(yu("GlobalAveragePool",e.inputs[0],!0,t))},Su=(e,t,r,a)=>{let[n,s]=mu(t,a,r),u=`
      value = max(x_val, value);
    `,l="",o=L("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:p=>hu(p,o,t.dims,s,n,u,l,"-1e5")}},Cu=(e,t)=>{Sn(e.inputs),e.compute(Su("MaxPool",e.inputs[0],!1,t))},Iu=e=>{let t=e.storage_order,r=e.dilations,a=gu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return se({storageOrder:t,dilations:r,...a})},Au=e=>{let t=e.format;return{format:t,...vu,cacheKey:t}},Eu=(e,t)=>{Sn(e.inputs),e.compute(Su("GlobalMaxPool",e.inputs[0],!0,t))}});var Wc,Nc,Ou,Tu=F(()=>{"use strict";at();Be();ve();Wc=(e,t,r)=>{let a=e===t,n=e<t&&r<0,s=e>t&&r>0;if(a||n||s)throw new Error("Range these inputs' contents are invalid.")},Nc=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,l=K("output",a,s),o=l.type.storage,p=m=>`
        ${m.declareVariables(l)}
        ${m.mainStart()}
        ${m.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        output[global_idx] = ${o}(${e}) + ${o}(global_idx) * ${o}(${r});
      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(m=>m.toString()).join("_")},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)}})}},Ou=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Ce.webgpu.validateInputContent&&Wc(t,r,a),e.compute(Nc(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var Vc,Uc,Gc,Lc,Fc,Hc,jc,qc,Kc,Yc,Xc,Jc,Qc,Zc,ep,Ru,ku,Pu=F(()=>{"use strict";ge();ke();ve();Vc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Uc=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,s)=>a[n]=e[s]),a},Gc=(e,t,r,a,n,s)=>{let[u,l,o]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(m=>s.push(m));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(m=>a.push(m)),a.length!==0&&a.length!==p&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Vc(a,t),t.axes.length>0&&Uc(a,t.axes,p).forEach((m,w)=>a[w]=m)}if(o>0&&e.length>o&&(e[o].getBigInt64Array().forEach(m=>n.push(Number(m))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},Lc=e=>"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { "+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }";case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`
`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Fc=(e,t)=>"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {"+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Hc=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((s,u)=>{a[s]=n[u],a[u+r]=n[t.length+u]}),a):n},jc=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(s=>n.push(s)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},qc=(e,t,r,a)=>{let n=(()=>{switch(a.keepAspectRatioPolicy){case"not_larger":return a.axes.length>0?Math.min(...a.axes.map(u=>r[u]),Number.MAX_VALUE):Math.min(...r,Number.MAX_VALUE);case"not_smaller":return a.axes.length>0?Math.max(...a.axes.map(u=>r[u]),Number.MIN_VALUE):Math.max(...r,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${a.keepAspectRatioPolicy} is not supported`)}})();r.fill(1,0,r.length);let s=e.slice();return a.axes.length>0?(a.axes.forEach(u=>r[u]=n),a.axes.forEach(u=>s[u]=Math.round(e[u]*r[u]))):(r.fill(n,0,r.length),s.forEach((u,l)=>s[l]=Math.round(u*r[l]))),s},Kc=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<f32, ${r.length}> {
      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});
      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});
      const scales = array<f32, ${a.length}>(${a.map(s=>`${s}f`).join(",")});
      const roi = array<f32, ${n.length}>(${n.map(s=>`${s}f`).join(",")});
      var originalIndices: array<f32, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};
        if (scales[i] == 1.0) {
          originalIndices[i] = f32(outputIndex);
        } else {
          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],
                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${t.length}]);
        }
      }
      return originalIndices;
    }`,Yc=(e,t,r,a,n,s,u)=>`
    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
        const inputShape = array<u32, ${r.length}>(${r.map(l=>`${l}u`).join(",")});
        const outputShape = array<u32, ${a.length}>(${a.map(l=>`${l}u`).join(",")});
        const scales = array<f32, ${n.length}>(${n.map(l=>`${l}f`).join(",")});
        const roi = array<f32, ${s.length}>(${s.map(l=>`${l}f`).join(",")});
        var inputIndices: ${e.type.indices};
        for (var i:u32 = 0; i < ${a.length}; i++) {
          var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
          var inputIndex: u32;
          if (scales[i] == 1.0) {
            inputIndex = outputIndex;
          } else {
            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],
                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${r.length}]);
            if (!${u} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {
              if (original_idx < 0) {
                inputIndex = 0;
              } else if (original_idx > (f32(inputShape[i]) - 1)) {
                inputIndex = inputShape[i] - 1;
              } else {
                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));
              }
            } else {
              inputIndex = u32(original_idx);
            }
          }
          ${e.indicesSet("inputIndices","i","inputIndex")}
        }
        return inputIndices;
    }`,Xc=(e,t)=>`
    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {
      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};
        if (inputIndex < 0 || inputIndex >= inputShape[i]) {
          return false;
        }
      }
      return true;
    }`,Jc=(e,t,r,a,n,s,u)=>{let[l,o,p,m]=r.length===2?[-1,0,1,-1]:n[1]===1?[0,2,3,1]:[0,1,2,3];return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {
      var inputIndices: ${e.type.indices};
      inputIndices[${o}] = max(0, min(row, ${r[o]} - 1));
      inputIndices[${p}] = max(0, min(col, ${r[p]} - 1));
      if (${r.length} > 2) {
        inputIndices[${m}] = channel;
        inputIndices[${l}] = batch;
      };
      return input[${e.indicesToOffset("inputIndices")}];
    }

    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> f32 {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);
      var row:f32 = originalIndices[${o}];
      var col:f32 = originalIndices[${p}];
      if (${s} && (row < 0 || row > (${r[o]} - 1) || col < 0 || col > ${r[p]} - 1)) {
        return ${u};
      }
      row = max(0, min(row, ${r[o]} - 1));
      col = max(0, min(col, ${r[p]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = 0;
      var batch: u32 = 0;
      if (${r.length>2}) {
        channel = u32(originalIndices[${m}]);
        batch = u32(originalIndices[${l}]);
      }
      var x11: f32 = getInputValue(batch, channel, row1, col1);
      var x12: f32 = getInputValue(batch, channel, row1, col2);
      var x21: f32 = getInputValue(batch, channel, row2, col1);
      var x22: f32 = getInputValue(batch, channel, row2, col2);
      var dx1: f32 = row - f32(row1);
      var dx2: f32 = f32(row2 ) - row;
      var dy1 = col - f32(col1);
      var dy2 = f32(col2) - col;
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Qc=(e,t,r,a,n,s,u,l,o,p)=>{let[m,w]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],g=y=>{let $=y===m?"row":"col";return`
      fn ${$}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> f32 {
        var outputIndex = ${a.length===1?"outputIndices":`outputIndices[${y}]`};
        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${n[y]},
        f32(${a[y]}), f32(${r[y]}), ${s[y]}, ${s[y]} + ${r.length});
        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${r[y]} - 1))) {
          return ${o};
        }
        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${$}: f32 = originalIdx + f32(i);
          if (${$} < 0 || ${$} >= ${r[y]}) {
            if (${p}) {
              coefs[i + 1] = 0.0;
              continue;
            } else if (${l}) {
              return ${o};
            } else {
              ${$} = max(0, min(${$}, ${r[y]} - 1));
            }
          }
          var inputIndicesCopy: ${e.type.indices} = inputIndices;
          inputIndicesCopy[${y}] = u32(${$});
          data[i + 1] = ${y===m?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`
                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${g(m)};
    ${g(w)};
  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {
    var absS = abs(s);
    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: f32 = 1.0 - absS;
    var twoMinusAbsS: f32 = 2.0 - absS;
    var onePlusAbsS: f32 = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {
    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> f32 {
    var inputIndices: ${e.type.indices} = outputIndices;
    return colCubicInterpolation(inputIndices, outputIndices);
  }
    `},Zc=(e,t,r,a,n,s)=>{let u=e.dims,l=Hc(s,t.axes,u.length),o=jc(u,a,n,t.axes),p=a.slice();a.length===0&&(p=u.map((C,I)=>C===0?1:o[I]/C),t.keepAspectRatioPolicy!=="stretch"&&(o=qc(u,o,p,t)));let m=K("output",e.dataType,o),w=L("input",e.dataType,u),g=W.size(o),y=u.length===o.length&&u.every((C,I)=>C===o[I]),$=t.coordinateTransformMode==="tf_crop_and_resize",v=C=>`
      ${y?"":`
      ${Lc(t.coordinateTransformMode)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${Xc(w,u)};
              ${Fc(t.nearestMode,r)};
              ${Yc(w,m,u,o,p,l,$)};
              `;case"linear":return`
              ${Kc(m,u,o,p,l)};
              ${Jc(w,m,u,o,p,$,t.extrapolationValue)};
              `;case"cubic":return`
            ${Qc(w,m,u,o,p,l,t.cubicCoeffA,$,t.extrapolationValue,t.excludeOutside)};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${C.declareVariables(w,m)}
      ${C.mainStart()}
        ${C.guardAgainstOutOfBoundsWorkgroupSizes(g)}
        ${y?"output[global_idx] = input[global_idx];":`
        let outputIndices = ${m.offsetToIndices("global_idx")};
        var inputIndices: ${w.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);
                if (checkInputIndices(inputIndices)) {
                  output[global_idx] = input[${w.indicesToOffset("inputIndices")}];
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
        `}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${y}`},getShaderSource:v,getRunData:()=>({outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(g/64)}})}},ep=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Ru=(e,t)=>{let r=[],a=[],n=[],s=ep(e);Gc(e.inputs,t,s,r,a,n),e.compute(Zc(e.inputs[0],t,s,r,a,n),{inputs:[0]})},ku=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,o=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return se({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:l,mode:o,nearestMode:p})}});var tp,rp,Mu,Du,Bu=F(()=>{"use strict";Be();ge();ke();ve();tp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},rp=(e,t,r,a)=>{let n=e[0].dims,s=W.size(n),u=n,l=s,o=n.slice(-1)[0],p=a?n.slice(0,-1).concat(1):[],m=e.length>3,w=e.length>4,g=a&&r>1,y=a&&r>2,$=r>3,v=wt(o),C=[L("x",e[0].dataType,e[0].dims,v),L("skip",e[1].dataType,e[1].dims,v),L("gamma",e[2].dataType,e[2].dims,v)];m&&C.push(L("beta",e[3].dataType,e[3].dims,v)),w&&C.push(L("bias",e[4].dataType,e[4].dims,v)),C.push(K("output",e[0].dataType,u,v)),g&&C.push(K("meanOutput",1,p)),y&&C.push(K("invStdOutput",1,p)),$&&C.push(K("inputSkipBiasSum",e[0].dataType,u,v));let I=Pe(e[0].dataType),T=M=>`
      const hiddenSize: f32 = ${o};
      const hiddenSizeVectorized: u32 = ${o/v};
      const epsilon: f32 = ${t.epsilon};

      ${M.declareVariables(...C)}

      ${M.mainStart()}
        ${M.guardAgainstOutOfBoundsWorkgroupSizes(l/o)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${Ze("f32",v)};
        var squareSum = ${Ze("f32",v)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${w?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${$?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${Ut(I,v,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${At("sum",v)} / hiddenSize;
        let variance = sqrt(${At("squareSum",v)} / hiddenSize - mean * mean + epsilon);
        ${g?"meanOutput[global_idx] = mean;":""}
        ${y?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${I}(mean)) / ${I}(variance) * gamma[i]
           + ${m?"beta[i]":"0.0"};
        }
      }`,P=[{dims:u,dataType:e[0].dataType}];return r>1&&P.push({dims:p,dataType:1}),r>2&&P.push({dims:p,dataType:1}),r>3&&P.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:T,getRunData:()=>({outputs:P,dispatchGroup:{x:Math.ceil(l/o/64)}})}},Mu=(e,t)=>{tp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(rp(e.inputs,t,e.outputCount,!1),{outputs:a})},Du=e=>{let t=e.epsilon;return se({epsilon:t})}});var np,Cn,ap,zu,op,ip,Wu,Nu,Vu=F(()=>{"use strict";Be();ge();ke();ve();np=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},Cn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},ap=(e,t)=>{if(e.length>1){let r=Cn(e,1),a=Cn(e,2),n=Cn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),se({starts:r,ends:a,axes:n})}else return t},zu=(e,t,r,a,n)=>{let s=e;return e<0&&(s+=r[a[t]]),n[t]<0?Math.max(0,Math.min(s,r[a[t]]-1)):Math.max(0,Math.min(s,r[a[t]]))},op=(e,t,r,a)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
          var inputIndices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
            var inputIndex = outputIndex * steps[i] + starts[i] + carry;
            carry = inputIndex / inputShape[i];
            inputIndex = inputIndex % inputShape[i];
            if (signs[i] < 0) {
              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];
            }
            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;
          }
          return inputIndices;
      }`,ip=(e,t)=>{let r=e[0].dims,a=W.size(r),n=t.axes.length>0?W.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=Cn(e,4);s.forEach(v=>v!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((v,C)=>zu(v,C,r,n,s)),l=t.ends.map((v,C)=>zu(v,C,r,n,s));if(n.length!==r.length)for(let v=0;v<r.length;++v)n.includes(v)||(u.splice(v,0,0),l.splice(v,0,r[v]),s.splice(v,0,1));let o=s.map(v=>Math.sign(v));s.forEach((v,C,I)=>{if(v<0){let T=(l[C]-u[C])/v,P=u[C],M=P+T*s[C];u[C]=M,l[C]=P,I[C]=-v}});let p=r.slice(0);n.forEach((v,C)=>{p[v]=Math.ceil((l[v]-u[v])/s[v])});let m={dims:p,dataType:e[0].dataType},w=K("output",e[0].dataType,p),g=L("input",e[0].dataType,r),y=W.size(p),$=v=>`
      ${v.declareVariables(g,w)}
        const signs = array<i32, ${o.length}>(${o.map(C=>`${C}i`).join(",")});
        const starts = array<u32, ${u.length}>(${u.map(C=>`${C}u`).join(",")});
        const ends = array<u32, ${l.length}>(${l.map(C=>`${C}u`).join(",")});
        const steps = array<u32, ${s.length}>(${s.map(C=>`${C}u`).join(",")});
        const inputShape = array<u32, ${r.length}>(${r.map(C=>`${C}u`).join(",")});

        ${op(g,w,r,p)}
        ${v.mainStart()}
          ${v.guardAgainstOutOfBoundsWorkgroupSizes(y)}
          let outputIndices = ${w.offsetToIndices("global_idx")};
          let inputIndices = calculateInputIndices(outputIndices);
          ${w.setByOffset("global_idx",g.getByIndices("inputIndices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${t.cacheKey}|${e[4]?.dims??""}`},getShaderSource:$,getRunData:()=>({outputs:[m],dispatchGroup:{x:Math.ceil(a/64)}})}},Wu=(e,t)=>{np(e.inputs,t);let r=ap(e.inputs,t);e.compute(ip(e.inputs,r),{inputs:[0]})},Nu=e=>{let t=e.starts,r=e.ends,a=e.axes;return se({starts:t,ends:r,axes:a})}});var sp,up,Uu,Gu,Lu=F(()=>{"use strict";ge();ke();ve();sp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},up=(e,t)=>{let r=e.dims,a=W.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],l=a/u,o=wt(u),p=u/o,m=(C,I)=>I===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:I===2?`max(${C}.x, ${C}.y)`:I===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,w=L("x",e.dataType,e.dims,o),g=K("result",e.dataType,e.dims,o),y=w.type.value,$=Pe(e.dataType)==="f32"?`var threadMax = ${y}(-3.402823e+38f);`:`var threadMax = ${y}(-65504.0h);`,v=C=>`
      var<workgroup> rowMaxShared : ${y};
      var<workgroup> rowSumShared : ${y};
      var<workgroup> threadShared : array<${y}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${y} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${y}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${C.registerUniform("packedCols","i32").declareVariables(w,g)}
      ${C.mainStart()}
        let gindex = i32(global_id.x);
        let lindex = i32(local_id.x);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${$}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${y}(${m("threadShared[0]",o)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${y}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${y}(${At("threadShared[0]",o)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${o}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:v}},Uu=(e,t)=>{sp(e.inputs),e.compute(up(e.inputs[0],t))},Gu=e=>se({axis:e.axis})});var lp,dp,cp,pp,fp,Fu,Hu,ju=F(()=>{"use strict";ge();ke();ve();lp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},dp=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),se({numOutputs:a,axis:t.axis,splitSizes:r})},cp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < sizeInConcatAxis[i]) {
        return i;
    }
    }
    return ${e}u;
}`,pp=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (outputNumber == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${a}) { ${n} }`)}return`
      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},fp=(e,t)=>{let r=e[0].dims,a=W.size(r),n=e[0].dataType,s=r.length,u=t.axis,l=u<0?r.length+u:u,o=new Array(t.numOutputs),p=L("input",n,r),m=new Array(t.numOutputs),w=[],g=[],y=0;for(let C=0;C<t.numOutputs;C++){y+=t.splitSizes[C],m[C]=y;let I=r.slice();I[t.axis]=t.splitSizes[C],g.push(I),o[C]=K(`output${C}`,n,g[C]),w.push({dims:g[C],dataType:e[0].dataType})}let $=s<2?"indices":`indices[${l}]`,v=C=>`
  ${C.declareVariables(p,...o)}
  const sizeInConcatAxis = array<u32, ${m.length}>(${m.map(I=>`${I}u`).join(",")});
  ${cp(m.length)}
  ${pp(o)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes(a)}

    var indices = ${p.offsetToIndices("global_idx")};
    let outputNumber = calculateOutputIndex(${$});
    if (outputNumber != 0) {
        ${$} -= sizeInConcatAxis[outputNumber - 1u];
    }
    writeBufferData(outputNumber, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:v,getRunData:()=>({outputs:w,dispatchGroup:{x:Math.ceil(a/64)}})}},Fu=(e,t)=>{lp(e.inputs);let r=e.inputs.length===1?t:dp(e.inputs,t);e.compute(fp(e.inputs,r),{inputs:[0]})},Hu=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return se({axis:t,numOutputs:a,splitSizes:r})}});var qu,mp,hp,gp,Ku,Yu=F(()=>{"use strict";Be();ge();ve();qu=e=>Array.from(e.getBigInt64Array(),Number),mp=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(qu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},hp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},gp=e=>{let t=e[0].dims,r=qu(e[1]),a=hp(t,r),n=W.size(a),s=e[0].dataType,u=L("input",s,t),l=K("output",s,a),o=p=>`
      const inputShape = ${u.indices(...t)};
      ${p.declareVariables(u,l)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}
      let outputIndices = ${l.offsetToIndices("global_idx")};
      var inputIndices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let inputDimValue = ${l.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};

        ${u.indicesSet("inputIndices","i","inputDimValue")}
      }
      ${l.setByOffset("global_idx",u.getByIndices("inputIndices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:o}},Ku=e=>{mp(e.inputs),e.compute(gp(e.inputs),{inputs:[0]})}});var yp,bp,Xu,Ju=F(()=>{"use strict";Be();ge();ve();yp=(e,t,r,a,n)=>{let s=W.size(r),u=Math.ceil(s/4),l=K("outputData",n,r,4),o=L("aData",t[1].dataType,t[1].dims,4),p=L("bData",t[2].dataType,t[2].dims,4),m=L("cData",t[0].dataType,t[0].dims,4),w,g=(y,$,v)=>`select(${$}, ${y}, ${v})`;if(!a)w=l.setByOffset("global_idx",g(o.getByOffset("global_idx"),p.getByOffset("global_idx"),m.getByOffset("global_idx")));else{let y=($,v,C="")=>{let I=`aData[indexA${v}][componentA${v}]`,T=`bData[indexB${v}][componentB${v}]`,P=`bool(cData[indexC${v}] & ${4278190080>>>(3-v)*8}u)`;return`
            let outputIndices${v} = ${l.offsetToIndices(`global_idx * 4u + ${v}u`)};
            let offsetA${v} = ${o.broadcastedIndicesToOffset(`outputIndices${v}`,l)};
            let offsetB${v} = ${p.broadcastedIndicesToOffset(`outputIndices${v}`,l)};
            let offsetC${v} = ${m.broadcastedIndicesToOffset(`outputIndices${v}`,l)};
            let indexA${v} = offsetA${v} / 4u;
            let indexB${v} = offsetB${v} / 4u;
            let indexC${v} = offsetC${v} / 4u;
            let componentA${v} = offsetA${v} % 4u;
            let componentB${v} = offsetB${v} % 4u;
            ${$}[${v}] = ${C}(${g(I,T,P)});
          `};n===9?w=`
            var data = vec4<u32>(0);
            ${y("data",0,"u32")}
            ${y("data",1,"u32")}
            ${y("data",2,"u32")}
            ${y("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:w=`
            ${y("outputData[global_idx]",0)}
            ${y("outputData[global_idx]",1)}
            ${y("outputData[global_idx]",2)}
            ${y("outputData[global_idx]",3)}
          `}return`
        ${e.declareVariables(m,o,p,l)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        ${w}
      }`},bp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,s=!(W.areEqual(t,r)&&W.areEqual(r,a)),u=t,l=W.size(t);if(s){let o=ot.calcShape(ot.calcShape(t,r,!1),a,!1);if(!o)throw new Error("Can't perform where op on the given tensors");u=o,l=W.size(u)}return{name:"Where",getShaderSource:o=>yp(o,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)}})}},Xu=e=>{e.compute(bp(e.inputs))}});var Qu,Zu=F(()=>{"use strict";ki();Mi();fs();Cs();Es();fa();Vs();Fs();qs();Xs();Zs();ru();ou();uu();du();fu();_u();Tu();cn();Pu();Bu();Vu();Lu();ju();Yu();Ir();la();Ju();Qu=new Map([["Abs",[Di]],["Acos",[Bi]],["Acosh",[zi]],["Add",[ms]],["ArgMax",[Ri,sa]],["ArgMin",[Ti,sa]],["Asin",[Wi]],["Asinh",[Ni]],["Atan",[Vi]],["Atanh",[Ui]],["AveragePool",[wu,bu]],["BiasAdd",[Pi]],["BiasSplitGelu",[ps]],["Cast",[Li,Gi]],["Ceil",[Hi]],["ClipV10",[ua]],["Clip",[Fi]],["Concat",[Is,As]],["Conv",[ha,ma]],["ConvTranspose",[Ns,Ws]],["Cos",[ji]],["Cosh",[qi]],["Div",[hs]],["Einsum",[Gs,Ls]],["Elu",[Ki,fn]],["Equal",[gs]],["Erf",[Yi]],["Exp",[Xi]],["Expand",[js]],["Floor",[Ji]],["FusedConv",[ha,ma]],["Gather",[Ys,Ks]],["GatherElements",[Qs,Js]],["Gelu",[Qi]],["Gemm",[eu,tu]],["GlobalAveragePool",[xu,$u]],["GlobalMaxPool",[Eu,Au]],["Greater",[vs]],["GreaterOrEqual",[xs]],["InstanceNormalization",[au,nu]],["LayerNormalization",[su,iu]],["LeakyRelu",[Zi,fn]],["Less",[$s]],["LessOrEqual",[Ss]],["Log",[cs]],["MatMul",[lu]],["MaxPool",[Cu,Iu]],["Mul",[ys]],["Neg",[ts]],["Not",[es]],["Pad",[cu,pu]],["Pow",[bs]],["Range",[Ou]],["Reciprocal",[rs]],["ReduceMin",[Si,et]],["ReduceMean",[bi,et]],["ReduceMax",[xi,et]],["ReduceSum",[Ii,et]],["ReduceProd",[Ci,et]],["ReduceL1",[wi,et]],["ReduceL2",[vi,et]],["ReduceLogSum",[Ei,et]],["ReduceLogSumExp",[$i,et]],["ReduceSumSquare",[Ai,et]],["Relu",[ns]],["Resize",[Ru,ku]],["Sigmoid",[as]],["Sin",[os]],["Sinh",[is]],["Slice",[Wu,Nu]],["SkipLayerNormalization",[Mu,Du]],["Split",[Fu,Hu]],["Sqrt",[ss]],["Softmax",[Uu,Gu]],["Sub",[ws]],["Tan",[us]],["Tanh",[ls]],["ThresholdedRelu",[ds,fn]],["Tile",[Ku]],["Transpose",[oi,ii]],["Where",[Xu]]])});var In,el=F(()=>{"use strict";at();Be();It();ve();In=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,s,u,l){let o=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let m=[];for(let g of n)m.push({binding:m.length,resource:{buffer:g.buffer}});for(let g of s)m.push({binding:m.length,resource:{buffer:g.buffer}});l&&m.push({binding:m.length,resource:l});let w=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:m,label:t.programInfo.name});if(p.setBindGroup(0,w),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let g=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,g.buffer,0,this.backend.querySetCount*8),this.backend.flush();let y=this.backend.currentKernelId,$=this.backend.kernels.get(y),v=`[${$[0]}] ${$[1]}`;g.buffer.mapAsync(GPUMapMode.READ).then(()=>{let C=new BigUint64Array(g.buffer.getMappedRange()),I=C[0],T=C[1];g.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=I);let P=Number(I-this.backend.queryTimeBase),M=Number(T-this.backend.queryTimeBase);if(!Number.isSafeInteger(P)||!Number.isSafeInteger(M))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(g.id);let D="";r.forEach((B,j)=>{D+=`input[${j}]: [${B.dims}] | ${xr(B.dataType)}, `});let R="";a.forEach((B,j)=>{R+=`output[${j}]: [${B.dims}] | ${xr(B.dataType)}, `}),console.log(`[profiling] kernel "${y}|${v}" ${D}${R}execution time: ${M-P} ns`),Jt(`programName=${t.programInfo.name}, time=${M-P}`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let s=ni(r),u=t.getShaderSource(s),l=`${n.join(`
`)}
${s.additionalImplementations}
${u}`,o=a.createShaderModule({code:l,label:t.name});Ee("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let p=a.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&a<=s&&n<=s)return[r,a,n];let u=r*a*n,l=Math.ceil(Math.sqrt(u));if(l>s){if(l=Math.ceil(Math.cbrt(u)),l>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var wp,vp,An,tl=F(()=>{"use strict";at();It();Xo();ei();Zu();el();wp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[a].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[a].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},vp=(e,t)=>{let r=e.name;return e.shaderCache?.hint&&(r+="["+e.shaderCache.hint+"]"),r+=`:${wp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,r},An=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Zo(this),this.programManager=new In(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Ko(t.logLevel,!!t.debug),Jr(!!t.trace),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,s){let u=[];for(let I=0;I<r.length;++I){let T=this.gpuDataManager.get(r[I].data);if(!T)throw new Error(`no GPU data for input: ${r[I].data}`);u[I]=T}let l=vp(t,r),o=this.programManager.getArtifact(l),{outputs:p,dispatchGroup:m,programUniforms:w}=t.getRunData(r),g=a.length===0?p.map((I,T)=>T):a;if(g.length!==p.length)throw new Error(`Output size ${g.length} must be equal to ${p.length}.`);let y=[],$=[];for(let I=0;I<p.length;++I){if(!Number.isInteger(g[I])||g[I]<-3||g[I]>=p.length)throw new Error(`Invalid output index: ${g[I]}`);if(g[I]===-3)continue;let T=g[I]===-1,P=g[I]===-2,M=T||P?s(p[I].dataType,p[I].dims):n(g[I],p[I].dataType,p[I].dims),D=this.gpuDataManager.get(M.data);if(!D)throw new Error(`no GPU data for output: ${M.data}`);if(T&&this.temporaryData.push(D),P){let R=this.kernelPersistentData.get(this.currentKernelId);R||(R=[],this.kernelPersistentData.set(this.currentKernelId,R)),R.push(D)}y.push(M),$.push(D)}let v;if(w){let I=0,T=0,P=[],M=1;w.forEach(B=>{let j=typeof B.data=="number"?[B.data]:B.data,X;switch(j.length){case 1:X=4;break;case 2:X=8;break;case 3:X=16;break;case 4:X=16;break;case 5:X=16;break;case 6:X=16;break;default:throw new Error(`unsupported data length: ${j.length}`)}(T===5||T===6)&&(X=16),X>M&&(M=X),I=Math.ceil(I/X)*X,T=j.length,P.push(I),I+=j.length*4}),I=Math.ceil(I/M)*M;let D=new ArrayBuffer(I);w.forEach((B,j)=>{let X=P[j],le=typeof B.data=="number"?[B.data]:B.data;B.type==="int32"?new Int32Array(D,X,le.length).set(le):B.type==="uint32"?new Uint32Array(D,X,le.length).set(le):new Float32Array(D,X,le.length).set(le)});let R=this.gpuDataManager.create(I,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(R.buffer,0,D,0,I),this.gpuDataManager.release(R.id),v={offset:0,size:I,buffer:R.buffer}}let C=this.programManager.normalizeDispatchGroupSize(m);return o||(o=this.programManager.build(t,C),this.programManager.setArtifact(l,o)),Ee("info",()=>`[ProgramManager] run "${t.name}" (key=${l}) with ${C[0]}x${C[1]}x${C[2]}`),this.programManager.run(o,r,y,u,$,C,v),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let s=Qu.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,l,o]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Ee("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),l(r,o[1]),0}catch(m){return a.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${m}`)),1}finally{p&&a.push(this.device.popErrorScope().then(m=>m?`GPU validation error for kernel "[${s}] ${u}": ${m.message}`:null));for(let m of this.temporaryData)this.gpuDataManager.release(m.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),l=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return s.set(r,[l,a]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await ta(this,t,r);return Yo(n.buffer,a)}}}});var rl={};zt(rl,{init:()=>$p});var Tr,va,$p,nl=F(()=>{"use strict";Be();tl();It();ge();Tr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(W.size(t)!==W.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},va=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=a>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let l=[];for(let o=0;o<u;o++){let p=n[s++],m=n[s++],w=n[s++],g=[];for(let y=0;y<w;y++)g.push(n[s++]);l.push(new Tr(t,p,m,g))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],s=(l,o,p)=>new Tr(this.module,o,this.output(l,p),p),u=(l,o)=>{let p=Sr(l);if(!p)throw new Error(`Unsupported data type: ${l}`);let m=p*W.size(o);return new Tr(this.module,l,this.backend.gpuDataManager.create(m).id,o)};return this.backend.run(t,a,n,s,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},$p=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let a=new An;await a.initialize(t),r(a,n=>a.alloc(n),n=>a.free(n),(n,s,u,l=!1)=>{if(l)Ee("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),a.memcpy(n,s);else{Ee("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let o=e.HEAPU8.subarray(n,n+u);a.upload(s,o)}},async(n,s,u)=>{Ee("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await a.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>a.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>a.releaseKernel(n),(n,s,u,l)=>{Ee("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let o=new va(e,a,s);return a.computeKernel(n,o,l)})}}});var ol,xp,Sp,il,Rr,sl,$a,xa,ul,ll,al,dl,cl,pl,fl=F(()=>{"use strict";Lo();Ho();Be();Qt();nn();ol=!1,xp=e=>{let t=Re(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&Ie("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},Sp=(e,t)=>{Re()._OrtInit(e,t)!==0&&Ie("Can't initialize onnxruntime.")},il=async e=>{Sp(e.wasm.numThreads,Cr(e.logLevel));{let t=(nl(),Ct(rl)).init;await t(Re(),e)}ol=!0},Rr=new Map,sl=()=>ol,$a=e=>{let t=Re(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},xa=(e,t)=>{let r=Re(),a=0,n=0,s=0,u=[],l=[],o=[];try{[n,u]=Fo(t),a=r._OrtCreateSession(e[0],e[1],n),a===0&&Ie("Can't create a session.");let[p,m]=xp(a),w=[],g=[],y=[];for(let v=0;v<p;v++){let C=r._OrtGetInputName(a,v);C===0&&Ie("Can't get an input name."),l.push(C),w.push(r.UTF8ToString(C))}for(let v=0;v<m;v++){let C=r._OrtGetOutputName(a,v);C===0&&Ie("Can't get an output name."),o.push(C);let I=r.UTF8ToString(C);g.push(I);{let T=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[I]??"cpu";if(T!=="cpu"&&T!=="cpu-pinned"&&T!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${T}.`);y.push(T)}}let $=null;return y.some(v=>v==="gpu-buffer")&&(s=r._OrtCreateBinding(a),s===0&&Ie("Can't create IO binding."),$={handle:s,outputPreferredLocations:y,outputPreferredLocationsEncoded:y.map(v=>Zn(v))}),Rr.set(a,[a,l,o,$]),[a,w,g]}catch(p){throw l.forEach(m=>r._OrtFree(m)),o.forEach(m=>r._OrtFree(m)),s!==0&&r._OrtReleaseBinding(s),a!==0&&r._OrtReleaseSession(a),p}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(p=>r._free(p))}},ul=(e,t)=>{let r=$a(e);return xa(r,t)},ll=e=>{let t=Re(),r=Rr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),s.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(a),Rr.delete(e)},al=(e,t,r,a,n)=>{if(!e){t.push(0);return}let s=Re(),u=e[0],l=e[1],o=e[3],p,m;if(u==="string"&&o==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o==="gpu-buffer"){let y=e[2].gpuBuffer,$=Sr(Qn(u));m=l.reduce((v,C)=>v*C,1)*$,p=s.jsepRegisterBuffer(a,n,y,m)}else{let y=e[2];if(Array.isArray(y)){m=4*y.length,p=s._malloc(m),r.push(p);let $=p/4;for(let v=0;v<y.length;v++){if(typeof y[v]!="string")throw new TypeError(`tensor data at index ${v} is not a string`);s.HEAPU32[$++]=De(y[v],r)}}else m=y.byteLength,p=s._malloc(m),r.push(p),s.HEAPU8.set(new Uint8Array(y.buffer,y.byteOffset,m),p)}let w=s.stackSave(),g=s.stackAlloc(4*l.length);try{let y=g/4;l.forEach(v=>s.HEAP32[y++]=v);let $=s._OrtCreateTensor(Qn(u),p,m,g,l.length,Zn(o));$===0&&Ie(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push($)}finally{s.stackRestore(w)}},dl=async(e,t,r,a,n,s)=>{let u=Re(),l=Rr.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[o,p,m,w]=l,g=t.length,y=a.length,$=0,v=[],C=[],I=[],T=[],P=u.stackSave(),M=u.stackAlloc(g*4),D=u.stackAlloc(g*4),R=u.stackAlloc(y*4),B=u.stackAlloc(y*4);try{[$,v]=Go(s);for(let oe=0;oe<g;oe++)al(r[oe],C,T,e,t[oe]);for(let oe=0;oe<y;oe++)al(n[oe],I,T,e,g+a[oe]);let j=M/4,X=D/4,le=R/4,z=B/4;for(let oe=0;oe<g;oe++)u.HEAPU32[j++]=C[oe],u.HEAPU32[X++]=p[t[oe]];for(let oe=0;oe<y;oe++)u.HEAPU32[le++]=I[oe],u.HEAPU32[z++]=m[a[oe]];if(w){let{handle:oe,outputPreferredLocations:we,outputPreferredLocationsEncoded:H}=w;if(p.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model's input count (${p.length}).`);for(let Se=0;Se<g;Se++){let Oe=t[Se];await u._OrtBindInput(oe,p[Oe],C[Se])!==0&&Ie(`Can't bind input[${Se}] for session=${e}.`)}for(let Se=0;Se<y;Se++){let Oe=a[Se];n[Se]?.[3]?u._OrtBindOutput(oe,m[Oe],I[Se],0)!==0&&Ie(`Can't bind pre-allocated output[${Se}] for session=${e}.`):u._OrtBindOutput(oe,m[Oe],0,H[Oe])!==0&&Ie(`Can't bind output[${Se}] to ${we[Se]} for session=${e}.`)}}let q;w?q=await u._OrtRunWithBinding(o,w.handle,y,R,$):q=await u._OrtRun(o,D,M,g,B,y,R,$),q!==0&&Ie("failed to call OrtRun().");let xe=[];for(let oe=0;oe<y;oe++){let we=u.HEAPU32[R/4+oe];if(we===I[oe]){xe.push(n[oe]);continue}let H=u.stackSave(),Se=u.stackAlloc(4*4),Oe=!1,Ae,_e=0;try{u._OrtGetTensorData(we,Se,Se+4,Se+8,Se+12)!==0&&Ie(`Can't access output tensor data on index ${oe}.`);let qe=Se/4,Ke=u.HEAPU32[qe++];_e=u.HEAPU32[qe++];let U=u.HEAPU32[qe++],ce=u.HEAPU32[qe++],de=[];for(let Te=0;Te<ce;Te++)de.push(u.HEAPU32[U/4+Te]);u._OrtFree(U);let We=de.reduce((Te,Me)=>Te*Me,1);Ae=xr(Ke);let Ge=w?.outputPreferredLocations[a[oe]];if(Ae==="string"){if(Ge==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Te=[],Me=_e/4;for(let tt=0;tt<We;tt++){let Fe=u.HEAPU32[Me++],Ye=tt===We-1?void 0:u.HEAPU32[Me]-Fe;Te.push(u.UTF8ToString(Fe,Ye))}xe.push([Ae,de,Te,"cpu"])}else if(Ge==="gpu-buffer"&&We>0){let Te=u.jsepGetBuffer(_e),Me=Sr(Ke);if(Me===void 0||!on(Ae))throw new Error(`Unsupported data type: ${Ae}`);Oe=!0,xe.push([Ae,de,{gpuBuffer:Te,download:u.jsepCreateDownloader(Te,We*Me,Ae),dispose:()=>{u._OrtReleaseTensor(we)}},"gpu-buffer"])}else{let Te=an(Ae),Me=new Te(We);new Uint8Array(Me.buffer,Me.byteOffset,Me.byteLength).set(u.HEAPU8.subarray(_e,_e+Me.byteLength)),xe.push([Ae,de,Me,"cpu"])}}finally{u.stackRestore(H),Ae==="string"&&_e&&u._free(_e),Oe||u._OrtReleaseTensor(we)}}return w&&u._OrtClearBoundOutputs(w.handle),xe}finally{u.stackRestore(P),C.forEach(j=>u._OrtReleaseTensor(j)),I.forEach(j=>u._OrtReleaseTensor(j)),T.forEach(j=>u._free(j)),$!==0&&u._OrtReleaseRunOptions($),v.forEach(j=>u._free(j))}},cl=e=>{let t=Re(),r=Rr.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&Ie("Can't get an profile file name."),t._OrtFree(n)},pl=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var ml=Xt((eb,Ip)=>{Ip.exports='/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var fn=Object.defineProperty;var Eu=Object.getOwnPropertyDescriptor;var Tu=Object.getOwnPropertyNames;var Ou=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var sr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Pr=(e,t)=>{for(var r in t)fn(e,r,{get:t[r],enumerable:!0})},_u=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Tu(t))!Ou.call(e,n)&&n!==r&&fn(e,n,{get:()=>t[n],enumerable:!(a=Eu(t,n))||a.enumerable});return e};var Vt=e=>_u(fn({},"__esModule",{value:!0}),e);var mn={};Pr(mn,{readFile:()=>Ru});var Ru,hn=j(()=>{Ru=void 0});var gn={};Pr(gn,{join:()=>Pu});var Pu,yn=j(()=>{Pu=void 0});var mo=sr((fo,bn)=>{"use strict";var po=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((l,p)=>{a=l,n=p}),r.jsepInit=(l,p,h,$,I,V,U,J)=>{r.ab=l,r.Ra=p,r.Ta=h,r.La=$,r.Sa=I,r.xa=V,r.Ua=U,r.Va=J,p=(Y,ee,Z)=>(...pe)=>{let fe=je,T=ee?.();pe=Y(...pe);let re=ee?.();return T!==re&&(Y=re,Z(T),ee=Z=null),je!=fe?$r():pe},h=Y=>async(...ee)=>{try{if(r.Fa)throw Error("Session already started");let Z=r.Fa={Wa:ee[0],errors:[]},pe=await Y(...ee);if(r.Fa!==Z)throw Error("Session mismatch");l.flush();let fe=Z.errors;if(0<fe.length){let T=await Promise.all(fe);if(T=T.filter(re=>re),0<T.length)throw Error(T.join(`\n`))}return pe}finally{r.Fa=null}},r._OrtRun=h(p(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=h(p(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=p(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,ee,Z,pe)=>l.registerBuffer(Y,ee,Z,pe),r.jsepUnregisterBuffers=Y=>{l.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>l.getBuffer(Y),r.jsepCreateDownloader=(Y,ee,Z)=>l.createDownloader(Y,ee,Z)};var s=Object.assign({},r),u="./this.program",d=(l,p)=>{throw p},o=typeof window=="object",m=typeof importScripts=="function",g=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S="",b,y,x;if(g){var w=(hn(),Vt(mn)),C=(yn(),Vt(gn));S=m?C.dirname(S)+"/":__dirname+"/",b=(l,p)=>(l=l.startsWith("file://")?new URL(l):C.normalize(l),w.readFileSync(l,p?void 0:"utf8")),x=l=>(l=b(l,!0),l.buffer||(l=new Uint8Array(l)),l),y=(l,p,h,$=!0)=>{l=l.startsWith("file://")?new URL(l):C.normalize(l),w.readFile(l,$?void 0:"utf8",(I,V)=>{I?h(I):p($?V.buffer:V)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),d=(l,p)=>{throw process.exitCode=l,p},r.inspect=()=>"[Emscripten Module object]"}else(o||m)&&(m?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),e&&(S=e),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",b=l=>{var p=new XMLHttpRequest;return p.open("GET",l,!1),p.send(null),p.responseText},m&&(x=l=>{var p=new XMLHttpRequest;return p.open("GET",l,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),y=(l,p,h)=>{var $=new XMLHttpRequest;$.open("GET",l,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?p($.response):h()},$.onerror=h,$.send(null)});var A=r.print||console.log.bind(console),_=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(d=r.quit);var z;r.wasmBinary&&(z=r.wasmBinary);var D=r.noExitRuntime||!0;typeof WebAssembly!="object"&&G("no native wasm support detected");var W,R,M=!1,H,X,le,k,K,xe,ae;function we(){var l=W.buffer;r.HEAP8=X=new Int8Array(l),r.HEAP16=new Int16Array(l),r.HEAP32=k=new Int32Array(l),r.HEAPU8=le=new Uint8Array(l),r.HEAPU16=new Uint16Array(l),r.HEAPU32=K=new Uint32Array(l),r.HEAPF32=xe=new Float32Array(l),r.HEAPF64=ae=new Float64Array(l)}var F,Se=[],Te=[],Ae=[];function Ee(){var l=r.preRun.shift();Se.unshift(l)}var Ue=0,Le=null,Fe=null;function G(l){throw r.onAbort&&r.onAbort(l),l="Aborted("+l+")",_(l),M=!0,H=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),n(l),l}function ce(l){return l.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!ce(de)){var We=de;de=r.locateFile?r.locateFile(We,S):S+We}function Ne(l){if(l==de&&z)return new Uint8Array(z);if(x)return x(l);throw"both async and sync fetching of the wasm failed"}function Oe(l){if(!z&&(o||m)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at \'"+l+"\'";return p.arrayBuffer()}).catch(()=>Ne(l));if(y)return new Promise((p,h)=>{y(l,$=>p(new Uint8Array($)),h)})}return Promise.resolve().then(()=>Ne(l))}function Me(l,p,h){return Oe(l).then($=>WebAssembly.instantiate($,p)).then($=>$).then(h,$=>{_("failed to asynchronously prepare wasm: "+$),G($)})}function Je(l,p){var h=de;return z||typeof WebAssembly.instantiateStreaming!="function"||ce(h)||h.startsWith("file://")||g||typeof fetch!="function"?Me(h,l,p):fetch(h,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,l).then(p,function(I){return _("wasm streaming compile failed: "+I),_("falling back to ArrayBuffer instantiation"),Me(h,l,p)}))}var Ge,He={916496:l=>{r.xa("Abs",l,void 0)},916547:l=>{r.xa("Neg",l,void 0)},916598:l=>{r.xa("Floor",l,void 0)},916651:l=>{r.xa("Ceil",l,void 0)},916703:l=>{r.xa("Reciprocal",l,void 0)},916761:l=>{r.xa("Sqrt",l,void 0)},916813:l=>{r.xa("Exp",l,void 0)},916864:l=>{r.xa("Erf",l,void 0)},916915:l=>{r.xa("Sigmoid",l,void 0)},916970:l=>{r.xa("Log",l,void 0)},917021:l=>{r.xa("Sin",l,void 0)},917072:l=>{r.xa("Cos",l,void 0)},917123:l=>{r.xa("Tan",l,void 0)},917174:l=>{r.xa("Asin",l,void 0)},917226:l=>{r.xa("Acos",l,void 0)},917278:l=>{r.xa("Atan",l,void 0)},917330:l=>{r.xa("Sinh",l,void 0)},917382:l=>{r.xa("Cosh",l,void 0)},917434:l=>{r.xa("Asinh",l,void 0)},917487:l=>{r.xa("Acosh",l,void 0)},917540:l=>{r.xa("Atanh",l,void 0)},917593:l=>{r.xa("Tanh",l,void 0)},917645:l=>{r.xa("Not",l,void 0)},917696:(l,p,h)=>{r.xa("ClipV10",l,{min:p,max:h})},917768:l=>{r.xa("Clip",l,void 0)},917820:(l,p)=>{r.xa("Elu",l,{alpha:p})},917878:l=>{r.xa("Relu",l,void 0)},917930:(l,p)=>{r.xa("LeakyRelu",l,{alpha:p})},917994:(l,p)=>{r.xa("ThresholdedRelu",l,{alpha:p})},918064:(l,p)=>{r.xa("Cast",l,{to:p})},918122:l=>{r.xa("Add",l,void 0)},918173:l=>{r.xa("Sub",l,void 0)},918224:l=>{r.xa("Mul",l,void 0)},918275:l=>{r.xa("Div",l,void 0)},918326:l=>{r.xa("Pow",l,void 0)},918377:l=>{r.xa("Equal",l,void 0)},918430:l=>{r.xa("Greater",l,void 0)},918485:l=>{r.xa("GreaterOrEqual",l,void 0)},918547:l=>{r.xa("Less",l,void 0)},918599:l=>{r.xa("LessOrEqual",l,void 0)},918658:(l,p,h,$,I)=>{r.xa("ReduceMean",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},918822:(l,p,h,$,I)=>{r.xa("ReduceMax",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},918985:(l,p,h,$,I)=>{r.xa("ReduceMin",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},919148:(l,p,h,$,I)=>{r.xa("ReduceProd",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},919312:(l,p,h,$,I)=>{r.xa("ReduceSum",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},919475:(l,p,h,$,I)=>{r.xa("ReduceL1",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},919637:(l,p,h,$,I)=>{r.xa("ReduceL2",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},919799:(l,p,h,$,I)=>{r.xa("ReduceLogSum",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},919965:(l,p,h,$,I)=>{r.xa("ReduceSumSquare",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},920134:(l,p,h,$,I)=>{r.xa("ReduceLogSumExp",l,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},920303:l=>{r.xa("Where",l,void 0)},920356:(l,p,h)=>{r.xa("Transpose",l,{perm:p?Array.from(k.subarray(h>>>0,h+p>>>0)):[]})},920469:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T,re)=>{r.xa("ConvTranspose",l,{format:Y?"NHWC":"NCHW",autoPad:p,dilations:[h],group:$,kernel_shape:[I],pads:[V,U],strides:[J],wIsConst:()=>!!X[ee>>>0],outputPadding:Z?Array.from(k.subarray(pe>>>0,pe+Z>>>0)):[],outputShape:fe?Array.from(k.subarray(T>>>0,T+fe>>>0)):[],activation:ze(re)})},920883:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T)=>{r.xa("ConvTranspose",l,{format:J?"NHWC":"NCHW",autoPad:p,dilations:Array.from(k.subarray(h>>>0,h+2>>>0)),group:$,kernelShape:Array.from(k.subarray(I>>>0,I+2>>>0)),pads:Array.from(k.subarray(V>>>0,V+4>>>0)),strides:Array.from(k.subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!X[Y>>>0],outputPadding:0<ee?Array.from(k.subarray(Z>>>0,Z+ee>>>0)):[],outputShape:0<pe?Array.from(k.subarray(fe>>>0,fe+pe>>>0)):[],activation:ze(T)})},921440:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T,re)=>{r.xa("ConvTranspose",l,{format:Y?"NHWC":"NCHW",autoPad:p,dilations:[h],group:$,kernel_shape:[I],pads:[V,U],strides:[J],wIsConst:()=>!!X[ee>>>0],outputPadding:Z?Array.from(k.subarray(pe>>>0,pe+Z>>>0)):[],outputShape:fe?Array.from(k.subarray(T>>>0,T+fe>>>0)):[],activation:ze(re)})},921854:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T)=>{r.xa("ConvTranspose",l,{format:J?"NHWC":"NCHW",autoPad:p,dilations:Array.from(k.subarray(h>>>0,h+2>>>0)),group:$,kernelShape:Array.from(k.subarray(I>>>0,I+2>>>0)),pads:Array.from(k.subarray(V>>>0,V+4>>>0)),strides:Array.from(k.subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!X[Y>>>0],outputPadding:0<ee?Array.from(k.subarray(Z>>>0,Z+ee>>>0)):[],outputShape:0<pe?Array.from(k.subarray(fe>>>0,fe+pe>>>0)):[],activation:ze(T)})},922411:(l,p)=>{r.xa("GlobalAveragePool",l,{format:p?"NHWC":"NCHW"})},922502:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T,re,me)=>{r.xa("AveragePool",l,{format:me?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[V,U],kernel_shape:[J,Y],pads:[ee,Z,pe,fe],strides:[T,re]})},922786:(l,p)=>{r.xa("GlobalAveragePool",l,{format:p?"NHWC":"NCHW"})},922877:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T,re,me)=>{r.xa("AveragePool",l,{format:me?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[V,U],kernel_shape:[J,Y],pads:[ee,Z,pe,fe],strides:[T,re]})},923161:(l,p)=>{r.xa("GlobalMaxPool",l,{format:p?"NHWC":"NCHW"})},923248:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T,re,me)=>{r.xa("MaxPool",l,{format:me?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[V,U],kernel_shape:[J,Y],pads:[ee,Z,pe,fe],strides:[T,re]})},923528:(l,p)=>{r.xa("GlobalMaxPool",l,{format:p?"NHWC":"NCHW"})},923615:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T,re,me)=>{r.xa("MaxPool",l,{format:me?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[V,U],kernel_shape:[J,Y],pads:[ee,Z,pe,fe],strides:[T,re]})},923895:(l,p,h,$,I)=>{r.xa("Gemm",l,{alpha:p,beta:h,transA:$,transB:I})},923999:l=>{r.xa("MatMul",l,void 0)},924053:(l,p,h,$)=>{r.xa("ArgMax",l,{keepDims:!!p,selectLastIndex:!!h,axis:$})},924161:(l,p,h,$)=>{r.xa("ArgMin",l,{keepDims:!!p,selectLastIndex:!!h,axis:$})},924269:(l,p)=>{r.xa("Softmax",l,{axis:p})},924332:(l,p)=>{r.xa("Concat",l,{axis:p})},924392:(l,p,h,$,I)=>{r.xa("Split",l,{axis:p,numOutputs:h,splitSizes:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},924537:l=>{r.xa("Expand",l,void 0)},924591:(l,p)=>{r.xa("Gather",l,{axis:Number(p)})},924662:(l,p)=>{r.xa("GatherElements",l,{axis:Number(p)})},924741:(l,p,h,$,I,V,U,J,Y,ee,Z)=>{r.xa("Resize",l,{antialias:p,axes:h?Array.from(k.subarray($>>>0,$+h>>>0)):[],coordinateTransformMode:ze(I),cubicCoeffA:V,excludeOutside:U,extrapolationValue:J,keepAspectRatioPolicy:ze(Y),mode:ze(ee),nearestMode:ze(Z)})},925092:(l,p,h,$,I,V,U)=>{r.xa("Slice",l,{starts:p?Array.from(k.subarray(h>>>0,h+p>>>0)):[],ends:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[],axes:V?Array.from(k.subarray(U>>>0,U+V>>>0)):[]})},925323:l=>{r.xa("Tile",l,void 0)},925375:(l,p,h)=>{r.xa("LayerNormalization",l,{axis:Number(p),epsilon:Number(h)})},925482:(l,p,h)=>{r.xa("InstanceNormalization",l,{epsilon:p,format:h?"NHWC":"NCHW"})},925596:(l,p,h)=>{r.xa("InstanceNormalization",l,{epsilon:p,format:h?"NHWC":"NCHW"})},925710:l=>{r.xa("Range",l,void 0)},925763:(l,p)=>{r.xa("Einsum",l,{equation:ze(p)})},925844:(l,p,h,$,I)=>{r.xa("Pad",l,{mode:p,value:h,pads:$?Array.from(k.subarray(I>>>0,I+$>>>0)):[]})},925976:l=>{r.xa("Gelu",l,void 0)},926028:l=>{r.xa("BiasAdd",l,void 0)},926083:l=>{r.xa("BiasSplitGelu",l,void 0)},926144:(l,p)=>{r.xa("SkipLayerNormalization",l,{epsilon:p})},926225:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe)=>{r.xa("Conv",l,{format:Y?"NHWC":"NCHW",auto_pad:p,dilations:[h],group:$,kernel_shape:[I],pads:V?Array.from(k.subarray(U>>>0,U+V>>>0)):[],strides:[J],w_is_const:()=>!!X[ee>>>0],activation:ze(Z),activation_params:pe?Array.from(xe.subarray(fe>>>0,fe+pe>>>0)):[]})},926606:(l,p,h,$,I,V,U,J,Y,ee,Z,pe,fe,T,re,me)=>{r.xa("Conv",l,{format:pe?"NHWC":"NCHW",auto_pad:p,dilations:[h,$],group:I,kernel_shape:[V,U],pads:J?Array.from(k.subarray(Y>>>0,Y+J>>>0)):[],strides:[ee,Z],w_is_const:()=>!!X[fe>>>0],activation:ze(T),activation_params:re?Array.from(xe.subarray(me>>>0,me+re>>>0)):[]})},927008:l=>{r.Ua(l)},927042:(l,p)=>r.Va(l,p,r.Fa.Wa,r.Fa.errors),927154:l=>r.Ra(l),927187:l=>r.Ta(l),927219:(l,p,h)=>{r.La(l,p,h,!0)},927258:(l,p,h)=>{r.La(l,p,h)}};function vt(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var it=l=>{for(;0<l.length;)l.shift()(r)};function wr(l){this.Ka=l-24,this.Pa=function(p){K[this.Ka+4>>2>>>0]=p},this.Oa=function(p){K[this.Ka+8>>2>>>0]=p},this.Ma=function(p,h){this.Na(),this.Pa(p),this.Oa(h)},this.Na=function(){K[this.Ka+16>>2>>>0]=0}}var Gt=0,Ze=0,Ut=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,st=(l,p,h)=>{p>>>=0;var $=p+h;for(h=p;l[h]&&!(h>=$);)++h;if(16<h-p&&l.buffer&&Ut)return Ut.decode(l.subarray(p,h));for($="";p<h;){var I=l[p++];if(I&128){var V=l[p++]&63;if((I&224)==192)$+=String.fromCharCode((I&31)<<6|V);else{var U=l[p++]&63;I=(I&240)==224?(I&15)<<12|V<<6|U:(I&7)<<18|V<<12|U<<6|l[p++]&63,65536>I?$+=String.fromCharCode(I):(I-=65536,$+=String.fromCharCode(55296|I>>10,56320|I&1023))}}else $+=String.fromCharCode(I)}return $},ze=(l,p)=>(l>>>=0)?st(le,l,p):"",Lt=l=>{for(var p=0,h=0;h<l.length;++h){var $=l.charCodeAt(h);127>=$?p++:2047>=$?p+=2:55296<=$&&57343>=$?(p+=4,++h):p+=3}return p},Rt=(l,p,h,$)=>{if(h>>>=0,!(0<$))return 0;var I=h;$=h+$-1;for(var V=0;V<l.length;++V){var U=l.charCodeAt(V);if(55296<=U&&57343>=U){var J=l.charCodeAt(++V);U=65536+((U&1023)<<10)|J&1023}if(127>=U){if(h>=$)break;p[h++>>>0]=U}else{if(2047>=U){if(h+1>=$)break;p[h++>>>0]=192|U>>6}else{if(65535>=U){if(h+2>=$)break;p[h++>>>0]=224|U>>12}else{if(h+3>=$)break;p[h++>>>0]=240|U>>18,p[h++>>>0]=128|U>>12&63}p[h++>>>0]=128|U>>6&63}p[h++>>>0]=128|U&63}}return p[h>>>0]=0,h-I},mt=l=>l%4===0&&(l%100!==0||l%400===0),ut=[0,31,60,91,121,152,182,213,244,274,305,335],Pt=[0,31,59,90,120,151,181,212,243,273,304,334],$t=l=>{var p=Lt(l)+1,h=Wt(p);return h&&Rt(l,le,h,p),h},xt=[],Ft=(l,p)=>{xt.length=0;var h;for(p>>=2;h=le[l++>>>0];)p+=h!=105&p,xt.push(h==105?k[p>>>0]:ae[p++>>>1]),++p;return xt},Mt={},Ht=()=>{if(!kt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},p;for(p in Mt)Mt[p]===void 0?delete l[p]:l[p]=Mt[p];var h=[];for(p in l)h.push(`${p}=${l[p]}`);kt=h}return kt},kt,Ve=[null,[],[]],jt=[31,29,31,30,31,30,31,31,30,31,30,31],Bt=[31,28,31,30,31,30,31,31,30,31,30,31];function ie(l){var p=Array(Lt(l)+1);return Rt(l,p,0,p.length),p}function St(l,p,h,$){function I(T,re,me){for(T=typeof T=="number"?T.toString():T||"";T.length<re;)T=me[0]+T;return T}function V(T,re){return I(T,re,"0")}function U(T,re){function me(ir){return 0>ir?-1:0<ir?1:0}var pt;return(pt=me(T.getFullYear()-re.getFullYear()))===0&&(pt=me(T.getMonth()-re.getMonth()))===0&&(pt=me(T.getDate()-re.getDate())),pt}function J(T){switch(T.getDay()){case 0:return new Date(T.getFullYear()-1,11,29);case 1:return T;case 2:return new Date(T.getFullYear(),0,3);case 3:return new Date(T.getFullYear(),0,2);case 4:return new Date(T.getFullYear(),0,1);case 5:return new Date(T.getFullYear()-1,11,31);case 6:return new Date(T.getFullYear()-1,11,30)}}function Y(T){var re=T.Da;for(T=new Date(new Date(T.Ea+1900,0,1).getTime());0<re;){var me=T.getMonth(),pt=(mt(T.getFullYear())?jt:Bt)[me];if(re>pt-T.getDate())re-=pt-T.getDate()+1,T.setDate(1),11>me?T.setMonth(me+1):(T.setMonth(0),T.setFullYear(T.getFullYear()+1));else{T.setDate(T.getDate()+re);break}}return me=new Date(T.getFullYear()+1,0,4),re=J(new Date(T.getFullYear(),0,4)),me=J(me),0>=U(re,T)?0>=U(me,T)?T.getFullYear()+1:T.getFullYear():T.getFullYear()-1}l>>>=0,p>>>=0,h>>>=0,$>>>=0;var ee=k[$+40>>2>>>0];$={Za:k[$>>2>>>0],Ya:k[$+4>>2>>>0],Ga:k[$+8>>2>>>0],Ja:k[$+12>>2>>>0],Ha:k[$+16>>2>>>0],Ea:k[$+20>>2>>>0],Ca:k[$+24>>2>>>0],Da:k[$+28>>2>>>0],bb:k[$+32>>2>>>0],Xa:k[$+36>>2>>>0],$a:ee?ze(ee):""},h=ze(h),ee={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var Z in ee)h=h.replace(new RegExp(Z,"g"),ee[Z]);var pe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),fe="January February March April May June July August September October November December".split(" ");ee={"%a":T=>pe[T.Ca].substring(0,3),"%A":T=>pe[T.Ca],"%b":T=>fe[T.Ha].substring(0,3),"%B":T=>fe[T.Ha],"%C":T=>V((T.Ea+1900)/100|0,2),"%d":T=>V(T.Ja,2),"%e":T=>I(T.Ja,2," "),"%g":T=>Y(T).toString().substring(2),"%G":T=>Y(T),"%H":T=>V(T.Ga,2),"%I":T=>(T=T.Ga,T==0?T=12:12<T&&(T-=12),V(T,2)),"%j":T=>{for(var re=0,me=0;me<=T.Ha-1;re+=(mt(T.Ea+1900)?jt:Bt)[me++]);return V(T.Ja+re,3)},"%m":T=>V(T.Ha+1,2),"%M":T=>V(T.Ya,2),"%n":()=>`\n`,"%p":T=>0<=T.Ga&&12>T.Ga?"AM":"PM","%S":T=>V(T.Za,2),"%t":()=>"	","%u":T=>T.Ca||7,"%U":T=>V(Math.floor((T.Da+7-T.Ca)/7),2),"%V":T=>{var re=Math.floor((T.Da+7-(T.Ca+6)%7)/7);if(2>=(T.Ca+371-T.Da-2)%7&&re++,re)re==53&&(me=(T.Ca+371-T.Da)%7,me==4||me==3&&mt(T.Ea)||(re=1));else{re=52;var me=(T.Ca+7-T.Da-1)%7;(me==4||me==5&&mt(T.Ea%400-1))&&re++}return V(re,2)},"%w":T=>T.Ca,"%W":T=>V(Math.floor((T.Da+7-(T.Ca+6)%7)/7),2),"%y":T=>(T.Ea+1900).toString().substring(2),"%Y":T=>T.Ea+1900,"%z":T=>{T=T.Xa;var re=0<=T;return T=Math.abs(T)/60,(re?"+":"-")+("0000"+(T/60*100+T%60)).slice(-4)},"%Z":T=>T.$a,"%%":()=>"%"},h=h.replace(/%%/g,"\\0\\0");for(Z in ee)h.includes(Z)&&(h=h.replace(new RegExp(Z,"g"),ee[Z]($)));return h=h.replace(/\\0\\0/g,"%"),Z=ie(h),Z.length>p?0:(X.set(Z,l>>>0),Z.length-1)}function Ct(l){try{l()}catch(p){G(p)}}function an(l){var p={},h;for(h in l)(function($){var I=l[$];p[$]=typeof I=="function"?function(){At.push($);try{return I.apply(null,arguments)}finally{M||(At.pop()===$||G(),je&&qe===1&&At.length===0&&(qe=0,Ct(rr),typeof Fibers<"u"&&Fibers.cb()))}}:I})(h);return p}var qe=0,je=null,Kt=0,At=[],qt={},Yt={},Xt=0,Dt=null,vr=[];function $r(){return new Promise((l,p)=>{Dt={resolve:l,reject:p}})}function xr(){var l=Wt(65548),p=l+12;K[l>>2>>>0]=p,K[l+4>>2>>>0]=p+65536,p=At[0];var h=qt[p];return h===void 0&&(h=Xt++,qt[p]=h,Yt[h]=p),k[l+8>>2>>>0]=h,l}function Sr(l){if(!M){if(qe===0){var p=!1,h=!1;l(($=0)=>{if(!M&&(Kt=$,p=!0,h)){qe=2,Ct(()=>nr(je)),typeof Browser<"u"&&Browser.Ia.Qa&&Browser.Ia.resume(),$=!1;try{var I=(0,R[Yt[k[je+8>>2>>>0]]])()}catch(J){I=J,$=!0}var V=!1;if(!je){var U=Dt;U&&(Dt=null,($?U.reject:U.resolve)(I),V=!0)}if($&&!V)throw I}}),h=!0,p||(qe=1,je=xr(),typeof Browser<"u"&&Browser.Ia.Qa&&Browser.Ia.pause(),Ct(()=>tr(je)))}else qe===2?(qe=0,Ct(or),Qt(je),je=null,vr.forEach($=>{if(!M)try{if($(),!D)try{H=H=$=H,D||(r.onExit&&r.onExit($),M=!0),d($,new vt($))}catch(I){I instanceof vt||I=="unwind"||d(1,I)}}catch(I){I instanceof vt||I=="unwind"||d(1,I)}})):G(`invalid state: ${qe}`);return Kt}}function Cr(l){return Sr(p=>{l().then(p)})}var lt=[],dt=void 0,Jt=[];function Zt(l,p){if(!dt){dt=new WeakMap;var h=F.length;if(dt)for(var $=0;$<0+h;$++){var I=$,V=lt[I];V||(I>=lt.length&&(lt.length=I+1),lt[I]=V=F.get(I)),(I=V)&&dt.set(I,$)}}if(h=dt.get(l)||0)return h;if(Jt.length)h=Jt.pop();else{try{F.grow(1)}catch(J){throw J instanceof RangeError?"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.":J}h=F.length-1}try{$=h,F.set($,l),lt[$]=F.get($)}catch(J){if(!(J instanceof TypeError))throw J;if(typeof WebAssembly.Function=="function"){$=WebAssembly.Function,I={i:"i32",j:"i64",f:"f32",d:"f64",p:"i32"},V={parameters:[],results:p[0]=="v"?[]:[I[p[0]]]};for(var U=1;U<p.length;++U)V.parameters.push(I[p[U]]);p=new $(V,l)}else{for($=[1],I=p.slice(0,1),p=p.slice(1),V={i:127,p:127,j:126,f:125,d:124},$.push(96),U=p.length,128>U?$.push(U):$.push(U%128|128,U>>7),U=0;U<p.length;++U)$.push(V[p[U]]);I=="v"?$.push(0):$.push(1,V[I]),p=[0,97,115,109,1,0,0,0,1],I=$.length,128>I?p.push(I):p.push(I%128|128,I>>7),p.push.apply(p,$),p.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),p=new WebAssembly.Module(new Uint8Array(p)),p=new WebAssembly.Instance(p,{e:{f:l}}).exports.f}$=h,F.set($,p),lt[$]=F.get($)}return dt.set(l,h),h}var Ar={n:function(l,p,h){return Cr(async()=>{await r.Sa(l,p,h)})},a:function(l,p,h){throw l>>>=0,new wr(l).Ma(p>>>0,h>>>0),Gt=l,Ze++,Gt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},F:function(){},m:function(){},A:function(){},x:function(){},I:function(){},y:function(){},M:()=>!0,q:function(l,p,h){l=p+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*p:NaN,h>>>=0,l=new Date(1e3*l),k[h>>2>>>0]=l.getUTCSeconds(),k[h+4>>2>>>0]=l.getUTCMinutes(),k[h+8>>2>>>0]=l.getUTCHours(),k[h+12>>2>>>0]=l.getUTCDate(),k[h+16>>2>>>0]=l.getUTCMonth(),k[h+20>>2>>>0]=l.getUTCFullYear()-1900,k[h+24>>2>>>0]=l.getUTCDay(),k[h+28>>2>>>0]=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(l,p,h){l=p+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*p:NaN,h>>>=0,l=new Date(1e3*l),k[h>>2>>>0]=l.getSeconds(),k[h+4>>2>>>0]=l.getMinutes(),k[h+8>>2>>>0]=l.getHours(),k[h+12>>2>>>0]=l.getDate(),k[h+16>>2>>>0]=l.getMonth(),k[h+20>>2>>>0]=l.getFullYear()-1900,k[h+24>>2>>>0]=l.getDay(),k[h+28>>2>>>0]=(mt(l.getFullYear())?ut:Pt)[l.getMonth()]+l.getDate()-1|0,k[h+36>>2>>>0]=-(60*l.getTimezoneOffset()),p=new Date(l.getFullYear(),6,1).getTimezoneOffset();var $=new Date(l.getFullYear(),0,1).getTimezoneOffset();k[h+32>>2>>>0]=(p!=$&&l.getTimezoneOffset()==Math.min($,p))|0},s:function(l){l>>>=0;var p=new Date(k[l+20>>2>>>0]+1900,k[l+16>>2>>>0],k[l+12>>2>>>0],k[l+8>>2>>>0],k[l+4>>2>>>0],k[l>>2>>>0],0),h=k[l+32>>2>>>0],$=p.getTimezoneOffset(),I=new Date(p.getFullYear(),6,1).getTimezoneOffset(),V=new Date(p.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(V,I);return 0>h?k[l+32>>2>>>0]=+(I!=V&&U==$):0<h!=(U==$)&&(I=Math.max(V,I),p.setTime(p.getTime()+6e4*((0<h?U:I)-$))),k[l+24>>2>>>0]=p.getDay(),k[l+28>>2>>>0]=(mt(p.getFullYear())?ut:Pt)[p.getMonth()]+p.getDate()-1|0,k[l>>2>>>0]=p.getSeconds(),k[l+4>>2>>>0]=p.getMinutes(),k[l+8>>2>>>0]=p.getHours(),k[l+12>>2>>>0]=p.getDate(),k[l+16>>2>>>0]=p.getMonth(),k[l+20>>2>>>0]=p.getYear(),l=p.getTime()/1e3,er((Ge=l,1<=+Math.abs(Ge)?0<Ge?+Math.floor(Ge/4294967296)>>>0:~~+Math.ceil((Ge-+(~~Ge>>>0))/4294967296)>>>0:0)),l>>>0},o:function(){return-52},p:function(){},v:function(l,p,h){function $(Y){return(Y=Y.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Y[1]:"GMT"}h>>>=0;var I=new Date().getFullYear(),V=new Date(I,0,1),U=new Date(I,6,1);I=V.getTimezoneOffset();var J=U.getTimezoneOffset();K[l>>>0>>2>>>0]=60*Math.max(I,J),k[p>>>0>>2>>>0]=+(I!=J),l=$(V),p=$(U),l=$t(l),p=$t(p),J<I?(K[h>>2>>>0]=l,K[h+4>>2>>>0]=p):(K[h>>2>>>0]=p,K[h+4>>2>>>0]=l)},e:()=>{G("")},b:function(l,p,h){return l>>>=0,p=Ft(p>>>0,h>>>0),He[l].apply(null,p)},j:function(l,p,h){return l>>>=0,p=Ft(p>>>0,h>>>0),He[l].apply(null,p)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(l,p,h){return p>>>=0,le.copyWithin(l>>>0>>>0,p>>>0,p+(h>>>0)>>>0)},u:function(l){l>>>=0;var p=le.length;if(4294901760<l)return!1;for(var h=1;4>=h;h*=2){var $=p*(1+.2/h);$=Math.min($,l+100663296);var I=Math;$=Math.max(l,$);e:{I=I.min.call(I,4294901760,$+(65536-$%65536)%65536)-W.buffer.byteLength+65535>>>16;try{W.grow(I),we();var V=1;break e}catch{}V=void 0}if(V)return!0}return!1},D:function(l,p){l>>>=0,p>>>=0;var h=0;return Ht().forEach(function($,I){var V=p+h;for(I=K[l+4*I>>2>>>0]=V,V=0;V<$.length;++V)X[I++>>0>>>0]=$.charCodeAt(V);X[I>>0>>>0]=0,h+=$.length+1}),0},E:function(l,p){l>>>=0,p>>>=0;var h=Ht();K[l>>2>>>0]=h.length;var $=0;return h.forEach(function(I){$+=I.length+1}),K[p>>2>>>0]=$,0},f:()=>52,l:function(){return 52},t:function(){return 70},k:function(l,p,h,$){p>>>=0,h>>>=0,$>>>=0;for(var I=0,V=0;V<h;V++){var U=K[p>>2>>>0],J=K[p+4>>2>>>0];p+=8;for(var Y=0;Y<J;Y++){var ee=le[U+Y>>>0],Z=Ve[l];ee===0||ee===10?((l===1?A:_)(st(Z,0)),Z.length=0):Z.push(ee)}I+=J}return K[$>>2>>>0]=I,0},G:St,d:function(l,p,h,$){return St(l>>>0,p>>>0,h>>>0,$>>>0)},i:function(l,p,h,$){let I=F.length;l=new Uint8Array(le.slice(l+p,l+h));try{var V=new WebAssembly.Module(l),U=new WebAssembly.Instance(V,{env:{memory:W}}),J;for(J in U.exports)Zt(U.exports[J]);return I<F.length?I:$}catch(Y){return console.log(Y),$}}};(function(){function l(h){if(h=h.exports,h=an(h),R=h=Ir(h),W=R.N,we(),F=R.sa,Te.unshift(R.O),Ue--,r.monitorRunDependencies&&r.monitorRunDependencies(Ue),Ue==0&&(Le!==null&&(clearInterval(Le),Le=null),Fe)){var $=Fe;Fe=null,$()}return h}var p={a:Ar};if(Ue++,r.monitorRunDependencies&&r.monitorRunDependencies(Ue),r.instantiateWasm)try{return r.instantiateWasm(p,l)}catch(h){_("Module.instantiateWasm callback failed with error: "+h),n(h)}return Je(p,function(h){l(h.instance)}).catch(n),{}})(),r._OrtInit=(l,p)=>(r._OrtInit=R.P)(l,p),r._OrtGetLastError=(l,p)=>(r._OrtGetLastError=R.Q)(l,p),r._OrtCreateSessionOptions=(l,p,h,$,I,V,U,J,Y,ee)=>(r._OrtCreateSessionOptions=R.R)(l,p,h,$,I,V,U,J,Y,ee),r._OrtAppendExecutionProvider=(l,p)=>(r._OrtAppendExecutionProvider=R.S)(l,p),r._OrtAddFreeDimensionOverride=(l,p,h)=>(r._OrtAddFreeDimensionOverride=R.T)(l,p,h),r._OrtAddSessionConfigEntry=(l,p,h)=>(r._OrtAddSessionConfigEntry=R.U)(l,p,h),r._OrtReleaseSessionOptions=l=>(r._OrtReleaseSessionOptions=R.V)(l),r._OrtCreateSession=(l,p,h)=>(r._OrtCreateSession=R.W)(l,p,h),r._OrtReleaseSession=l=>(r._OrtReleaseSession=R.X)(l),r._OrtGetInputOutputCount=(l,p,h)=>(r._OrtGetInputOutputCount=R.Y)(l,p,h),r._OrtGetInputName=(l,p)=>(r._OrtGetInputName=R.Z)(l,p),r._OrtGetOutputName=(l,p)=>(r._OrtGetOutputName=R._)(l,p),r._OrtFree=l=>(r._OrtFree=R.$)(l),r._OrtCreateTensor=(l,p,h,$,I,V)=>(r._OrtCreateTensor=R.aa)(l,p,h,$,I,V),r._OrtGetTensorData=(l,p,h,$,I)=>(r._OrtGetTensorData=R.ba)(l,p,h,$,I),r._OrtReleaseTensor=l=>(r._OrtReleaseTensor=R.ca)(l),r._OrtCreateRunOptions=(l,p,h,$)=>(r._OrtCreateRunOptions=R.da)(l,p,h,$),r._OrtAddRunConfigEntry=(l,p,h)=>(r._OrtAddRunConfigEntry=R.ea)(l,p,h),r._OrtReleaseRunOptions=l=>(r._OrtReleaseRunOptions=R.fa)(l),r._OrtCreateBinding=l=>(r._OrtCreateBinding=R.ga)(l),r._OrtBindInput=(l,p,h)=>(r._OrtBindInput=R.ha)(l,p,h),r._OrtBindOutput=(l,p,h,$)=>(r._OrtBindOutput=R.ia)(l,p,h,$),r._OrtClearBoundOutputs=l=>(r._OrtClearBoundOutputs=R.ja)(l),r._OrtReleaseBinding=l=>(r._OrtReleaseBinding=R.ka)(l),r._OrtRunWithBinding=(l,p,h,$,I)=>(r._OrtRunWithBinding=R.la)(l,p,h,$,I),r._OrtRun=(l,p,h,$,I,V,U,J)=>(r._OrtRun=R.ma)(l,p,h,$,I,V,U,J),r._OrtEndProfiling=l=>(r._OrtEndProfiling=R.na)(l),r._JsepOutput=(l,p,h)=>(r._JsepOutput=R.oa)(l,p,h),r._JsepGetNodeName=l=>(r._JsepGetNodeName=R.pa)(l);var Wt=r._malloc=l=>(Wt=r._malloc=R.qa)(l),Qt=r._free=l=>(Qt=r._free=R.ra)(l),er=l=>(er=R.ta)(l),zt=()=>(zt=R.ua)(),It=l=>(It=R.va)(l),ct=l=>(ct=R.wa)(l),tr=l=>(tr=R.ya)(l),rr=()=>(rr=R.za)(),nr=l=>(nr=R.Aa)(l),or=()=>(or=R.Ba)();r.___start_em_js=927291,r.___stop_em_js=928064;function Ir(l){l=Object.assign({},l);var p=$=>()=>$()>>>0,h=$=>I=>$(I)>>>0;return l.__errno_location=p(l.__errno_location),l.malloc=h(l.malloc),l.stackSave=p(l.stackSave),l.stackAlloc=h(l.stackAlloc),l}r.stackAlloc=ct,r.stackSave=zt,r.stackRestore=It,r.addFunction=Zt,r.UTF8ToString=ze,r.stringToUTF8=(l,p,h)=>Rt(l,le,p,h),r.lengthBytesUTF8=Lt;var ht;Fe=function l(){ht||ar(),ht||(Fe=l)};function ar(){function l(){if(!ht&&(ht=!0,r.calledRun=!0,!M)){if(it(Te),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var p=r.postRun.shift();Ae.unshift(p)}it(Ae)}}if(!(0<Ue)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Ee();it(Se),0<Ue||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),l()},1)):l())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return ar(),t.ready}})();typeof fo=="object"&&typeof bn=="object"?bn.exports=po:typeof define=="function"&&define.amd&&define([],()=>po)});var ho=sr(()=>{});var go=sr(()=>{});var yo={};Pr(yo,{cpus:()=>Mu});var Mu,bo=j(()=>{Mu=void 0});var $o=sr((vo,wn)=>{"use strict";var wo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return we.buffer!=Ee.buffer&&de(),Ee}function a(){return we.buffer!=Ee.buffer&&de(),Ue}function n(){return we.buffer!=Ee.buffer&&de(),Le}function s(){return we.buffer!=Ee.buffer&&de(),Fe}function u(){return we.buffer!=Ee.buffer&&de(),G}function d(){return we.buffer!=Ee.buffer&&de(),ce}var o=t,m,g;o.ready=new Promise((i,c)=>{m=i,g=c}),o.jsepInit=(i,c,f,v,E,P,N,oe)=>{o.Qb=i,o.wb=c,o.yb=f,o.jb=v,o.xb=E,o.Ea=P,o.zb=N,o.Ab=oe,c=(te,Q,ne)=>(...he)=>{let be=Qe,O=Q?.();he=te(...he);let ue=Q?.();return O!==ue&&(te=ue,ne(O),Q=ne=null),Qe!=be?wu():he},f=te=>async(...Q)=>{try{if(o.bb)throw Error("Session already started");let ne=o.bb={Fb:Q[0],errors:[]},he=await te(...Q);if(o.bb!==ne)throw Error("Session mismatch");i.flush();let be=ne.errors;if(0<be.length){let O=await Promise.all(be);if(O=O.filter(ue=>ue),0<O.length)throw Error(O.join(`\n`))}return he}finally{o.bb=null}},o._OrtRun=f(c(o._OrtRun,()=>o._OrtRun,te=>o._OrtRun=te)),o._OrtRunWithBinding=f(c(o._OrtRunWithBinding,()=>o._OrtRunWithBinding,te=>o._OrtRunWithBinding=te)),o._OrtBindInput=c(o._OrtBindInput,()=>o._OrtBindInput,te=>o._OrtBindInput=te),o.jsepRegisterBuffer=(te,Q,ne,he)=>i.registerBuffer(te,Q,ne,he),o.jsepUnregisterBuffers=te=>{i.unregisterBuffers(te)},o.jsepGetBuffer=te=>i.getBuffer(te),o.jsepCreateDownloader=(te,Q,ne)=>i.createDownloader(te,Q,ne)};var S=Object.assign({},o),b="./this.program",y=(i,c)=>{throw c},x=typeof window=="object",w=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=o.ENVIRONMENT_IS_PTHREAD||!1,_="";function z(i){return o.locateFile?o.locateFile(i,_):_+i}var D,W,R;if(C){var M=(hn(),Vt(mn)),H=(yn(),Vt(gn));_=w?H.dirname(_)+"/":__dirname+"/",D=(c,f)=>(c=c.startsWith("file://")?new URL(c):H.normalize(c),M.readFileSync(c,f?void 0:"utf8")),R=c=>(c=D(c,!0),c.buffer||(c=new Uint8Array(c)),c),W=(c,f,v,E=!0)=>{c=c.startsWith("file://")?new URL(c):H.normalize(c),M.readFile(c,E?void 0:"utf8",(P,N)=>{P?v(P):f(E?N.buffer:N)})},!o.thisProgram&&1<process.argv.length&&(b=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),y=(c,f)=>{throw process.exitCode=c,f},o.inspect=()=>"[Emscripten Module object]";let i;try{i=ho()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(x||w)&&(w?_=self.location.href:typeof document<"u"&&document.currentScript&&(_=document.currentScript.src),typeof e<"u"&&e&&(_=e),_.indexOf("blob:")!==0?_=_.substr(0,_.replace(/[?#].*/,"").lastIndexOf("/")+1):_="",C||(D=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},w&&(R=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),W=(i,c,f)=>{var v=new XMLHttpRequest;v.open("GET",i,!0),v.responseType="arraybuffer",v.onload=()=>{v.status==200||v.status==0&&v.response?c(v.response):f()},v.onerror=f,v.send(null)}));C&&typeof performance>"u"&&(global.performance=go().performance);var X=console.log.bind(console),le=console.error.bind(console);C&&(X=(...i)=>M.writeSync(1,i.join(" ")+`\n`),le=(...i)=>M.writeSync(2,i.join(" ")+`\n`));var k=o.print||X,K=o.printErr||le;Object.assign(o,S),S=null,o.thisProgram&&(b=o.thisProgram),o.quit&&(y=o.quit);var xe;o.wasmBinary&&(xe=o.wasmBinary);var ae=o.noExitRuntime||!0;typeof WebAssembly!="object"&&Ze("no native wasm support detected");var we,F,Se,Te=!1,Ae,Ee,Ue,Le,Fe,G,ce;function de(){var i=we.buffer;o.HEAP8=Ee=new Int8Array(i),o.HEAP16=new Int16Array(i),o.HEAP32=Le=new Int32Array(i),o.HEAPU8=Ue=new Uint8Array(i),o.HEAPU16=new Uint16Array(i),o.HEAPU32=Fe=new Uint32Array(i),o.HEAPF32=G=new Float32Array(i),o.HEAPF64=ce=new Float64Array(i)}var We=o.INITIAL_MEMORY||16777216;if(5242880<=We||Ze("INITIAL_MEMORY should be larger than STACK_SIZE, was "+We+"! (STACK_SIZE=5242880)"),A)we=o.wasmMemory;else if(o.wasmMemory)we=o.wasmMemory;else if(we=new WebAssembly.Memory({initial:We/65536,maximum:65536,shared:!0}),!(we.buffer instanceof SharedArrayBuffer))throw K("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&K("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");de(),We=we.buffer.byteLength;var Ne=[],Oe=[],Me=[],Je=0;function Ge(){return ae||0<Je}var He=0,vt=null,it=null;function wr(){He++,o.monitorRunDependencies&&o.monitorRunDependencies(He)}function Gt(){if(He--,o.monitorRunDependencies&&o.monitorRunDependencies(He),He==0&&(vt!==null&&(clearInterval(vt),vt=null),it)){var i=it;it=null,i()}}function Ze(i){throw o.onAbort&&o.onAbort(i),i="Aborted("+i+")",K(i),Te=!0,Ae=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),g(i),i}function Ut(i){return i.startsWith("data:application/octet-stream;base64,")}var st;st="ort-wasm-simd-threaded.wasm",Ut(st)||(st=z(st));function ze(i){if(i==st&&xe)return new Uint8Array(xe);if(R)return R(i);throw"both async and sync fetching of the wasm failed"}function Lt(i){if(!xe&&(x||w)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>ze(i));if(W)return new Promise((c,f)=>{W(i,v=>c(new Uint8Array(v)),f)})}return Promise.resolve().then(()=>ze(i))}function Rt(i,c,f){return Lt(i).then(v=>WebAssembly.instantiate(v,c)).then(v=>v).then(f,v=>{K("failed to asynchronously prepare wasm: "+v),Ze(v)})}function mt(i,c){var f=st;return xe||typeof WebAssembly.instantiateStreaming!="function"||Ut(f)||f.startsWith("file://")||C||typeof fetch!="function"?Rt(f,i,c):fetch(f,{credentials:"same-origin"}).then(v=>WebAssembly.instantiateStreaming(v,i).then(c,function(E){return K("wasm streaming compile failed: "+E),K("falling back to ArrayBuffer instantiation"),Rt(f,i,c)}))}var ut,Pt={1427128:i=>{o.Ea("Abs",i,void 0)},1427179:i=>{o.Ea("Neg",i,void 0)},1427230:i=>{o.Ea("Floor",i,void 0)},1427283:i=>{o.Ea("Ceil",i,void 0)},1427335:i=>{o.Ea("Reciprocal",i,void 0)},1427393:i=>{o.Ea("Sqrt",i,void 0)},1427445:i=>{o.Ea("Exp",i,void 0)},1427496:i=>{o.Ea("Erf",i,void 0)},1427547:i=>{o.Ea("Sigmoid",i,void 0)},1427602:i=>{o.Ea("Log",i,void 0)},1427653:i=>{o.Ea("Sin",i,void 0)},1427704:i=>{o.Ea("Cos",i,void 0)},1427755:i=>{o.Ea("Tan",i,void 0)},1427806:i=>{o.Ea("Asin",i,void 0)},1427858:i=>{o.Ea("Acos",i,void 0)},1427910:i=>{o.Ea("Atan",i,void 0)},1427962:i=>{o.Ea("Sinh",i,void 0)},1428014:i=>{o.Ea("Cosh",i,void 0)},1428066:i=>{o.Ea("Asinh",i,void 0)},1428119:i=>{o.Ea("Acosh",i,void 0)},1428172:i=>{o.Ea("Atanh",i,void 0)},1428225:i=>{o.Ea("Tanh",i,void 0)},1428277:i=>{o.Ea("Not",i,void 0)},1428328:(i,c,f)=>{o.Ea("ClipV10",i,{min:c,max:f})},1428400:i=>{o.Ea("Clip",i,void 0)},1428452:(i,c)=>{o.Ea("Elu",i,{alpha:c})},1428510:i=>{o.Ea("Relu",i,void 0)},1428562:(i,c)=>{o.Ea("LeakyRelu",i,{alpha:c})},1428626:(i,c)=>{o.Ea("ThresholdedRelu",i,{alpha:c})},1428696:i=>{o.zb(i)},1428730:(i,c)=>o.Ab(i,c,o.bb.Fb,o.bb.errors),1428842:(i,c)=>{o.Ea("Cast",i,{to:c})},1428900:i=>{o.Ea("Add",i,void 0)},1428951:i=>{o.Ea("Sub",i,void 0)},1429002:i=>{o.Ea("Mul",i,void 0)},1429053:i=>{o.Ea("Div",i,void 0)},1429104:i=>{o.Ea("Pow",i,void 0)},1429155:i=>{o.Ea("Equal",i,void 0)},1429208:i=>{o.Ea("Greater",i,void 0)},1429263:i=>{o.Ea("GreaterOrEqual",i,void 0)},1429325:i=>{o.Ea("Less",i,void 0)},1429377:i=>{o.Ea("LessOrEqual",i,void 0)},1429436:(i,c,f,v,E)=>{o.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1429600:(i,c,f,v,E)=>{o.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1429763:(i,c,f,v,E)=>{o.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1429926:(i,c,f,v,E)=>{o.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1430090:(i,c,f,v,E)=>{o.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1430253:(i,c,f,v,E)=>{o.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1430415:(i,c,f,v,E)=>{o.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1430577:(i,c,f,v,E)=>{o.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1430743:(i,c,f,v,E)=>{o.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1430912:(i,c,f,v,E)=>{o.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1431081:i=>{o.Ea("Where",i,void 0)},1431134:(i,c,f)=>{o.Ea("Transpose",i,{perm:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[]})},1431247:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be)=>{o.Ea("Conv",i,{format:te?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:v,kernel_shape:[E],pads:P?Array.from(n().subarray(N>>>0,N+P>>>0)):[],strides:[oe],w_is_const:()=>!!r()[Q>>>0],activation:Ve(ne),activation_params:he?Array.from(u().subarray(be>>>0,be+he>>>0)):[]})},1431628:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O,ue,ye)=>{o.Ea("Conv",i,{format:he?"NHWC":"NCHW",auto_pad:c,dilations:[f,v],group:E,kernel_shape:[P,N],pads:oe?Array.from(n().subarray(te>>>0,te+oe>>>0)):[],strides:[Q,ne],w_is_const:()=>!!r()[be>>>0],activation:Ve(O),activation_params:ue?Array.from(u().subarray(ye>>>0,ye+ue>>>0)):[]})},1432030:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O,ue)=>{o.Ea("ConvTranspose",i,{format:te?"NHWC":"NCHW",autoPad:c,dilations:[f],group:v,kernel_shape:[E],pads:[P,N],strides:[oe],wIsConst:()=>!!r()[Q>>>0],outputPadding:ne?Array.from(n().subarray(he>>>0,he+ne>>>0)):[],outputShape:be?Array.from(n().subarray(O>>>0,O+be>>>0)):[],activation:Ve(ue)})},1432444:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O)=>{o.Ea("ConvTranspose",i,{format:oe?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:v,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(P>>>0,P+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<Q?Array.from(n().subarray(ne>>>0,ne+Q>>>0)):[],outputShape:0<he?Array.from(n().subarray(be>>>0,be+he>>>0)):[],activation:Ve(O)})},1433001:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O,ue)=>{o.Ea("ConvTranspose",i,{format:te?"NHWC":"NCHW",autoPad:c,dilations:[f],group:v,kernel_shape:[E],pads:[P,N],strides:[oe],wIsConst:()=>!!r()[Q>>>0],outputPadding:ne?Array.from(n().subarray(he>>>0,he+ne>>>0)):[],outputShape:be?Array.from(n().subarray(O>>>0,O+be>>>0)):[],activation:Ve(ue)})},1433415:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O)=>{o.Ea("ConvTranspose",i,{format:oe?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:v,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(P>>>0,P+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<Q?Array.from(n().subarray(ne>>>0,ne+Q>>>0)):[],outputShape:0<he?Array.from(n().subarray(be>>>0,be+he>>>0)):[],activation:Ve(O)})},1433972:(i,c)=>{o.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1434063:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O,ue,ye)=>{o.Ea("AveragePool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:v,storage_order:E,dilations:[P,N],kernel_shape:[oe,te],pads:[Q,ne,he,be],strides:[O,ue]})},1434347:(i,c)=>{o.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1434438:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O,ue,ye)=>{o.Ea("AveragePool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:v,storage_order:E,dilations:[P,N],kernel_shape:[oe,te],pads:[Q,ne,he,be],strides:[O,ue]})},1434722:(i,c)=>{o.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1434809:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O,ue,ye)=>{o.Ea("MaxPool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:v,storage_order:E,dilations:[P,N],kernel_shape:[oe,te],pads:[Q,ne,he,be],strides:[O,ue]})},1435089:(i,c)=>{o.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1435176:(i,c,f,v,E,P,N,oe,te,Q,ne,he,be,O,ue,ye)=>{o.Ea("MaxPool",i,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:v,storage_order:E,dilations:[P,N],kernel_shape:[oe,te],pads:[Q,ne,he,be],strides:[O,ue]})},1435456:(i,c,f,v,E)=>{o.Ea("Gemm",i,{alpha:c,beta:f,transA:v,transB:E})},1435560:i=>{o.Ea("MatMul",i,void 0)},1435614:(i,c,f,v)=>{o.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:v})},1435722:(i,c,f,v)=>{o.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:v})},1435830:(i,c)=>{o.Ea("Softmax",i,{axis:c})},1435893:(i,c)=>{o.Ea("Concat",i,{axis:c})},1435953:(i,c,f,v,E)=>{o.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1436098:i=>{o.Ea("Expand",i,void 0)},1436152:(i,c)=>{o.Ea("Gather",i,{axis:Number(c)})},1436223:(i,c)=>{o.Ea("GatherElements",i,{axis:Number(c)})},1436302:(i,c,f,v,E,P,N,oe,te,Q,ne)=>{o.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray(v>>>0,v+f>>>0)):[],coordinateTransformMode:Ve(E),cubicCoeffA:P,excludeOutside:N,extrapolationValue:oe,keepAspectRatioPolicy:Ve(te),mode:Ve(Q),nearestMode:Ve(ne)})},1436653:(i,c,f,v,E,P,N)=>{o.Ea("Slice",i,{starts:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[],ends:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[],axes:P?Array.from(n().subarray(N>>>0,N+P>>>0)):[]})},1436884:i=>{o.Ea("Tile",i,void 0)},1436936:(i,c,f)=>{o.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},1437043:(i,c,f)=>{o.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1437157:(i,c,f)=>{o.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1437271:i=>{o.Ea("Range",i,void 0)},1437324:(i,c)=>{o.Ea("Einsum",i,{equation:Ve(c)})},1437405:(i,c,f,v,E)=>{o.Ea("Pad",i,{mode:c,value:f,pads:v?Array.from(n().subarray(E>>>0,E+v>>>0)):[]})},1437537:i=>{o.Ea("Gelu",i,void 0)},1437589:i=>{o.Ea("BiasAdd",i,void 0)},1437644:i=>{o.Ea("BiasSplitGelu",i,void 0)},1437705:(i,c)=>{o.Ea("SkipLayerNormalization",i,{epsilon:c})},1437786:i=>o.wb(i),1437819:i=>o.yb(i),1437851:(i,c,f)=>{o.jb(i,c,f,!0)},1437890:(i,c,f)=>{o.jb(i,c,f)}};function $t(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function xt(i){i.terminate(),i.onmessage=()=>{}}function Ft(i){(i=ie.Qa[i])||Ze(),ie.Eb(i)}function Mt(i){var c=ie.tb();if(!c)return 6;ie.Ya.push(c),ie.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return C&&c.unref(),c.postMessage(f,i.Mb),0}var Ht=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,kt=(i,c,f)=>{c>>>=0;var v=c+f;for(f=c;i[f]&&!(f>=v);)++f;if(16<f-c&&i.buffer&&Ht)return Ht.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for(v="";c<f;){var E=i[c++];if(E&128){var P=i[c++]&63;if((E&224)==192)v+=String.fromCharCode((E&31)<<6|P);else{var N=i[c++]&63;E=(E&240)==224?(E&15)<<12|P<<6|N:(E&7)<<18|P<<12|N<<6|i[c++]&63,65536>E?v+=String.fromCharCode(E):(E-=65536,v+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else v+=String.fromCharCode(E)}return v},Ve=(i,c)=>(i>>>=0)?kt(a(),i,c):"";function jt(i){if(A)return p(1,1,i);Ae=i,Ge()||(ie.Hb(),o.onExit&&o.onExit(i),Te=!0),y(i,new $t(i))}var Bt=i=>{if(Ae=i,A)throw Ct(i),"unwind";jt(i)},ie={ab:[],Ya:[],mb:[],Qa:{},gb:function(){A?ie.vb():ie.ub()},ub:function(){Ne.unshift(()=>{wr(),ie.Bb(()=>Gt())})},vb:function(){ie.receiveObjectTransfer=ie.Db,ie.threadInitTLS=ie.lb,ie.setExitStatus=ie.kb,ae=!1},kb:function(i){Ae=i},Sb:["$terminateWorker"],Hb:function(){for(var i of ie.Ya)xt(i);for(i of ie.ab)xt(i);ie.ab=[],ie.Ya=[],ie.Qa=[]},Eb:function(i){var c=i.Xa;delete ie.Qa[c],ie.ab.push(i),ie.Ya.splice(ie.Ya.indexOf(i),1),i.Xa=0,ln(c)},Db:function(){},lb:function(){ie.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=P=>{P=P.data;var N=P.cmd;if(P.targetThread&&P.targetThread!=Or()){var oe=ie.Qa[P.Rb];oe?oe.postMessage(P,P.transferList):K(\'Internal error! Worker sent a message "\'+N+\'" to target pthread \'+P.targetThread+", but that thread no longer exists!")}else N==="checkMailbox"?It():N==="spawnThread"?Mt(P):N==="cleanupThread"?Ft(P.thread):N==="killThread"?(P=P.thread,N=ie.Qa[P],delete ie.Qa[P],xt(N),ln(P),ie.Ya.splice(ie.Ya.indexOf(N),1),N.Xa=0):N==="cancelThread"?ie.Qa[P.thread].postMessage({cmd:"cancel"}):N==="loaded"?(i.loaded=!0,c(i)):N==="alert"?alert("Thread "+P.threadId+": "+P.text):P.target==="setimmediate"?i.postMessage(P):N==="callHandler"?o[P.handler](...P.args):N&&K("worker sent an unknown command "+N)},i.onerror=P=>{throw K("worker sent an error! "+P.filename+":"+P.lineno+": "+P.message),P},C&&(i.on("message",function(P){i.onmessage({data:P})}),i.on("error",function(P){i.onerror(P)}));var f=[],v=["onExit","onAbort","print","printErr"],E;for(E of v)o.hasOwnProperty(E)&&f.push(E);i.postMessage({cmd:"load",handlers:f,urlOrBlob:o.mainScriptUrlOrBlob||e,wasmMemory:we,wasmModule:Se})}),Bb:function(i){i()},qb:function(){var i=z("ort-wasm-simd-threaded.worker.js");i=new Worker(i),ie.ab.push(i)},tb:function(){return ie.ab.length==0&&(ie.qb(),ie.Cb(ie.ab[0])),ie.ab.pop()}};o.PThread=ie;var St=i=>{for(;0<i.length;)i.shift()(o)};o.establishStackSpace=function(){var i=Or(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],no(c,c-i),_r(c)};function Ct(i){if(A)return p(2,0,i);Bt(i)}o.invokeEntryPoint=function(i,c){i=oo.apply(null,[i,c]),Ge()?ie.kb(i):dn(i)};function an(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,f){this.nb(),this.pb(c),this.ob(f)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var qe=0,je=0;function Kt(i,c,f,v){return A?p(3,1,i,c,f,v):At(i,c,f,v)}function At(i,c,f,v){if(i>>>=0,c>>>=0,f>>>=0,v>>>=0,typeof SharedArrayBuffer>"u")return K("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var E=[];return A&&E.length===0?Kt(i,c,f,v):(i={Gb:f,Xa:i,rb:v,Mb:E},A?(i.Ob="spawnThread",postMessage(i,E),0):Mt(i))}function qt(i,c,f){return A?p(4,1,i,c,f):0}function Yt(i,c){if(A)return p(5,1,i,c)}var Xt=i=>{for(var c=0,f=0;f<i.length;++f){var v=i.charCodeAt(f);127>=v?c++:2047>=v?c+=2:55296<=v&&57343>=v?(c+=4,++f):c+=3}return c},Dt=(i,c,f,v)=>{if(f>>>=0,!(0<v))return 0;var E=f;v=f+v-1;for(var P=0;P<i.length;++P){var N=i.charCodeAt(P);if(55296<=N&&57343>=N){var oe=i.charCodeAt(++P);N=65536+((N&1023)<<10)|oe&1023}if(127>=N){if(f>=v)break;c[f++>>>0]=N}else{if(2047>=N){if(f+1>=v)break;c[f++>>>0]=192|N>>6}else{if(65535>=N){if(f+2>=v)break;c[f++>>>0]=224|N>>12}else{if(f+3>=v)break;c[f++>>>0]=240|N>>18,c[f++>>>0]=128|N>>12&63}c[f++>>>0]=128|N>>6&63}c[f++>>>0]=128|N&63}}return c[f>>>0]=0,f-E},vr=(i,c,f)=>Dt(i,a(),c,f);function $r(i,c){if(A)return p(6,1,i,c)}function xr(i,c,f){if(A)return p(7,1,i,c,f)}function Sr(i,c,f){return A?p(8,1,i,c,f):0}function Cr(i,c){if(A)return p(9,1,i,c)}function lt(i,c,f){if(A)return p(10,1,i,c,f)}function dt(i,c,f,v){if(A)return p(11,1,i,c,f,v)}function Jt(i,c,f,v){if(A)return p(12,1,i,c,f,v)}function Zt(i,c,f,v){if(A)return p(13,1,i,c,f,v)}function Ar(i){if(A)return p(14,1,i)}function Wt(i,c){if(A)return p(15,1,i,c)}function Qt(i,c,f){if(A)return p(16,1,i,c,f)}var er=i=>{if(!Te)try{if(i(),!Ge())try{A?dn(Ae):Bt(Ae)}catch(c){c instanceof $t||c=="unwind"||y(1,c)}}catch(c){c instanceof $t||c=="unwind"||y(1,c)}};function zt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(It),i+=128,Atomics.store(n(),i>>2,1))}o.__emscripten_thread_mailbox_await=zt;function It(){var i=Or();i&&(zt(i),er(()=>to()))}o.checkMailbox=It;var ct=i=>i%4===0&&(i%100!==0||i%400===0),tr=[0,31,60,91,121,152,182,213,244,274,305,335],rr=[0,31,59,90,120,151,181,212,243,273,304,334];function nr(i,c,f,v,E,P,N,oe){return A?p(17,1,i,c,f,v,E,P,N,oe):-52}function or(i,c,f,v,E,P,N){if(A)return p(18,1,i,c,f,v,E,P,N)}var Ir=i=>{var c=Xt(i)+1,f=un(c);return f&&vr(i,f,c),f},ht=[],ar=(i,c)=>{ht.length=0;var f;for(c>>=2;f=a()[i++>>>0];)c+=f!=105&c,ht.push(f==105?n()[c>>>0]:d()[c++>>>1]),++c;return ht},l=i=>{var c=cn();return i=i(),_r(c),i};function p(i,c){var f=arguments.length-2,v=arguments;return l(()=>{for(var E=pn(8*f),P=E>>3,N=0;N<f;N++){var oe=v[2+N];d()[P+N>>>0]=oe}return eo(i,f,E,c)})}var h=[],$={},I=()=>{if(!V){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:b||"./this.program"},c;for(c in $)$[c]===void 0?delete i[c]:i[c]=$[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);V=f}return V},V;function U(i,c){if(A)return p(19,1,i,c);i>>>=0,c>>>=0;var f=0;return I().forEach(function(v,E){var P=c+f;for(E=s()[i+4*E>>2>>>0]=P,P=0;P<v.length;++P)r()[E++>>0>>>0]=v.charCodeAt(P);r()[E>>0>>>0]=0,f+=v.length+1}),0}function J(i,c){if(A)return p(20,1,i,c);i>>>=0,c>>>=0;var f=I();s()[i>>2>>>0]=f.length;var v=0;return f.forEach(function(E){v+=E.length+1}),s()[c>>2>>>0]=v,0}function Y(i){return A?p(21,1,i):52}function ee(i,c,f,v){return A?p(22,1,i,c,f,v):52}function Z(i,c,f,v,E){return A?p(23,1,i,c,f,v,E):70}var pe=[null,[],[]];function fe(i,c,f,v){if(A)return p(24,1,i,c,f,v);c>>>=0,f>>>=0,v>>>=0;for(var E=0,P=0;P<f;P++){var N=s()[c>>2>>>0],oe=s()[c+4>>2>>>0];c+=8;for(var te=0;te<oe;te++){var Q=a()[N+te>>>0],ne=pe[i];Q===0||Q===10?((i===1?k:K)(kt(ne,0)),ne.length=0):ne.push(Q)}E+=oe}return s()[v>>2>>>0]=E,0}var T=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function me(i){var c=Array(Xt(i)+1);return Dt(i,c,0,c.length),c}var pt=(i,c)=>{r().set(i,c>>>0)};function ir(i,c,f,v){function E(O,ue,ye){for(O=typeof O=="number"?O.toString():O||"";O.length<ue;)O=ye[0]+O;return O}function P(O,ue){return E(O,ue,"0")}function N(O,ue){function ye(co){return 0>co?-1:0<co?1:0}var Et;return(Et=ye(O.getFullYear()-ue.getFullYear()))===0&&(Et=ye(O.getMonth()-ue.getMonth()))===0&&(Et=ye(O.getDate()-ue.getDate())),Et}function oe(O){switch(O.getDay()){case 0:return new Date(O.getFullYear()-1,11,29);case 1:return O;case 2:return new Date(O.getFullYear(),0,3);case 3:return new Date(O.getFullYear(),0,2);case 4:return new Date(O.getFullYear(),0,1);case 5:return new Date(O.getFullYear()-1,11,31);case 6:return new Date(O.getFullYear()-1,11,30)}}function te(O){var ue=O.Za;for(O=new Date(new Date(O.$a+1900,0,1).getTime());0<ue;){var ye=O.getMonth(),Et=(ct(O.getFullYear())?T:re)[ye];if(ue>Et-O.getDate())ue-=Et-O.getDate()+1,O.setDate(1),11>ye?O.setMonth(ye+1):(O.setMonth(0),O.setFullYear(O.getFullYear()+1));else{O.setDate(O.getDate()+ue);break}}return ye=new Date(O.getFullYear()+1,0,4),ue=oe(new Date(O.getFullYear(),0,4)),ye=oe(ye),0>=N(ue,O)?0>=N(ye,O)?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,v>>>=0;var Q=n()[v+40>>2>>>0];v={Kb:n()[v>>2>>>0],Jb:n()[v+4>>2>>>0],cb:n()[v+8>>2>>>0],ib:n()[v+12>>2>>>0],eb:n()[v+16>>2>>>0],$a:n()[v+20>>2>>>0],Wa:n()[v+24>>2>>>0],Za:n()[v+28>>2>>>0],Tb:n()[v+32>>2>>>0],Ib:n()[v+36>>2>>>0],Lb:Q?Ve(Q):""},f=Ve(f),Q={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ne in Q)f=f.replace(new RegExp(ne,"g"),Q[ne]);var he="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),be="January February March April May June July August September October November December".split(" ");Q={"%a":O=>he[O.Wa].substring(0,3),"%A":O=>he[O.Wa],"%b":O=>be[O.eb].substring(0,3),"%B":O=>be[O.eb],"%C":O=>P((O.$a+1900)/100|0,2),"%d":O=>P(O.ib,2),"%e":O=>E(O.ib,2," "),"%g":O=>te(O).toString().substring(2),"%G":O=>te(O),"%H":O=>P(O.cb,2),"%I":O=>(O=O.cb,O==0?O=12:12<O&&(O-=12),P(O,2)),"%j":O=>{for(var ue=0,ye=0;ye<=O.eb-1;ue+=(ct(O.$a+1900)?T:re)[ye++]);return P(O.ib+ue,3)},"%m":O=>P(O.eb+1,2),"%M":O=>P(O.Jb,2),"%n":()=>`\n`,"%p":O=>0<=O.cb&&12>O.cb?"AM":"PM","%S":O=>P(O.Kb,2),"%t":()=>"	","%u":O=>O.Wa||7,"%U":O=>P(Math.floor((O.Za+7-O.Wa)/7),2),"%V":O=>{var ue=Math.floor((O.Za+7-(O.Wa+6)%7)/7);if(2>=(O.Wa+371-O.Za-2)%7&&ue++,ue)ue==53&&(ye=(O.Wa+371-O.Za)%7,ye==4||ye==3&&ct(O.$a)||(ue=1));else{ue=52;var ye=(O.Wa+7-O.Za-1)%7;(ye==4||ye==5&&ct(O.$a%400-1))&&ue++}return P(ue,2)},"%w":O=>O.Wa,"%W":O=>P(Math.floor((O.Za+7-(O.Wa+6)%7)/7),2),"%y":O=>(O.$a+1900).toString().substring(2),"%Y":O=>O.$a+1900,"%z":O=>{O=O.Ib;var ue=0<=O;return O=Math.abs(O)/60,(ue?"+":"-")+("0000"+(O/60*100+O%60)).slice(-4)},"%Z":O=>O.Lb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(ne in Q)f.includes(ne)&&(f=f.replace(new RegExp(ne,"g"),Q[ne](v)));return f=f.replace(/\\0\\0/g,"%"),ne=me(f),ne.length>c?0:(pt(ne,i),ne.length-1)}function Er(i){try{i()}catch(c){Ze(c)}}function gu(i){var c={},f;for(f in i)(function(v){var E=i[v];c[v]=typeof E=="function"?function(){Tr.push(v);try{return E.apply(null,arguments)}finally{Te||(Tr.pop()===v||Ze(),Qe&&gt===1&&Tr.length===0&&(gt=0,Je+=1,Er(io),typeof Fibers<"u"&&Fibers.Ub()))}}:E})(f);return c}var gt=0,Qe=null,Yn=0,Tr=[],Xn={},Jn={},yu=0,sn=null,bu=[];function wu(){return new Promise((i,c)=>{sn={resolve:i,reject:c}})}function vu(){var i=un(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=Tr[0];var f=Xn[c];return f===void 0&&(f=yu++,Xn[c]=f,Jn[f]=c),c=f,n()[i+8>>2>>>0]=c,i}function $u(){var i=n()[Qe+8>>2>>>0];return i=F[Jn[i]],--Je,i()}function xu(i){if(!Te){if(gt===0){var c=!1,f=!1;i((v=0)=>{if(!Te&&(Yn=v,c=!0,f)){gt=2,Er(()=>so(Qe)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),v=!1;try{var E=$u()}catch(oe){E=oe,v=!0}var P=!1;if(!Qe){var N=sn;N&&(sn=null,(v?N.reject:N.resolve)(E),P=!0)}if(v&&!P)throw E}}),f=!0,c||(gt=1,Qe=vu(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Er(()=>ao(Qe)))}else gt===2?(gt=0,Er(uo),Zn(Qe),Qe=null,bu.forEach(v=>er(v))):Ze(`invalid state: ${gt}`);return Yn}}function Su(i){return xu(c=>{i().then(c)})}ie.gb();var Cu=[null,jt,Ct,Kt,qt,Yt,$r,xr,Sr,Cr,lt,dt,Jt,Zt,Ar,Wt,Qt,nr,or,U,J,Y,ee,Z,fe],Au={r:function(i,c,f){return Su(async()=>{await o.xb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new an(i).gb(c>>>0,f>>>0),qe=i,je++,qe},P:function(i){Qn(i>>>0,!w,1,!x,131072,!1),ie.lb()},n:function(i){i>>>=0,A?postMessage({cmd:"cleanupThread",thread:i}):Ft(i)},K:At,g:qt,V:Yt,F:$r,H:xr,y:Sr,T:Cr,L:lt,S:dt,p:Jt,G:Zt,D:Ar,U:Wt,E:Qt,q:()=>!0,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>It()):A?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=ie.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:zt,X:function(i){C&&ie.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getUTCSeconds(),n()[f+4>>2>>>0]=i.getUTCMinutes(),n()[f+8>>2>>>0]=i.getUTCHours(),n()[f+12>>2>>>0]=i.getUTCDate(),n()[f+16>>2>>>0]=i.getUTCMonth(),n()[f+20>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getSeconds(),n()[f+4>>2>>>0]=i.getMinutes(),n()[f+8>>2>>>0]=i.getHours(),n()[f+12>>2>>>0]=i.getDate(),n()[f+16>>2>>>0]=i.getMonth(),n()[f+20>>2>>>0]=i.getFullYear()-1900,n()[f+24>>2>>>0]=i.getDay(),c=(ct(i.getFullYear())?tr:rr)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>2>>>0]=c,n()[f+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var v=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=v&&i.getTimezoneOffset()==Math.min(v,c))|0,n()[f+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),f=n()[i+32>>2>>>0],v=c.getTimezoneOffset(),E=new Date(c.getFullYear(),6,1).getTimezoneOffset(),P=new Date(c.getFullYear(),0,1).getTimezoneOffset(),N=Math.min(P,E);return 0>f?n()[i+32>>2>>>0]=+(E!=P&&N==v):0<f!=(N==v)&&(E=Math.max(P,E),c.setTime(c.getTime()+6e4*((0<f?N:E)-v))),n()[i+24>>2>>>0]=c.getDay(),f=(ct(c.getFullYear())?tr:rr)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=f,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,ro((ut=i,1<=+Math.abs(ut)?0<ut?+Math.floor(ut/4294967296)>>>0:~~+Math.ceil((ut-+(~~ut>>>0))/4294967296)>>>0:0)),i>>>0},s:nr,t:or,A:function(i,c,f){function v(Q){return(Q=Q.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Q[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var E=new Date().getFullYear(),P=new Date(E,0,1),N=new Date(E,6,1);E=P.getTimezoneOffset();var oe=N.getTimezoneOffset(),te=Math.max(E,oe);s()[i>>2>>>0]=60*te,n()[c>>2>>>0]=+(E!=oe),i=v(P),c=v(N),i=Ir(i),c=Ir(c),oe<E?(s()[f>>2>>>0]=i,s()[f+4>>2>>>0]=c):(s()[f>>2>>>0]=c,s()[f+4>>2>>>0]=i)},e:()=>{Ze("")},c:function(i,c,f){return i>>>=0,c=ar(c>>>0,f>>>0),Pt[i].apply(null,c)},l:function(i,c,f){return i>>>=0,c=ar(c>>>0,f>>>0),Pt[i].apply(null,c)},o:function(){},k:function(){return Date.now()},W:()=>{throw Je+=1,"unwind"},C:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),j:function(){return C?(bo(),Vt(yo)).cpus().length:navigator.hardwareConcurrency},M:function(i,c,f,v){for(ie.Pb=c>>>0,h.length=f,c=v>>>0>>3,v=0;v<f;v++)h[v]=d()[c+v>>>0];return(0>i?Pt[-i-1]:Cu[i]).apply(null,h)},z:function(i){i>>>=0;var c=a().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var v=c*(1+.2/f);v=Math.min(v,i+100663296);var E=Math;v=Math.max(i,v);e:{E=E.min.call(E,4294901760,v+(65536-v%65536)%65536)-we.buffer.byteLength+65535>>>16;try{we.grow(E),de();var P=1;break e}catch{}P=void 0}if(P)return!0}return!1},Q:U,R:J,J:Bt,h:Y,m:ee,x:Z,i:fe,a:we||o.wasmMemory,I:ir,d:function(i,c,f,v){return ir(i>>>0,c>>>0,f>>>0,v>>>0)}};(function(){function i(f,v){return f=f.exports,f=gu(f),F=f=Iu(f),ie.mb.push(F.Da),Oe.unshift(F.Y),Se=v,Gt(),f}var c={a:Au};if(wr(),o.instantiateWasm)try{return o.instantiateWasm(c,i)}catch(f){K("Module.instantiateWasm callback failed with error: "+f),g(f)}return mt(c,function(f){i(f.instance,f.module)}).catch(g),{}})(),o._OrtInit=(i,c)=>(o._OrtInit=F.Z)(i,c),o._OrtGetLastError=(i,c)=>(o._OrtGetLastError=F._)(i,c),o._OrtCreateSessionOptions=(i,c,f,v,E,P,N,oe,te,Q)=>(o._OrtCreateSessionOptions=F.$)(i,c,f,v,E,P,N,oe,te,Q),o._OrtAppendExecutionProvider=(i,c)=>(o._OrtAppendExecutionProvider=F.aa)(i,c),o._OrtAddFreeDimensionOverride=(i,c,f)=>(o._OrtAddFreeDimensionOverride=F.ba)(i,c,f),o._OrtAddSessionConfigEntry=(i,c,f)=>(o._OrtAddSessionConfigEntry=F.ca)(i,c,f),o._OrtReleaseSessionOptions=i=>(o._OrtReleaseSessionOptions=F.da)(i),o._OrtCreateSession=(i,c,f)=>(o._OrtCreateSession=F.ea)(i,c,f),o._OrtReleaseSession=i=>(o._OrtReleaseSession=F.fa)(i),o._OrtGetInputOutputCount=(i,c,f)=>(o._OrtGetInputOutputCount=F.ga)(i,c,f),o._OrtGetInputName=(i,c)=>(o._OrtGetInputName=F.ha)(i,c),o._OrtGetOutputName=(i,c)=>(o._OrtGetOutputName=F.ia)(i,c),o._OrtFree=i=>(o._OrtFree=F.ja)(i),o._OrtCreateTensor=(i,c,f,v,E,P)=>(o._OrtCreateTensor=F.ka)(i,c,f,v,E,P),o._OrtGetTensorData=(i,c,f,v,E)=>(o._OrtGetTensorData=F.la)(i,c,f,v,E),o._OrtReleaseTensor=i=>(o._OrtReleaseTensor=F.ma)(i),o._OrtCreateRunOptions=(i,c,f,v)=>(o._OrtCreateRunOptions=F.na)(i,c,f,v),o._OrtAddRunConfigEntry=(i,c,f)=>(o._OrtAddRunConfigEntry=F.oa)(i,c,f),o._OrtReleaseRunOptions=i=>(o._OrtReleaseRunOptions=F.pa)(i),o._OrtCreateBinding=i=>(o._OrtCreateBinding=F.qa)(i),o._OrtBindInput=(i,c,f)=>(o._OrtBindInput=F.ra)(i,c,f),o._OrtBindOutput=(i,c,f,v)=>(o._OrtBindOutput=F.sa)(i,c,f,v),o._OrtClearBoundOutputs=i=>(o._OrtClearBoundOutputs=F.ta)(i),o._OrtReleaseBinding=i=>(o._OrtReleaseBinding=F.ua)(i),o._OrtRunWithBinding=(i,c,f,v,E)=>(o._OrtRunWithBinding=F.va)(i,c,f,v,E),o._OrtRun=(i,c,f,v,E,P,N,oe)=>(o._OrtRun=F.wa)(i,c,f,v,E,P,N,oe),o._OrtEndProfiling=i=>(o._OrtEndProfiling=F.xa)(i),o._JsepOutput=(i,c,f)=>(o._JsepOutput=F.ya)(i,c,f),o._JsepGetNodeName=i=>(o._JsepGetNodeName=F.za)(i);var Or=o._pthread_self=()=>(Or=o._pthread_self=F.Aa)(),un=o._malloc=i=>(un=o._malloc=F.Ba)(i),Zn=o._free=i=>(Zn=o._free=F.Ca)(i);o.__emscripten_tls_init=()=>(o.__emscripten_tls_init=F.Da)();var Qn=o.__emscripten_thread_init=(i,c,f,v,E,P)=>(Qn=o.__emscripten_thread_init=F.Fa)(i,c,f,v,E,P);o.__emscripten_thread_crashed=()=>(o.__emscripten_thread_crashed=F.Ga)();var eo=(i,c,f,v)=>(eo=F.Ha)(i,c,f,v),ln=i=>(ln=F.Ia)(i),dn=o.__emscripten_thread_exit=i=>(dn=o.__emscripten_thread_exit=F.Ja)(i),to=o.__emscripten_check_mailbox=()=>(to=o.__emscripten_check_mailbox=F.Ka)(),ro=i=>(ro=F.La)(i),no=(i,c)=>(no=F.Ma)(i,c),cn=()=>(cn=F.Na)(),_r=i=>(_r=F.Oa)(i),pn=i=>(pn=F.Pa)(i),oo=o.dynCall_ii=(i,c)=>(oo=o.dynCall_ii=F.Ra)(i,c),ao=i=>(ao=F.Sa)(i),io=()=>(io=F.Ta)(),so=i=>(so=F.Ua)(i),uo=()=>(uo=F.Va)();o.___start_em_js=1437923,o.___stop_em_js=1438084;function Iu(i){i=Object.assign({},i);var c=v=>()=>v()>>>0,f=v=>E=>v(E)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=f(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=f(i.stackAlloc),i}o.keepRuntimeAlive=Ge,o.wasmMemory=we,o.stackAlloc=pn,o.stackSave=cn,o.stackRestore=_r,o.UTF8ToString=Ve,o.stringToUTF8=vr,o.lengthBytesUTF8=Xt,o.ExitStatus=$t,o.PThread=ie;var Rr;it=function i(){Rr||lo(),Rr||(it=i)};function lo(){function i(){if(!Rr&&(Rr=!0,o.calledRun=!0,!Te)&&(A||St(Oe),m(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!A)){if(o.postRun)for(typeof o.postRun=="function"&&(o.postRun=[o.postRun]);o.postRun.length;){var c=o.postRun.shift();Me.unshift(c)}St(Me)}}if(!(0<He))if(A)m(o),A||St(Oe),startWorker(o);else{if(o.preRun)for(typeof o.preRun=="function"&&(o.preRun=[o.preRun]);o.preRun.length;)Ne.unshift(o.preRun.shift());St(Ne),0<He||(o.setStatus?(o.setStatus("Running..."),setTimeout(function(){setTimeout(function(){o.setStatus("")},1),i()},1)):i())}}if(o.preInit)for(typeof o.preInit=="function"&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return lo(),t.ready}})();typeof vo=="object"&&typeof wn=="object"?wn.exports=wo:typeof define=="function"&&define.amd&&define([],()=>wo)});var xo=sr((bc,ku)=>{ku.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var xn,lr,dr,kr,cr,To,Sn,Be=j(()=>{"use strict";xn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},lr=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},dr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],kr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},cr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},To=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Sn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Br=j(()=>{});var Oo=j(()=>{Br()});var _o,Ro=j(()=>{_o="1.17.0"});var Po,Cn,Mo=j(()=>{Ro();Po="warning",Cn={wasm:{},webgl:{},webgpu:{},versions:{common:_o},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Po=e}},get logLevel(){return Po}};Object.defineProperty(Cn,"logLevel",{enumerable:!0})});var ko,Bo=j(()=>{Mo();ko=Cn});var Do=j(()=>{});var Wo=j(()=>{Dr()});var Vo=j(()=>{});var No=j(()=>{Dr()});var Dr=j(()=>{Do();Wo();Vo();No()});var Wr=j(()=>{Dr()});var Go,Uo,Lo,An=j(()=>{Uo=e=>{Go=e},Lo=e=>{console.timeStamp(`[ORT] ${e}`)}});var Fo=j(()=>{Br();Wr();An()});var Ho=j(()=>{Fo()});var jo=j(()=>{});var Ko=j(()=>{Br();Wr()});var qo=j(()=>{Ko()});var zr=j(()=>{Oo();Bo();Ho();Wr();An();jo();qo()});var Hu,ju,Yo,Xo,Jo,Ku,Ie,yt=j(()=>{"use strict";Be();Hu=["V","I","W","E","F"],ju=(e,t)=>{console.log(`[${Hu[e]},${new Date().toISOString()}]${t}`)},Jo=(e,t)=>{Yo=e,Xo=t},Ku=(e,t)=>{let r=cr(e),a=cr(Yo);r>=a&&ju(r,typeof t=="function"?t():t)},Ie=(...e)=>{Xo&&Ku(...e)}});var Zo,Qo=j(()=>{"use strict";Be();Zo=(e,t)=>new(kr(t))(e)});var ea=j(()=>{"use strict"});var Vr,qu,ta,En,In,ra,na=j(()=>{"use strict";yt();ea();Vr=e=>Math.ceil(e/16)*16,qu=1,ta=()=>qu++,En=async(e,t,r,a)=>{let n=Vr(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(a){let o=a();return o.set(new Uint8Array(d,0,r)),o}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},In=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,s=r.byteLength,u=Vr(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),m=o.getMappedRange();new Uint8Array(m).set(new Uint8Array(a,n,s)),o.unmap();let g=this.backend.getCommandEncoder();this.backend.endComputePass(),g.copyBufferToBuffer(o,0,d.gpuData.buffer,0,u),Ie("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(o)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Vr(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Ie("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=ta();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Ie("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Ie("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=Vr(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let o=s?this.freeBuffers:this.freeUniformBuffers,m=o.get(a);m||(m=[],o.set(a,m)),m.length>0?n=m.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let d={id:ta(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Ie("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Ie("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await En(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},ra=(...e)=>new In(...e)});var Tn,se,Re=j(()=>{"use strict";Tn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this._cacheKey}},se=e=>new Tn(e)});var On,et,B,Tt,Nr,Gr,Ur,ge=j(()=>{"use strict";On=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},et=class{static calcShape(t,r,a=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(a){if(n<2||s<2)return;let o=On.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(o===void 0)return;[d[u-2],d[u-1]]=o}for(let o=a?3:1;o<=u;o++){let m=n-o<0?1:t[n-o],g=s-o<0?1:r[s-o];if(m!==g&&m>1&&g>1)return;d[u-o]=Math.max(m,g)}return d}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let s=1;s<=a;s++)if(t[a-s]!==1&&t[a-s]!==r[n-s])return!1;return!0}},B=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let s=r;s<a;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,s)=>n+r[s]+r[s+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Tt=class e{static adjustPoolAttributes(t,r,a,n,s,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=a.length?a.push(r[d+2]):a[d]=r[d+2];for(let d=0;d<a.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<a.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<a.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<a.length;d++){if(a[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=a[d]||u[d+a.length]>=a[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let o=0;o<t.length-2;o++)e.adjustPadAndReturnShape(t[o+(u?1:2)],r[o],a[o],n[o],s,o,o+t.length-2,d)}}static computePoolOutputShape(t,r,a,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let o=[r[0],r[1]];return e.computeShapeHelper(t,r,o,a,n,s,u,d),o}static computeConvOutputShape(t,r,a,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let o=[t[0],r[0]];return e.computeShapeHelper(!1,t,o,a,n,s,u,d),o}static computeShapeHelper(t,r,a,n,s,u,d,o){if(t)for(let m=0;m<r.length-2;m++)a.push(1);else for(let m=0;m<r.length-2;m++)a.push(e.adjustPadAndReturnShape(r[m+2],n[m],s[m],u[m],d,m,m+r.length-2,o))}static adjustPadAndReturnShape(t,r,a,n,s,u,d,o){let m=a*(n-1)+1;if(o&&o!=="NOTSET")switch(o){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-m)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let S=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(o==="SAME_LOWER"?(S+1)/2:S/2),s[d]=S-s[u],Math.floor((t+S-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-m)/r+1)}},Nr=class{static getShapeOfGemmResult(t,r,a,n,s){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,d,o;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let m=-1;if(n?(o=a[0],m=1):(o=a[1],m=0),a[m]!==d)throw new Error("dimension mismatch");if(u<=0||o<=0||d<=0)throw new Error("invalid shape specified");if(s&&!et.isValidBroadcast(s,[u,o]))throw new Error("gemm: invalid bias shape for broadcast");return[u,o,d]}},Gr=-34028234663852886e22,Ur=34028234663852886e22});var Yu,oa,Pe,Ot,ft,Ye,_t,bt,aa,L,q,_n,ia,Rn,Nt,ve=j(()=>{"use strict";Be();ge();Yu=64,oa=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Pe=(e,t=1)=>{let r=oa(e,t);return typeof r=="string"?r:r[0]},Ot=e=>[{type:"uint32",data:e},{type:"uint32",data:B.computeStrides(e)}],ft=e=>e%4===0?4:e%2===0?2:1,Ye=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,_t=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,bt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,aa=(e,t,r,a,n)=>{let s=typeof r=="number",u=s?r:r.length,d=[...new Array(u).keys()],o=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,m=oa(t,n),g=typeof m=="string"?m:m[1],S=typeof m=="string"?m:m[0],b={indices:o,value:g,storage:S,tensor:t},y=G=>typeof G=="string"?G:`${G}u`,x={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},w=s?"uniforms.":"",C=`${w}${e}_shape`,A=`${w}${e}_strides`,_="";for(let G=0;G<u-1;G++)_+=`\n    let dim${G} = current / ${A}[${G}];\n    let rest${G} = current % ${A}[${G}];\n    indices[${G}] = dim${G};\n    current = rest${G};\n    `;_+=`indices[${u-1}] = current;`;let z=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${b.indices} {\n    var indices: ${b.indices};\n    var current = offset;\n    ${_}\n    return indices;\n  }`,D=G=>(x.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),W=[];if(u>=2)for(let G=u-1;G>=0;G--)W.push(`${A}[${G}] * (indices[${G}])`);let R=u<2?"":`\n  fn i2o_${e}(indices: ${b.indices}) -> u32 {\n    return ${W.join("+")};\n  }`,M=G=>(x.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),H=(...G)=>u===0?"0u":`${b.indices}(${G.map(y).join(",")})`,X=(G,ce)=>u<2?`${G}`:`${G}[${ce}]`,le=(G,ce,de)=>u<2?`${G}=${de};`:`${G}[${ce}]=${de};`,k={},K=(G,ce)=>{x.broadcastedIndicesToOffset=!0;let de=`${ce.name}broadcastedIndicesTo${e}Offset`;if(de in k)return`${de}(${G})`;let We=[];for(let Ne=u-1;Ne>=0;Ne--){let Oe=ce.indicesGet("outputIndices",Ne+ce.rank-u);We.push(`${X(A,Ne)} * (${Oe} % ${X(C,Ne)})`)}return k[de]=`fn ${de}(outputIndices: ${ce.type.indices}) -> u32 {\n             return ${We.length>0?We.join("+"):"0u"};\n           }`,`${de}(${G})`},xe=(G,ce)=>(()=>{if(b.storage===b.value)return`${e}[${G}]=${ce};`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${ce}), select(0u, 0xFFFFFFFFu, ${ce} < 0));`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${ce}), 0u);`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ce}));`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),ae=G=>(()=>{if(b.storage===b.value)return`${e}[${G}]`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`i32(${e}[${G}].x)`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`u32(${e}[${G}].x)`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),we=u<2?"":`\n  fn get_${e}ByIndices(indices: ${b.indices}) -> ${g} {\n    return ${ae(`i2o_${e}(indices)`)};\n  }`,F=u<2?"":(()=>{let G=d.map(de=>`d${de}: u32`).join(", "),ce=d.map(de=>`d${de}`).join(", ");return`\n  fn get_${e}(${G}) -> ${g} {\n    return get_${e}ByIndices(${H(ce)});\n  }`})(),Se=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let ce=G.map(y).join(",");return u===0?ae("0u"):u===1?ae(ce[0]):(x.get=!0,x.getByIndices=!0,x.indicesToOffset=!0,`get_${e}(${ce})`)},Te=G=>u<2?ae(G):(x.getByIndices=!0,x.indicesToOffset=!0,`get_${e}ByIndices(${G})`),Ae=u<2?"":`\n  fn set_${e}ByIndices(indices: ${b.indices}, value: ${g}) {\n    ${xe(`i2o_${e}(indices)`,"value")}\n  }`,Ee=u<2?"":(()=>{let G=d.map(de=>`d${de}: u32`).join(", "),ce=d.map(de=>`d${de}`).join(", ");return`\n  fn set_${e}(${G}, value: ${g}) {\n    set_${e}ByIndices(${H(ce)}, value);\n  }`})();return{impl:()=>{let G=[];return s||(G.push(`const ${C} = ${b.indices}(${r.join(",")});`),G.push(`const ${A} = ${b.indices}(${B.computeStrides(r).join(",")});`)),x.offsetToIndices&&G.push(z),x.indicesToOffset&&G.push(R),x.broadcastedIndicesToOffset&&Object.values(k).forEach(ce=>G.push(ce)),x.set&&G.push(Ee),x.setByIndices&&G.push(Ae),x.get&&G.push(F),x.getByIndices&&G.push(we),G.join(`\n`)},type:b,offsetToIndices:D,indicesToOffset:M,broadcastedIndicesToOffset:K,indices:H,indicesGet:X,indicesSet:le,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let ce=G[u];if(typeof ce!="string")throw new Error("value must be string");let de=G.slice(0,u).map(y).join(",");return u===0?xe("0u",ce):u===1?xe(de[0],ce):(x.set=!0,x.setByIndices=!0,x.indicesToOffset=!0,`set_${e}(${de}, ${ce})`)},setByOffset:xe,setByIndices:(G,ce)=>u<2?xe(G,ce):(x.setByIndices=!0,x.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${ce});`),get:Se,getByOffset:ae,getByIndices:Te,usage:a?"input":"output",name:e,strides:A,shape:C,rank:u}},L=(e,t,r,a=1)=>aa(e,t,r,!0,a),q=(e,t,r,a=1)=>aa(e,t,r,!1,a),_n=class{constructor(t){this.normalizedDispatchGroup=t;this.indicesHelpers=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=Yu){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`,d=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${r*a*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${a}, ${n})\n  fn main(${u}) {\n    ${d}\n  `}declareVariable(t,r){this.indicesHelpers.push(t),t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices});let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a}of this.uniforms)t.push(`${r}:${a}`);return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.indicesHelpers.map(t=>t.impl()).join(`\n`)}},ia=e=>new _n(e),Rn=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(s)}return a},Nt=e=>e<=4&&e>0});var Xu,sa,Ju,Zu,wt,ua,la,pr=j(()=>{"use strict";ge();Re();ve();Xu=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},sa=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Ju=(e,t)=>B.sortBasedOnPerm(e,sa(e.length,t)),Zu=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},wt=(e,t)=>{let r=e.dataType,a=e.dims.length,n=sa(a,t),s=Nt(a),u=Ju(e.dims,n),d=s?u.length:u,o=s?a:e.dims,m=q("output",r,d),g=L("a",r,o),S=b=>`\n  ${b.registerUniform("output_size","u32").declareVariables(g,m)}\n\n  ${Zu(n,a,g,m)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${m.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${m.setByOffset("global_idx",g.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:b=>{let y=B.size(u);return{outputs:[{dims:u,dataType:b[0].dataType}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:s?[{type:"uint32",data:y},...Ot(b[0].dims),...Ot(u)]:[{type:"uint32",data:y}]}},getShaderSource:S}},ua=(e,t)=>{Xu(e.inputs),e.compute(wt(e.inputs[0],t.perm))},la=e=>se({perm:e.perm})});var Qu,el,tl,rl,nl,ol,al,il,sl,ul,tt,da,ca,pa,fa,ma,ha,ga,ya,ba,wa,va=j(()=>{"use strict";ge();ve();Lr();pr();Qu={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},el={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},tl={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},rl={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},nl=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},ol=(e,t)=>{let r=[],a=e.length;for(let s=0;s<a;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},al=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?a.push(e[n++]):a.push(1);return a},il=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},sl=(e,t)=>{let r=[];if(!il(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},ul=(e,t,r,a,n,s,u)=>{let d=r[0].dims,o=B.size(s),m=B.size(u),g=L("_A",r[0].dataType,d),S=q("output",n,s),b=32,y=`\n          var<workgroup> aBestValues : array<${S.type.storage}, ${b}>;\n       `;return{name:e,shaderCache:t,getShaderSource:w=>`\n        ${w.registerUniform("reduceSize","u32").declareVariables(g,S)}\n        ${y}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${w.mainStart(b)}\n          let local_idx = local_id.x;\n\n          let outputIndex = global_idx / ${b};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${S.type.storage}(${tl[a]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${b}) {\n           let candidate = ${S.type.storage}(${g.getByOffset("offset + k")});\n           bestValue = ${Qu[a]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${b}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${el[a]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${S.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${S.type.storage}(uniforms.reduceSize)`:`${rl[a]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:m}]})}},tt=(e,t,r,a)=>{let n=e.inputs.length===1?r:Pn(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((y,x)=>x));let u=B.normalizeAxes(s,e.inputs[0].dims.length),d=u,o=e.inputs[0],m=sl(d,e.inputs[0].dims.length);m.length>0&&(o=e.compute(wt(e.inputs[0],m),{inputs:[0],outputs:[-1]})[0],d=nl(d.length,o.dims.length));let[g,S]=ol(o.dims,d),b=g;n.keepDims&&(b=al(g,u)),e.compute(ul(t,{hint:n.cacheKey,inputDependencies:["type"]},[o],a,e.inputs[0].dataType,b,S),{inputs:[o]})},da=(e,t)=>{tt(e,"ReduceMeanShared",t,"mean")},ca=(e,t)=>{tt(e,"ReduceL1Shared",t,"l1")},pa=(e,t)=>{tt(e,"ReduceL2Shared",t,"l2")},fa=(e,t)=>{tt(e,"ReduceLogSumExpShared",t,"logSumExp")},ma=(e,t)=>{tt(e,"ReduceMaxShared",t,"max")},ha=(e,t)=>{tt(e,"ReduceMinShared",t,"min")},ga=(e,t)=>{tt(e,"ReduceProdShared",t,"prod")},ya=(e,t)=>{tt(e,"ReduceSumShared",t,"sum")},ba=(e,t)=>{tt(e,"ReduceSumSquareShared",t,"sumSquare")},wa=(e,t)=>{tt(e,"ReduceLogSumShared",t,"logSum")}});var rt,ll,Fr,Pn,nt,dl,cl,pl,fl,ml,hl,gl,yl,bl,wl,ot,$a,xa,Sa,Ca,Aa,Ia,Ea,Ta,Oa,_a,Xe,Lr=j(()=>{"use strict";ge();Re();ve();va();rt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},ll=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],Fr=(e,t,r,a,n,s,u=!1,d=!1)=>{let o=[],m=r[0].dims,g=B.normalizeAxes(n,r[0].dims.length),S=!d&&g.length===0;m.forEach((M,H)=>{S||g.indexOf(H)>=0?u&&o.push(1):o.push(M)});let b=[],y=L("_A",r[0].dataType,m),x=q("output",s,o),w=a(y,x,g),C=`inputOffset = ${y.indicesToOffset("inputIndices")};`,A=`let ${C};`,_=`var ${C};`,z=w[1]===""?"":_,D=(w[1]===""?A:C)+`\n`+w[2];for(let M=0,H=0;M<r[0].dims.length;M++)S||g.indexOf(M)>=0?(u&&H++,D=`for(var j${M}: u32 = 0; j${M} < ${r[0].dims[M]}; j${M}++) {\n                ${w[2].includes("lastIndex")?`let lastIndex = j${M};`:""}\n                ${y.indicesSet("inputIndices",M,`j${M}`)}\n                ${D}\n              }`):(b.push(`${y.indicesSet("inputIndices",M,x.indicesGet("outputIndices",H))};`),H++);let W=B.size(o);return{name:e,shaderCache:t,getShaderSource:M=>`\n        ${M.declareVariables(y,x)}\n\n        ${M.mainStart()}\n          ${M.guardAgainstOutOfBoundsWorkgroupSizes(W)}\n          var inputIndices: ${y.type.indices};\n          let outputIndices = ${x.offsetToIndices("global_idx")};\n\n          ${b.join(`\n`)}\n          ${w[0]}       // init ops for reduce max/min\n          ${z}\n          ${w[1]}\n          ${D}\n          ${w[3]}\n          ${w.length===4?x.setByOffset("global_idx","value"):w.slice(4).join(`\n`)}\n        }`,getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(W/64)}})}},Pn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),se({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},nt=(e,t,r,a)=>{let n=e.inputs,s=n.length===1?r:Pn(n,r);e.compute(Fr(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?ll:a,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},dl=(e,t)=>{rt(e.inputs),nt(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,"value = log(value);"])},cl=(e,t)=>{rt(e.inputs),nt(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByOffset("inputOffset")});`,""])},pl=(e,t)=>{rt(e.inputs),nt(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},fl=(e,t)=>{rt(e.inputs),nt(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByOffset("inputOffset")});`,"value = log(value);"])},ml=(e,t)=>{rt(e.inputs),nt(e,"ReduceMax",t,(a,n,s)=>{let u=[];for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(a.indicesSet("inputIndices",d,0));return[`${u.join(`\n`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = max(value, ${a.getByOffset("inputOffset")});`,""]})},hl=(e,t)=>{rt(e.inputs),nt(e,"ReduceMean",t,(a,n,s)=>{let u=1;for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${a.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},gl=(e,t)=>{rt(e.inputs),nt(e,"ReduceMin",t,(a,n,s)=>{let u=[];for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = min(value, ${a.getByOffset("inputOffset")});`,""]})},yl=(e,t)=>{rt(e.inputs),nt(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByOffset("inputOffset")};`,""])},bl=(e,t)=>{rt(e.inputs),nt(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,""])},wl=(e,t)=>{rt(e.inputs),nt(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += t * t;`,""])},ot=(e,t,r)=>{if(t.length===0)return!!r;let a=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?a*=e[s]:n*=e[s];return n<32&&a>1024},$a=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?hl(e,t):da(e,t)},xa=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?cl(e,t):ca(e,t)},Sa=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?pl(e,t):pa(e,t)},Ca=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?fl(e,t):fa(e,t)},Aa=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ml(e,t):ma(e,t)},Ia=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?gl(e,t):ha(e,t)},Ea=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yl(e,t):ga(e,t)},Ta=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bl(e,t):ya(e,t)},Oa=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wl(e,t):ba(e,t)},_a=(e,t)=>{ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?dl(e,t):wa(e,t)},Xe=e=>se(e)});var Ra,Pa,Ma,ka,Mn,Ba=j(()=>{"use strict";Be();Re();Lr();Ra=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Pa=(e,t)=>se({axis:t.axis,keepDims:t.keepDims,selectLastIndex:t.selectLastIndex}),Ma=(e,t)=>{Ra(e.inputs);let r=(n,s,u)=>{let d=[];for(let o=0;o<n.rank;o++)(u.indexOf(o)>=0||u.length===0)&&d.push(`inputIndices[${o}] = 0;`);return[`${d.join(`\n`)}`,`var value = ${n.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${n.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${n.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",s.setByOffset("global_idx","bestIndex")]},a=e.inputs.length===1?t:Pa(e.inputs,t);e.compute(Fr("ArgMin",{hint:a.cacheKey},[e.inputs[0]],r,[a.axis],7,a.keepDims),{inputs:[0]})},ka=(e,t)=>{Ra(e.inputs);let r=(n,s,u)=>{let d=[];for(let o=0;o<n.rank;o++)(u.indexOf(o)>=0||u.length===0)&&d.push(`inputIndices[${o}] = 0;`);return[`${d.join(`\n`)}`,`var value = ${n.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${n.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${n.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",s.setByOffset("global_idx","bestIndex")]},a=e.inputs.length===1?t:Pa(e.inputs,t);e.compute(Fr("argMax",{hint:a.cacheKey},[e.inputs[0]],r,[a.axis],7,a.keepDims),{inputs:[0]})},Mn=e=>se(e)});var vl,$l,Da,Wa=j(()=>{"use strict";ge();ve();vl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},$l=e=>{let t=e[0].dims,r=e[0].dims[2],a=B.size(t)/4,n=e[0].dataType,s=L("input",n,t,4),u=L("bias",n,[r],4),d=L("residual",n,t,4),o=q("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:g=>`\n  const channels = ${r}u / 4;\n  ${g.declareVariables(s,u,d,o)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};\n    ${o.setByOffset("global_idx","value")}\n  }`}},Da=e=>{vl(e.inputs),e.compute($l(e.inputs))}});var xl,$e,za,Va,Na,Ga,Ua,La,Fa,Ha,ja,kn,Sl,Ka,qa,Ya,Xa,Hr,Ja,jr,Za,Qa,ei,ti,ri,ni,oi,ai,ii,si,ui,li,di,ci,pi,fi,mi,Bn=j(()=>{"use strict";Be();ge();Re();ve();xl=(e,t,r,a,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let o=L("inputData",r,[u],4),m=q("outputData",a,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(o,m)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${o.getByOffset("global_idx")};\n    ${m.setByOffset("global_idx",d)}\n  }`},$e=(e,t,r,a,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>xl(u,B.size(e.dims),e.dataType,s,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(B.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(B.size(e.dims)/4)}]})}),za=e=>{e.compute($e(e.inputs[0],"Abs","abs"))},Va=e=>{e.compute($e(e.inputs[0],"Acos","acos"))},Na=e=>{e.compute($e(e.inputs[0],"Acosh","acosh"))},Ga=e=>{e.compute($e(e.inputs[0],"Asin","asin"))},Ua=e=>{e.compute($e(e.inputs[0],"Asinh","asinh"))},La=e=>{e.compute($e(e.inputs[0],"Atan","atan"))},Fa=e=>{e.compute($e(e.inputs[0],"Atanh","atanh"))},Ha=e=>se(e),ja=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute($e(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},kn=(e,t)=>{let r=Pe(e.inputs[0].dataType);e.compute($e(e.inputs[0],"Clip",a=>`clamp(${a}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${r}> = vec4(${r}(${t.min}));\n    const clip_max_: vec4<${r}> = vec4(${r}(${t.max}));\n`,t.cacheKey),{inputs:[0]})},Sl=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:Gr,r=e.length>=3?e[2].getFloat32Array()[0]:Ur;return se({min:t,max:r})},Ka=e=>{let t=Sl(e.inputs);kn(e,t)},qa=e=>{e.compute($e(e.inputs[0],"Ceil","ceil"))},Ya=e=>{e.compute($e(e.inputs[0],"Cos","cos"))},Xa=e=>{e.compute($e(e.inputs[0],"Cosh","cosh"))},Hr=e=>se(e),Ja=(e,t)=>{e.compute($e(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`\n  const elu_alpha_: f32 = f32(${t.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},jr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,Za=e=>{let t=Pe(e.inputs[0].dataType);e.compute($e(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,jr(`vec4<${t}>`,t)))},Qa=e=>{e.compute($e(e.inputs[0],"Exp","exp"))},ei=e=>{e.compute($e(e.inputs[0],"Floor","floor"))},ti=e=>{let t=Pe(e.inputs[0].dataType);e.compute($e(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,jr(`vec4<${t}>`,t)))},ri=(e,t)=>{e.compute($e(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},ni=e=>{e.compute($e(e.inputs[0],"Not",t=>`!${t}`))},oi=e=>{e.compute($e(e.inputs[0],"Neg",t=>`-${t}`))},ai=e=>{e.compute($e(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ii=e=>{e.compute($e(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},si=e=>{e.compute($e(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ui=e=>{e.compute($e(e.inputs[0],"Sin","sin"))},li=e=>{e.compute($e(e.inputs[0],"Sinh","sinh"))},di=e=>{e.compute($e(e.inputs[0],"Sqrt","sqrt"))},ci=e=>{e.compute($e(e.inputs[0],"Tan","tan"))},pi=e=>{e.compute($e(e.inputs[0],"Tanh","tanh"))},fi=(e,t)=>(e.compute($e(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),mi=e=>{e.compute($e(e.inputs[0],"Log","log"))}});var Al,Il,hi,gi=j(()=>{"use strict";ge();ve();Bn();Al=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Il=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=L("input",e[0].dataType,e[0].dims,4),a=L("bias",e[0].dataType,[e[0].dims[2]],4),n=q("output",e[0].dataType,t,4),s=B.size(t)/4;return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:d=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${d.declareVariables(r,a,n)}\n\n  ${jr("vec4f")}\n\n  ${d.mainStart()}\n    ${d.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},hi=e=>{Al(e.inputs),e.compute(Il(e.inputs))}});var El,Tl,at,yi,bi,wi,vi,$i,xi,Si,Ci,Ai,Ii,Ei=j(()=>{"use strict";Be();ge();ve();El=(e,t,r,a,n,s,u,d,o,m,g,S)=>{let b,y;typeof u=="string"?b=y=(W,R)=>`${u}((${W}),(${R}))`:typeof u=="function"?b=y=u:(b=u.scalar,y=u.vector);let x=g?t.length:t,w=g?r.length:r,C=g?a.length:a,A=q("outputData",m,C,4),_=L("aData",d,x,4),z=L("bData",o,w,4),D;if(n)if(s){let W=B.size(t)===1,R=B.size(r)===1;W||R?D=A.setByOffset("global_idx",y(W?`${_.type.value}(${_.getByOffset("0")}.x)`:_.getByOffset("global_idx"),R?`${z.type.value}(${z.getByOffset("0")}.x)`:z.getByOffset("global_idx"))):D=`\n            let outputIndices = ${A.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${_.broadcastedIndicesToOffset("outputIndices",A)};\n            let offsetB = ${z.broadcastedIndicesToOffset("outputIndices",A)};\n            ${A.setByOffset("global_idx",y(_.getByOffset("offsetA / 4u"),z.getByOffset("offsetB / 4u")))}\n          `}else D=A.setByOffset("global_idx",y(_.getByOffset("global_idx"),z.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let W=(R,M,H="")=>{let X=`aData[indexA${M}][componentA${M}]`,le=`bData[indexB${M}][componentB${M}]`;return`\n            let outputIndices${M} = ${A.offsetToIndices(`global_idx * 4u + ${M}u`)};\n            let offsetA${M} = ${_.broadcastedIndicesToOffset(`outputIndices${M}`,A)};\n            let offsetB${M} = ${z.broadcastedIndicesToOffset(`outputIndices${M}`,A)};\n            let indexA${M} = offsetA${M} / 4u;\n            let indexB${M} = offsetB${M} / 4u;\n            let componentA${M} = offsetA${M} % 4u;\n            let componentB${M} = offsetB${M} % 4u;\n            ${R}[${M}] = ${H}(${b(X,le)});\n          `};m===9?D=`\n            var data = vec4<u32>(0);\n            ${W("data",0,"u32")}\n            ${W("data",1,"u32")}\n            ${W("data",2,"u32")}\n            ${W("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:D=`\n            ${W("outputData[global_idx]",0)}\n            ${W("outputData[global_idx]",1)}\n            ${W("outputData[global_idx]",2)}\n            ${W("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(_,z,A)}\n\n        ${S??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${D}\n      }`},Tl=(e,t,r,a,n,s,u=r.dataType)=>{let d=!B.areEqual(r.dims,a.dims),o=r.dims,m=B.size(r.dims),g=!1,S=[d];if(d){let y=et.calcShape(r.dims,a.dims,!1);if(!y)throw new Error("Can\'t perform binary op on the given tensors");o=y,m=B.size(o);let x=B.size(r.dims)===1,w=B.size(a.dims)===1;S.push(x),S.push(w);let C=1;for(let A=1;A<o.length;A++){let _=r.dims[r.dims.length-A]??1,z=a.dims[a.dims.length-A]??1;if(_===z)C*=_;else break}(C%4===0||x||w)&&(g=!0)}else g=!0;S.push(g);let b=Nt(r.dims.length)&&Nt(a.dims.length)&&Nt(o.length);return{name:e,shaderCache:{hint:t+S.map(y=>y.toString()).join("_"),inputDependencies:b?["rank","rank"]:[r.dims.length>0?"dims":"type",a.dims.length>0?"dims":"type"]},getShaderSource:y=>El(y,r.dims,a.dims,o,g,d,n,r.dataType,a.dataType,u,b,s),getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(m/64/4)},programUniforms:b?[{type:"uint32",data:Math.ceil(B.size(o)/4)},...Ot(r.dims),...Ot(a.dims),...Ot(o)]:[{type:"uint32",data:Math.ceil(B.size(o)/4)}]})}},at=(e,t,r,a,n,s)=>{e.compute(Tl(t,n??"",e.inputs[0],e.inputs[1],r,a,s))},yi=e=>{at(e,"Add",(t,r)=>`${t}+${r}`)},bi=e=>{at(e,"Div",(t,r)=>`${t}/${r}`)},wi=e=>{at(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},vi=e=>{at(e,"Mul",(t,r)=>`${t}*${r}`)},$i=e=>{let t=L("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;at(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},xi=e=>{at(e,"Sub",(t,r)=>`${t}-${r}`)},Si=e=>{at(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ci=e=>{at(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ai=e=>{at(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ii=e=>{at(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var _l,Rl,Pl,Ml,Ti,Oi,_i=j(()=>{"use strict";ge();Re();ve();_l=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},Rl=e=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,Pl=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(s):n===0?a.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?a.push(`else { ${s} }`):a.push(`else if (inputIndex == ${n}) { ${s} }`)}return a.join(`\n`)},Ml=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let y=1;y<e.length;y++){let x=e[y].dims.slice();for(let w=0;w<r.length;w++)if(w===a)n[a]+=x[w];else if(r[w]!==x[w])throw new Error("non concat dimensions must match")}let s=B.size(n),u=new Array(e.length),d=new Array(e.length),o=e[0].dataType,m=0;for(let y=0;y<e.length;++y)m+=e[y].dims[a],u[y]=m,d[y]=L(`input${y}`,o,e[y].dims);let g=q("output",o,n),S=g.indicesGet("indices",a),b=y=>`\n  ${y.declareVariables(...d,g)}\n\n  const sizeInConcatAxis = array<u32, ${u.length}>(${u.map(x=>`${x}u`).join(",")});\n  ${Rl(u.length)}\n\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n\n    var indices = ${g.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${S});\n    if (inputIndex != 0u) {\n      ${S} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${Pl(d,g)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:b}},Ti=(e,t)=>{_l(e.inputs),e.compute(Ml(e.inputs,t.axis))},Oi=e=>se({axis:e.axis})});var De,Kr,qr,Yr=j(()=>{"use strict";De=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Kr=(e,t=!1,r=!1,a=3)=>"",qr=(e,t)=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      // TODO uncomment the following line when activation is supported above.\n      // ${t?"value = activation(value, coords);":""}\n      `});var Xr,Dn=j(()=>{"use strict";Xr=`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`});var Jr,Zr,fr=j(()=>{"use strict";ge();Jr=(e,t=!1)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:t?"value = max(value, vec4(0.0));":"value = max(value, 0.0);"};case"Sigmoid":return{activationFunction:"",applyActivation:"value = (1.0 / (1.0 + exp(-value)));"};case"Clip":return{activationFunction:`const clip_min_=f32(${e.clipMin});const clip_max_=f32(${e.clipMax});`,applyActivation:t?"value = clamp(value, vec4(clip_min_), vec4(clip_max_));":"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Zr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[Gr,Ur];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var kl,Bl,mr,Ri,Dl,hr,Wl,Qr,gr=j(()=>{"use strict";ge();ve();fr();Yr();kl=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Bl=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,mr=(e,t,r="f32",a,n=!1,s=32,u=!1,d=32)=>{let o=t[1]*e[1],m=t[0]*e[0],g=n?o:s,S=n?s:o,b=g/t[0],y=s/t[1];if(!((n&&b===4&&e[1]===4||!n&&(b===3||b===4))&&g%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${b} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${b} must be 3 or 4.\n  tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${b}<${r}>, ${g/b}>, ${S}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${m/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${b};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${o};\n\n  let numTiles = ${u?`${Math.ceil(d/s)}`:"(dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${y};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${kl(n,a)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${b===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Bl(n,b)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Ri=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Dl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",hr=(e,t,r="f32",a,n=!1,s=32,u=!1,d=32,o=!1)=>{let m=e[1]*t[1],g=e[0]*t[0],S=n?m:s,b=n?s:m;if(!(b%t[1]===0&&S%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${b} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${S} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let y=b/t[1],x=S/t[0],w=s/t[1],C=o?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${m};\n    let globalColStart = i32(workgroupId.x) * ${g};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${S}; inputCol = inputCol + ${t[0]}) {\n          ${Ri(n,a)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${a?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${m};\n\nlet tileRowA = i32(localId.y) * ${y};\nlet tileColA = i32(localId.x) * ${x};\nlet tileRowB = i32(localId.y) * ${w};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${x}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Ri(n,a)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${a?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Dl(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${S}>, ${b}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${g}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(d/s)}`:"(dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${C}\n  }\n`},Wl=(e,t,r,a,n,s=!1)=>{let u=n[0],d=n[1],o=n[2],m=a[0],g=a[1],S=a[2],b=a[3],y=Rn(u,o),x=Rn(d,o),w=Pe(a[0].type.tensor),C=()=>{let z=g.rank,D=m.rank,W=`var aIndices: ${g.type.indices};`;for(let R=z-2-1,M=D-1;R>=0;R--,M--)W+=`\naIndices[${R}] = ${D>1?`batchIndices[${M}]`:"batchIndices"};`;return y.forEach(R=>{W+=`\naIndices[${R}] = 0;`}),W+=`\naIndices[${z-2}] = u32(row);\n                   aIndices[${z-1}] = u32(colIn);`,W},A=()=>{let z=S.rank,D=m.rank,W=`var bIndices: ${S.type.indices};`;for(let R=z-2-1,M=D-1;R>=0;R--,M--)W+=`\nbIndices[${R}] = ${D>1?`batchIndices[${M}]`:"batchIndices"};`;return x.forEach(R=>{W+=`\nbIndices[${R}] = 0;`}),W+=`\nbIndices[${z-2}] = u32(row);\n                   bIndices[${z-1}] = u32(colIn);`,W};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${De(e,w)} {\n      var value = ${De(e,w)}(0.0);\n      let col = colIn * ${e};\n      if(row < dimAOuter && col < dimInner)\n      {\n        ${C()}\n        value = ${g.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${De(e,w)} {\n      var value = ${De(e,w)}(0.0);\n      let col = colIn * ${e};\n      if(row < dimInner && col < dimBOuter)\n      {\n        ${A()}\n        value = ${S.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${De(e,w)}) {\n      let col = colIn * ${e};\n      if (row < dimAOuter && col < dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${De(e,w)}(bias[row])`};`:""}\n        ${r}\n        ${b.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Qr=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),o=u.slice(0,-2),m=a?a.slice(0,-2):r.slice(0,-2),g=L("batchDims",e[0].dataType,m),S=[g],b=[d,o,m],y=B.size(m),x=s[s.length-2],w=s[s.length-1],C=u[u.length-1],A=w%4===0&&C%4===0,{activationFunction:_,applyActivation:z}=Jr(t,A),D=x<=8?[4,1,1]:[4,4,1],W=[8,8,1],R=[Math.ceil(C/W[0]/D[0]),Math.ceil(x/W[1]/D[1]),Math.ceil(y/W[2]/D[2])],M=Pe(e[0].dataType),H=A?4:1,X=L("a",e[0].dataType,[...d,x,w/H],H),le=L("b",e[1].dataType,[...o,w,C/H],H),k=q("result",e[0].dataType,[y,x,C/H],H);S.push(X),S.push(le),S.push(k);let K=[X,le],xe=e.length>2,ae=Wl(H,xe,z,S,b,n);if(xe){let F=n?H:1;K.push(L("bias",e[2].dataType,e[2].dims,F))}let we=F=>`\n  const dimAOuter: i32 = ${x};\n  const dimBOuter: i32 = ${C};\n  const dimInner: i32 = ${w};\n  ${F.declareVariables(...K,k)}\n  ${_}\n  ${ae}\n  ${A?mr(D,W,M,g):hr(D,W,M,g)}\n                   ${g.impl()}`;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]}}),getShaderSource:we}}});var zl,Pi,Mi=j(()=>{"use strict";yt();ge();ve();Yr();Dn();gr();zl=(e,t,r,a,n=!1,s,u=!1,d=4,o=4,m=4,g="f32")=>{let S=le=>{switch(le){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${g}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${le} is not supported.`)}},b=le=>{switch(le){case 1:return"return w[row * wShape[3] + colIn];";case 4:return"return w[row * wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${le} is not supported.`)}},y=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,x=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,w=e?"xShape[1]":"xShape[2]",C=e?"xShape[2]":"xShape[3]",A=e?"row":"col",_=e?"col":"row",z=`\n    let inChannels = wShape[2];\n    let outWidth = ${e?"outShape[2]":"outShape[3]"};\n    let outRow = ${A} / outWidth;\n    let outCol = ${A} % outWidth;\n\n    let WRow = ${_} / (filterDims[1] * inChannels);\n    let WCol = ${_} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${_} % inChannels;\n    var resData = ${De(d,g)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${w} && xCol >= 0 && xCol < ${C}) {\n      ${y}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${S(d)}\n    }\n    return resData;`,D=e?t&&a?`\n    let col = colIn * ${d};\n    ${z}`:`\n    let col = colIn * ${d};\n    if (row < dimAOuter && col < dimInner) {\n      ${z}\n    }\n    return ${De(d,g)}(0.0);`:a&&r?`\n    let col = colIn * ${d};\n    ${z}`:`\n    let col = colIn * ${d};\n    if (row < dimInner && col < dimBOuter) {\n      ${z}\n    }\n    return ${De(d,g)}(0.0);`,W=`${b(o)}`,R=De(m,g),M=e?De(d,g):De(o,g),H=e?De(o,g):De(d,g);return`\n    ${Kr(s,u,m===4,4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${M} {\n      ${e?D:W}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${H} {\n      ${e?W:D}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${R}) {\n      let col = colIn * ${m};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"outShape[2]":"outShape[3]"};\n      ${x}\n      ${qr(n,s)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Pi=(e,t,r,a,n,s,u,d)=>{let o=t.format==="NHWC",m=o?e[0].dims[3]:e[0].dims[1],g=r[0],S=o?r[2]:r[3],b=o?r[1]:r[2],y=o?r[3]:r[1],x=o&&(m%4===0||m%3===0)&&y%4===0,w=o?y:S*b,C=o?S*b:y,A=[8,8,1],_=a<=8?[4,1,1]:[4,4,1],z=[Math.ceil(w/A[0]/_[0]),Math.ceil(C/A[1]/_[1]),Math.ceil(g/A[2]/_[2])];Ie("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${z}`);let D=x?o&&m%4!==0?3:4:_[0],W=A[1]*_[1],R=A[0]*_[0],M=Math.max(A[0]*D,A[1]),H=a%W===0,X=n%R===0,le=s%M===0,k=x?[D,4,4]:[1,1,1],K=Pe(e[0].dataType),xe=[`@group(0) @binding(0) var<storage, read> x: array<${x&&D===4?`vec4<${K}>`:K}>;`,`@group(0) @binding(1) var<storage, read> w: array<${x?`vec4<${K}>`:K}>;`],ae=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${x?`vec4<${K}>`:K}) {\n        result[flatIndex] = ${x?`vec4<${K}>`:K}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${x?`vec4<${K}>`:K}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${x?"/ 4":""}, value);\n      }`;return u&&(xe.push(`@group(0) @binding(2) var<storage, read> bias: array<${x?`vec4<${K}>`:K}>;`),ae+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${x?`vec4<${K}>`:K} {\n          return bias[coords.${o?"w":"y"}${x?"/ 4":""}];\n        }`),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:z[0],y:z[1],z:z[2]}}),getShaderSource:()=>`\n        ${Xr}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${xe.join("")}\n        @group(0) @binding(${xe.length}) var<storage, read_write> result: array<${x?`vec4<${K}>`:K}>;\n        //@group(0) @binding(${xe.length+1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(",")});\n        const outShape : vec4<i32> = vec4<i32>(${r.join(",")});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${B.computeStrides(r).slice(0,3).join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${a};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${ae}\n        ${zl(o,H,X,le,u,t.activation.toLowerCase(),!1,k[0],k[1],k[2],K)}\n            ${x?mr(_,A,K,void 0,!o,M):hr(_,A,K,void 0,!o,M,!1,void 0,d)}`}}});var Wn,ki=j(()=>{"use strict";ge();ve();Vn();fr();Wn=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,{activationFunction:o,applyActivation:m}=Jr(t),g=t.format==="NHWC",S=zn(s,u,t.dilations,t.pads,t.strides,g),b=B.size(S),y=q("output",e[0].dataType,S),x=L("x",e[0].dataType,s),w=L("w",e[1].dataType,u),C=[x,w];a&&C.push(L("b",e[2].dataType,e[2].dims));let A=_=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${_.declareVariables(...C,y)}\n\n  ${o}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(b)}\n\n    let outputIndices = ${y.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${g?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${g?1:2}], outputIndices[${g?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${d}u;\n\n    var value: ${y.type.value} = ${y.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[g?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[g?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${g?x.get("batch","xHeight","xWidth","input_channel"):x.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${w.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${m}\n    ${y.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(S):S,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)}}),getShaderSource:A}}});var zn,Bi,Vl,Di,Nn,Nl,Gl,Gn,Vn=j(()=>{"use strict";ge();Re();Mi();gr();ki();fr();pr();zn=(e,t,r,a,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),o=d.length,m=t[0],S=t.slice(2).map((x,w)=>x+(x-1)*(r[w]-1)),y=d.map((x,w)=>x+a[w]+a[w+o]).map((x,w)=>Math.floor((x-S[w]+n[w])/n[w]));return y.splice(0,0,u),y.splice(s?3:1,0,m),y},Bi=[2,3,1,0],Vl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Di=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let a=e.pads.slice();Tt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},Nn=e=>{let t=Zr(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,o=e.strides,m=e.w_is_const();return se({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:o,wIsConst:m,...t})},Nl=(e,t,r)=>{let a=Di(r,t);if(r.group!==1){e.compute(Wn(t,a));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],o=t[0].dims[n?3:1],m=t[1].dims[2],g=t[1].dims[3],S=zn(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),b=S[n?1:2],y=S[n?2:3],x=S[n?3:1],w=n&&m===u&&g===d&&r.pads[0]===0&&r.pads[1]===0;if(w||m===1&&g===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let R=S[0],M,H,X,le=[];if(n){let k=e.kernelCustomData.wT??e.compute(wt(t[1],Bi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=k),w){let K=u*d*o;M=t[0].reshape([1,R,K]),H=k.reshape([1,K,x]),X=[1,R,x]}else M=t[0].reshape([R,u*d,o]),H=k.reshape([1,o,x]),X=[R,b*y,x];le.push(M),le.push(H)}else M=t[0].reshape([R,o,u*d]),H=t[1].reshape([1,x,o]),X=[R,x,b*y],le.push(H),le.push(M);s&&le.push(t[2]),e.compute(Qr(le,a,S,X,n),{inputs:le});return}let C=!0,A=e.kernelCustomData.wT??e.compute(wt(t[1],Bi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let _=[t[0],A];s&&_.push(t[2]);let z=n?b*y:x,D=n?x:b*y,W=m*g*o;e.compute(Pi(_,a,S,z,D,W,s,C),{inputs:_})},Gl=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),o=Di({...t,pads:n,strides:s,dilations:u,kernelShape:d},a);e.compute(Wn(a,o,m=>r?[m[0],m[2],m[3]]:[]))},Gn=(e,t)=>{Vl(e.inputs,t),e.inputs[0].dims.length===3?Gl(e,t):Nl(e,e.inputs,t)}});var Ul,Wi,zi=j(()=>{"use strict";yt();ge();Yr();Dn();gr();Ul=(e,t=!1,r,a=!1,n=4)=>{let s=De(n,"f32"),u=A=>{switch(A){case 1:return"return W[getIndexFromCoords4D(coord, wShape)];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${A} is not supported.`)}},d=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,o=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,m=e?"outBackprop[1]":"outBackprop[2]",g=e?"outBackprop[2]":"outBackprop[3]",S=e?"row":"col",b=e?"col":"row",y=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"outShape[2]":"outShape[3]"};\n      let outRow = ${S} / outWidth;\n      let outCol = ${S} % outWidth;\n\n      let WRow = ${b} / (filterDims[1] * inChannels);\n      let WCol = ${b} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${m}) || fract(xR) > 0.0) {\n        return ${s}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${g}) || fract(xC) > 0.0) {\n        return ${s}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${b} % inChannels;\n      ${d}\n      return x[getIndexFromCoords4D(coord, xShape)/${n}];`,x=e?`\n      let col = colIn * ${n};\n      if (row < dimAOuter && col < dimInner) {\n        ${y}\n      }\n      return ${s}(0.0);`:`\n      let col = colIn * ${n};\n      if (row < dimInner && col < dimBOuter) {\n        ${y}\n      }\n      return ${s}(0.0);`,w=`\n      let col = colIn * ${n};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < dimInner && col < dimBOuter":"row < dimInner && col < dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${u(n)}\n      }\n      return ${s}(0.0);\n      `;return`\n  ${Kr(r,a,n===4,4)}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${s} {\n    ${e?x:w}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${s} {\n    ${e?w:x}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${s}) {\n    let col = colIn * ${n};\n    if (row < dimAOuter && col < dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"outShape[2]":"outShape[3]"};\n      ${o}\n      ${qr(t,r)}\n      result[getIndexFromCoords4D(coords, outShape)/${n}] = value;\n    }\n  }`},Wi=(e,t,r,a,n,s,u,d)=>{let o=t.format==="NHWC",m=o?e[0].dims[3]:e[0].dims[1],g=r[0],S=o?r[2]:r[3],b=o?r[1]:r[2],y=o?r[3]:r[1],x=o?m%4===0&&y%4===0:S%4===0&&y%4===0,w=o?y:S*b,C=o?S*b:y,A=x?[8,8,1]:[w<=4||C<=4?4:16,w>4&&C<=4?4:16,1],_=x?[4,4,1]:[w<=4?1:4,w>4&&C<=4?1:4,1],z=[Math.ceil(w/A[0]/_[0]),Math.ceil(C/A[1]/_[1]),Math.ceil(g/A[2]/_[2])];Ie("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${z}`);let D=x?4:1,W=Math.max(A[0]*D,A[1]),R=[`@group(0) @binding(0) var<storage, read> x: array<${x?"vec4<f32>":"f32"}>;`,"@group(0) @binding(1) var<storage, read> W: array<f32>;"],M="";return u&&(R.push(`@group(0) @binding(2) var<storage, read> bias: array<${x?"vec4<f32>":"f32"}>;`),M+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${x?"vec4<f32>":"f32"} {\n          return bias[coords.${o?"w":"y"}${x?"/ 4":""}];\n        }`),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:z[0],y:z[1],z:z[2]}}),getShaderSource:()=>`\n        ${Xr}\n        ${R.join(`\n`)}\n        @group(0) @binding(${R.length}) var<storage, read_write> result: array<${x?"vec4<f32>":"f32"}>;\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(",")});\n        const outShape : vec4<i32> = vec4<i32>(${r.join(",")});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${B.computeStrides(r).slice(0,3).join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[o?1:2]}, ${t.kernelShape[o?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${a};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${M}\n        ${Ul(o,u,t.activation.toLowerCase(),!1,D)}\n        ${x?mr(_,A,"f32",void 0,!o,W):hr(_,A,"f32",void 0,!o,W,!1,void 0,d)}`}}});var Ll,Un,Vi=j(()=>{"use strict";yt();ge();ve();Ll=(e,t,r,a,n,s,u=!1,d)=>{let o=r.format==="NHWC",m=o?1:2,g=o?2:3,S=o?3:1,b=B.size(a),y=u?2:1,x=r.group,w=t[1].dims,C=w[0]/x,A=w[1],_=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {\n    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);\n  }`;n&&(_+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {\n      return bias[coords.${o?"w":"y"}${u?"/ 4":""}];\n    }`);let z=u?4:1,D=L("W",t[1].dataType,t[1].dims,z),W=L("Dy",t[0].dataType,t[0].dims,z),R=[W,D];n&&R.push(L("bias",t[2].dataType,[a[S]],z));let M=q("result",t[0].dataType,a,z),H=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${y};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${d}>, ${y}>;\n        for (var i = 0; i < ${y}; i++) {\n          dotProd[i] = vec4<${d}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);\n            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${W.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${W.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${S}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${W.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${D.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${W.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${y}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};\n          ${M.set("batch","r","c + i","d1","value")};\n        }\n      }`,X=`\n          let outputIndices = ${M.offsetToIndices("global_idx")};\n          let batch = ${M.indicesGet("outputIndices",0)};\n          let d1 = ${M.indicesGet("outputIndices",S)};\n          let r = ${M.indicesGet("outputIndices",m)};\n          let c = ${M.indicesGet("outputIndices",g)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${A};\n          let wOutChannel = d1 - groupId * ${A};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${m}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${g}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${C};\n              for (var d2: u32 = 0; d2 < ${C}; d2 = d2 + 1) {\n                let xValue = ${o?W.get("batch","idyR","idyC","inputChannel"):W.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${D.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":"0.0"};\n          ${M.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...R,M)}\n  ${_}\n  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[o?1:2]}, ${r.kernelShape[o?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)};\n  ${u?H:X}}`},Un=(e,t,r)=>{let a=e.length>2,n=t.outputShape,s=B.size(n),u=[Math.ceil(s/64),1,1];Ie("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=Pe(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:o=>Ll(o,e,t,n,a,u[1]===1&&u[2]===1,!1,d)}}});var Fl,Hl,jl,Ni,Gi,Kl,ql,Yl,Xl,Ui,Li=j(()=>{"use strict";Re();zi();Vi();fr();pr();Fl=(e,t,r,a,n,s)=>(e-1)*t+r+(a-1)*n+1-s,Hl=(e,t,r,a,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[a]=e-s,r[n]=s)},jl=(e,t,r,a,n,s,u,d,o,m)=>{let g=e.length-2,S=m.length===0;if(o.length===0)for(let x=0;x<g;++x)o.push(0);let b=e[0],y=t[d?3:1]*n;for(let x=0,w=e.length-g-(d?1:0);x<g;++x,++w){let C=e[w],A=S?C*u[x]:m[x],_=Fl(C,u[x],s[x],t[w],r[x],A);Hl(_,a,s,x,x+g),S&&m.push(u[x]*(C-1)+o[x]+(t[w]-1)*r[x]+1-s[x]-s[x+g])}m.splice(0,0,b),m.splice(d?3:1,0,y)},Ni=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((b,y)=>b*y,1)===0){r.length=0;for(let b=2;b<t[1].dims.length;++b)r.push(t[1].dims[b])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,o=e.dilations.slice();if(o.reduce((b,y)=>b+y,0)===0){let b=t[0].dims.length-2;o=new Array(b).fill(1)}let m=e.strides.slice();if(m.reduce((b,y)=>b+y,0)===0){let b=t[0].dims.length-2;m=new Array(b).fill(1)}jl(d,r,o,e.autoPad,e.group,n,m,a,u,s);let g=Object.assign({},e),S=e.cacheKey+[r.join("n,"),n.join(","),m.join(","),u.join(","),s.join(","),o.join(",")].join("_");return Object.assign(g,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:o,strides:m,cacheKey:S}),g},Gi=e=>{let t=Zr(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,o=e.strides,m=e.wIsConst(),g=e.outputPadding,S=e.outputShape;return se({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,outputPadding:g,outputShape:S,pads:d,strides:o,wIsConst:m,...t})},Kl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((g,S)=>g+S,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((g,S)=>g+S,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((g,S)=>g+S,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((g,S)=>g+S,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},ql=[2,3,1,0],Yl=(e,t,r)=>{let a=Ni(r,t),n=r.format==="NHWC",s=t.length===3;if(a.group!==1){e.compute(Un(t,a));return}let u=a.outputShape,d=u[n?1:2],o=u[n?2:3],m=u[n?3:1],g=t[1].dims[2],S=t[1].dims[3],b=t[0].dims[n?3:1],y=n?d*o:m,x=n?m:d*o,w=g*S*b,C=!0,A=e.kernelCustomData.wT??e.compute(wt(t[1],ql),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let _=[t[0],A];s&&(!n&&t[2].dims.length===1?_.push(t[2].reshape([t[2].dims[0],1,1])):_.push(t[2])),e.compute(Wi(_,a,u,y,x,w,s,C),{inputs:_})},Xl=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let o=Ni({...t,pads:d,strides:u,dilations:s,kernelShape:n},a);e.compute(Un(a,o,m=>r?[m[0],m[2],m[3]]:[m[0],m[1],m[3]]))},Ui=(e,t)=>{Kl(e.inputs,t),e.inputs[0].dims.length===3?Xl(e,t):Yl(e,e.inputs,t)}});var Ln,en,Fi,Jl,Zl,Fn,Hn,Ql,Hi,ji,Ki=j(()=>{"use strict";ge();Re();ve();Ln="[a-zA-Z]|\\\\.\\\\.\\\\.",en="("+Ln+")+",Fi="^"+en+"$",Jl="("+en+",)*"+en,Zl="^"+Jl+"$",Fn=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},Hn=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(Zl)))throw new Error("Invalid LHS term");if(a.split(",").forEach((d,o)=>{let m=t[o].dims.slice();if(!d.match(RegExp(Fi)))throw new Error("Invalid LHS term");let g=this.processTerm(d,!0,m,o);this.lhs.push(g)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,o])=>o.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(en)))throw new Error("Invalid RHS");n.match(RegExp(Ln,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(d);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(n,!0,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let s=a.length,u=!1,d=[],o=0;if(!t.match(RegExp(Fi))&&!r&&t!=="")throw new Error("Invalid LHS term");let m=t.match(RegExp(Ln,"g")),g=new Fn(n);return m?.forEach((S,b)=>{if(S==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let y=s-m.length+1;if(y<0)throw new Error("Ellipsis out of bounds");if(d=a.slice(o,o+y),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let x=0;x<d.length;x++){let w=String.fromCharCode("0".charCodeAt(0)+b);g.addSymbol(w,b+x),this.addSymbol(w,a[o++],n)}}else g.addSymbol(S,b),this.addSymbol(S,a[o++],n)}),g}},Ql=(e,t)=>{let r=e[0].dataType,a=new Array(e.length);for(let z=0;z<e.length;++z)a[z]=L(`input${z}`,r,e[z].dims);let n=t.outputDims,s=B.size(n),u=q("output",r,n),d=[],o=Array.from(t.rhs.symbolToIndices.keys()),m="var prod = 1.0;",g="var sum = 0.0;",S="sum += prod;",b=[],y=[],x=[],w=[],C=t.symbolToInfo.size===o.length;t.symbolToInfo.forEach((z,D)=>{if(o.includes(D)){let W=o.indexOf(D);t.lhs.forEach((R,M)=>{if(z.inputIndices.includes(M)){let H=R.symbolToIndices.get(D);if(H===void 0)throw new Error("Invalid symbol error");H.forEach(X=>{d.push(`${a[M].indicesSet(`input${M}Indices`,X,u.indicesGet("outputIndices",W))}`)})}})}else t.lhs.forEach((W,R)=>{let M=t.symbolToInfo.get(D);if(M===void 0)throw new Error("Invalid symbol error");if(M.inputIndices.includes(R)){let H=W.symbolToIndices.get(D);if(H===void 0)throw new Error("Invalid symbol error");H.forEach(X=>{b.push(`${a[R].indicesSet(`input${R}Indices`,X,`${D}`)}`)}),w.push(`prod *= ${a[R].getByIndices(`input${R}Indices`)};`)}}),y.push(`for(var ${D}: u32 = 0; ${D} < ${t.symbolToInfo.get(D)?.dimValue}; ${D}++) {`),x.push("}")});let A=C?[...d,`let sum = ${a.map((z,D)=>z.getByIndices(`input${D}Indices`)).join(" * ")};`]:[...d,g,...y,...b,m,...w,S,...x],_=z=>`\n      ${z.declareVariables(...a,u)}\n\n      ${z.mainStart()}\n        ${z.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n        var outputIndices = ${u.offsetToIndices("global_idx")};\n        ${a.map((D,W)=>`var input${W}Indices: ${a[W].type.indices};`).join(`\n`)}\n        ${A.join(`\n`)};\n        ${u.setByOffset("global_idx","sum")};\n      }`;return{name:"Einsum",shaderCache:{hint:t.equation},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:_}},Hi=(e,t)=>{let r=new Hn(e.inputs,t.equation);e.compute(Ql(e.inputs,r))},ji=e=>{let t=e.equation.replace(/\\s+/g,"");return se({equation:t})}});var ed,qi,td,rd,Yi,Xi=j(()=>{"use strict";ge();ve();ed=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},qi=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},td=(e,t)=>e.length>t.length?qi(e,t):qi(t,e),rd=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=td(t,r),n=B.size(a),s=e[0].dataType,u=L("input",s,t),d=q("output",s,a),o=m=>`\n  const inputShape = ${u.indices(...t)};\n  ${m.declareVariables(u,d)}\n  ${m.mainStart()}\n  ${m.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n    let outputIndices = ${d.offsetToIndices("global_idx")};\n    var inputIndices: ${u.type.indices};\n    for (var i = 0; i < ${t.length}; i++) {\n      if (${u.indicesGet("inputShape","i")} == 1) {\n        ${u.indicesSet("inputIndices","i",0)}\n      } else {\n        ${u.indicesSet("inputIndices","i",d.indicesGet("outputIndices",`i + ${a.length-t.length}`))}\n      }\n    }\n    ${d.setByOffset("global_idx",u.getByIndices("inputIndices"))}\n  }`;return{name:"Expand",shaderCache:{hint:`${a}`},getShaderSource:o,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}})}},Yi=e=>{ed(e.inputs),e.compute(rd(e.inputs),{inputs:[0]})}});var nd,od,Ji,Zi,Qi=j(()=>{"use strict";ge();Re();ve();nd=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},od=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,s=B.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...a);let d=r[s],o=B.size(u),m=L("data",e[0].dataType,e[0].dims),g=L("inputIndices",e[1].dataType,e[1].dims),S=q("output",e[0].dataType,u),b=()=>{let x=a.length,w=`var indicesIndices  = ${g.type.indices}(0);`;for(let C=0;C<x;C++)w+=`${x>1?`indicesIndices[${C}]`:"indicesIndices"} = ${u.length>1?`outputIndices[${s+C}]`:"outputIndices"};`;w+=`\n        var idx = ${g.getByIndices("indicesIndices")};\n        if (idx < 0) {\n          idx = idx + ${d};\n        }\n        var dataIndices = ${m.type.indices}(0);\n      `;for(let C=0,A=0;C<n;C++)C===s?(w+=`${n>1?`dataIndices[${C}]`:"dataIndices"} = u32(idx);`,A+=x):(w+=`${n>1?`dataIndices[${C}]`:"dataIndices"} = ${u.length>1?`outputIndices[${A}]`:"outputIndices"};`,A++);return w},y=x=>`\n      ${x.declareVariables(m,g,S)}\n      ${x.mainStart()}\n        ${x.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n        let outputIndices = ${S.offsetToIndices("global_idx")};\n        ${b()};\n        let value = ${m.getByIndices("dataIndices")};\n        ${S.setByOffset("global_idx","value")};\n      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:y}},Ji=e=>se({axis:e.axis}),Zi=(e,t)=>{let r=e.inputs;nd(r),e.compute(od(e.inputs,t))}});var ad,id,es,ts,rs=j(()=>{"use strict";ge();Re();ve();ad=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},id=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,s=B.computeStrides(r),u=B.size(r),d=e[1].dims,o=e[1].dataType,m=B.size(d),g=B.normalizeAxis(t.axis,n),S=r[g],b=d.slice(0),y=B.size(b),x=L("input",a,r),w=L("indices",o,[m]),C=q("output",a,b),A=_=>`\n      const inputStrides = array<u32, ${s.length}>(${s.map(z=>`${z}u`).join(",")});\n      ${_.declareVariables(x,w,C)}\n      ${_.mainStart()}\n      ${_.guardAgainstOutOfBoundsWorkgroupSizes(y)}\n\n      let outputIndices = ${C.offsetToIndices("global_idx")};\n\n      var idx = ${w.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + ${S};\n      }\n\n      var srcOffset = u32(0);\n\n      for (var i = 0; i < ${r.length}; i++) {\n        if (i == ${g}) {\n          srcOffset +=  u32(idx) * inputStrides[i];\n        } else {\n          srcOffset += ${C.indicesGet("outputIndices","i")} * inputStrides[i];\n        }\n      }\n\n      // Should never hit this with valid values in indices\n      // This is a guard against malicious data in the indices input\n      if (srcOffset < 0 || srcOffset >= ${u}) {\n        return;\n      }\n\n      output[global_idx] = input[srcOffset];\n  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:b,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(y/64)}}),getShaderSource:A}},es=e=>se({axis:e.axis}),ts=(e,t)=>{let r=e.inputs;ad(r),e.compute(id(e.inputs,t))}});var sd,ud,ld,ns,os,as=j(()=>{"use strict";ge();Re();ve();sd=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},ud=(e,t,r)=>{if(r.length===0)return"0u";let a=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return a||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},ld=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,s,u]=Nr.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can\'t use gemm on the given tensors");let o=B.size(d),m="";t.transA&&t.transB?m="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?m="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?m="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(m="value += a[m * K + k] * b[k * N + n];");let g=Pe(e[0].dataType),S=t.alpha===1?"":"value *= alpha;",b=e.length===3?`value += beta * c[${ud(n,s,e[2].dims)}];`:"",y=[`@group(0) @binding(0) var<storage, read> a : array<${g}>;`,`@group(0) @binding(1) var<storage, read> b : array<${g}>;`];e.length===3&&y.push(`@group(0) @binding(2) var<storage, read> c : array<${g}>;`);let x=w=>`\n  const M: u32 = ${n}u;\n  const N: u32 = ${s}u;\n  const K: u32 = ${u}u;\n  const alpha = ${g}(${t.alpha});\n  const beta = ${g}(${t.beta});\n\n  ${y.join(`\n`)}\n  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${g}>;\n\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${g}(0);\n    for (var k: u32 = 0u; k<${u}u; k++) {\n      ${m}\n    }\n\n    ${S}\n    ${b}\n    output[global_id.x] = value;\n\n  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:x}},ns=(e,t)=>{sd(e.inputs),e.compute(ld(e.inputs,t))},os=e=>se(e)});var dd,cd,pd,fd,is,ss,us=j(()=>{"use strict";Be();ge();Re();ve();dd={name:"InstanceNormalization"},cd=(e,t)=>{let r=e[0].dims,a=r,n=2,s=B.sizeToDimension(r,n),u=B.sizeFromDimension(r,n),d=r[1],o=L("x",e[0].dataType,[r[0],r[1],u]),m=L("scale",e[1].dataType,e[1].dims),g=L("bias",e[2].dataType,e[2].dims),S=q("output",e[0].dataType,[r[0],r[1],u]),b=[o,m,g,S],y=o.type.value,x=64,w=C=>`\n\n  const C: u32 = ${d};\n  const normSize: u32 = ${u};\n  const epsilon: f32 = ${t.epsilon};\n  var<workgroup> meanShared : ${y};\n  var<workgroup> squaredNormShared : ${y};\n  var<workgroup> workgroupShared : array<${y}, ${x}>;\n  const workgroupSize = ${x}u;\n  ${C.declareVariables(...b)}\n  ${C.mainStart(x)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${y} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${o.get("batch","channel","h")};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${y}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${o.get("batch","channel","h")} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${y}(normSize) + epsilon);\n    let channelScale = invStdDev * ${m.getByOffset("channel")};\n    let channelShift = ${g.getByOffset("channel")} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${o.get("batch","channel","h")} * channelScale + channelShift;\n      ${S.set("batch","channel","h","value")};\n    }\n  }`;return{...dd,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:w}},pd=(e,t,r,a,n,s,u,d)=>{let o=ft(u),m=L("input",t.dataType,t.dims,o),g=L("scale",r.dataType,r.dims,o),S=L("bias",a.dataType,a.dims,o),b=64,y=o===1?"vec2f":`mat2x${o}f`,x=o===1?"f32":`vec${o}f`,w=(W,R)=>`${y}(${W}, ${R})`,C=n*u/o,A=Math.ceil(s/b),_=W=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/o};\n  const imageSize: u32 = ${s*u/o};\n\n  ${W.declareVariables(m)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${y}>;\n\n  ${W.mainStart(b)}\n    let currentImageNumber = global_idx / ${b} / C;\n    let currentChannelNumber = (global_idx / ${b}) % C;\n    let wgId = global_idx % ${b};\n    let wgOffset = wgId * ${A};\n    if (wgOffset >= H) {\n        return;\n    }\n    let wgMax = min(wgOffset + ${A}, H);\n\n    let offset = currentImageNumber * imageSize + currentChannelNumber;\n    var sum = ${Ye("f32",o)};\n    var squaredSum = ${Ye("f32",o)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${x}(input[offset + i * C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${w("sum","squaredSum")};\n  }`,z=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,b,2],dataType:1}],dispatchGroup:{x:n*u/o}}),getShaderSource:_},{inputs:[t],outputs:[-1]})[0],D=W=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/o};\n  const imageSize: u32 = ${b*u/o};\n  const epsilon: f32 = ${d};\n\n  @group(0) @binding(0) var<storage, read> input : array<${y}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${g.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${S.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${y}>;\n\n  ${W.mainStart()}\n    ${W.guardAgainstOutOfBoundsWorkgroupSizes(C)}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    let offset = currentImageNumber * imageSize;\n    var sum = ${Ye("f32",o)};\n    var squaredSum = ${Ye("f32",o)};\n    for (var i: u32 = 0; i < ${b}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${b}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(H);\n    squaredSum = squaredSum / f32(H);\n    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);\n    let channelScale = invStdDev * ${x}(scale[currentChannelNumber]);\n    let channelShift = ${x}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${w("channelScale","channelShift")};\n  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u,epsilon:d})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(C/64)}}),getShaderSource:D},{inputs:[z,r,a],outputs:[-1]})[0]},fd=(e,t,r)=>{let a=t[0].dims,n=a,s=a[0],u=a[a.length-1],d=B.sizeFromDimension(a,1)/u,o=ft(u),m=B.size(n)/o,g=L("input",t[0].dataType,t[0].dims,o),S=q("output",t[0].dataType,n,o),b=Pe(t[0].dataType),y=o===1?"vec2f":`mat2x${o}f`,x=o===1?b:`vec${o}<${b}>`,w=pd(e,t[0],t[1],t[2],s,d,u,r.epsilon),C=A=>`\n  const H: u32 = ${d};\n  const C: u32 = ${u/o};\n\n  @group(0) @binding(0) var<storage, read> input : array<${g.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${y}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${S.type.storage}>;\n\n  ${A.mainStart()}\n    let currentImageNumber = global_idx / (C * H);\n    let currentChannelNumber = global_idx % C;\n\n    let scaleOffset = currentImageNumber * C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${x}(scale[0]), ${x}(scale[1]));\n  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)}}),getShaderSource:C},{inputs:[t[0],w]})},is=e=>se({epsilon:e.epsilon,format:e.format}),ss=(e,t)=>{t.format==="NHWC"?fd(e,e.inputs,t):e.compute(cd(e.inputs,t))}});var md,hd,ls,ds,cs=j(()=>{"use strict";Be();ge();Re();ve();md=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},hd=(e,t,r)=>{let a=e[0].dims,n=e[1],s=e[2],u=a,d=B.normalizeAxis(t.axis,a.length),o=B.sizeToDimension(a,d),m=B.sizeFromDimension(a,d),g=B.size(n.dims),S=s?B.size(s.dims):0;if(g!==m||s&&S!==m)throw new Error(`Size of X.shape()[axis:] == ${m}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${g} and bias size of ${S}`);let b=[];for(let D=0;D<a.length;++D)D<d?b.push(a[D]):b.push(1);let y=ft(m),x=Pe(e[0].dataType),w=[L("x",e[0].dataType,e[0].dims,y),L("scale",n.dataType,n.dims,y)];s&&w.push(L("bias",s.dataType,s.dims,y)),w.push(q("output",e[0].dataType,u,y));let C=r>1,A=r>2;C&&w.push(q("meanDataOutput",1,b)),A&&w.push(q("invStdOutput",1,b));let _=D=>`\n  const normSize: f32 = ${m};\n  const normSizeVectorized: u32 = ${m/y};\n  const epsilon: f32 = ${t.epsilon};\n\n  ${D.declareVariables(...w)}\n  ${D.mainStart()}\n    ${D.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let offset = global_idx * normSizeVectorized;\n    var meanVector = ${Ye("f32",y)};\n    var meanSquareVector = ${Ye("f32",y)};\n\n    for (var h: u32 = 0u; h < normSizeVectorized; h++) {\n      let value = ${_t(x,y,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${bt("meanVector",y)} / normSize;\n    let meanSquare = sqrt(${bt("meanSquareVector",y)} \n      / normSize - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSizeVectorized; j++) {\n      let f32input = ${_t(x,y,"x[j + offset]")};\n      let f32scale = ${_t(x,y,"scale[j]")};\n      output[j + offset] = ${w[0].type.value}((f32input - mean) / meanSquare * f32scale\n        ${s?`+ ${_t(x,y,"bias[j]")}`:""}\n      );\n    }\n\n    ${C?"meanDataOutput[global_idx] = mean":""};\n    ${A?"invStdOutput[global_idx] = 1 / meanSquare":""};\n  }`,z=[{dims:u,dataType:e[0].dataType}];return C&&z.push({dims:b,dataType:1}),A&&z.push({dims:b,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:z,dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:_}},ls=e=>se({axis:e.axis,epsilon:e.epsilon}),ds=(e,t)=>{md(e.inputs),e.compute(hd(e.inputs,t,e.outputCount))}});var gd,ps,fs=j(()=>{"use strict";ge();gr();gd=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},ps=e=>{gd(e.inputs);let t=et.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");e.compute(Qr(e.inputs,{activation:"",activationCacheKey:""},t))}});var yd,bd,wd,vd,$d,xd,Sd,Cd,Ad,ms,hs,gs=j(()=>{"use strict";Be();ge();Re();ve();yd=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},bd=(e,t,r,a,n,s,u)=>{let d=r.length,o="";for(let m=d-1;m>=0;--m)o+=`\n            k = i32(${e.indicesGet("indices",m)}) - ${n[m]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${r[m]}) {\n              break;\n            }\n            offset += k * ${a[m]};\n        `;return`\n          value = ${s}(${u});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},wd=(e,t,r,a,n)=>{let s=r.length,u="";for(let d=s-1;d>=0;--d)u+=`\n                k = i32(${e.indicesGet("indices",d)}) - ${n[d]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2*(r[d]-1)};\n                  k = k % _2n_1;\n                  if(k >= ${r[d]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${a[d]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${u}\n              value = x[offset];\n          `},vd=(e,t,r,a,n)=>{let s=r.length,u="";for(let d=s-1;d>=0;--d)u+=`\n                k = i32(${e.indicesGet("indices",d)}) - ${n[d]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${r[d]}) {\n                  k = ${r[d]-1};\n                }\n                offset += k * ${a[d]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${u}\n              value = x[offset];\n          `},$d=(e,t,r,a,n)=>{let s=r.length,u="";for(let d=s-1;d>=0;--d)u+=`\n                k = i32(${e.indicesGet("indices",d)}) - ${n[d]};\n                if (k < 0)  {\n                  k += ${r[d]};\n                }\n                if (k >= ${r[d]}) {\n                  k -= ${r[d]};\n                }\n                offset += k * ${a[d]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${u}\n              value = x[offset];\n          `},xd=(e,t,r,a,n,s)=>{switch(n.mode){case 0:return bd(e,t,r,a,n.pads,s,n.value);case 1:return wd(e,t,r,a,n.pads);case 2:return vd(e,t,r,a,n.pads);case 3:return $d(e,t,r,a,n.pads);default:throw new Error("Invalid mode")}},Sd=(e,t,r,a)=>{let n=t[0].dims,s=B.padShape(n.slice(),r.pads),u=B.size(s),d=B.computeStrides(n),o=q("output",t[0].dataType,s),m=L("x",t[0].dataType,n),g=xd(o,s,n,d,r,a);return`\n              ${e.declareVariables(m,o)}\n              ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n\n              let indices = ${o.offsetToIndices("global_idx")};\n\n              var value = ${a}(0);\n              ${g}\n              output[global_idx] = value;\n          }`},Cd=(e,t)=>{let r=B.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(B.size(r)/64)}}),getShaderSource:a=>Sd(a,e,t,"f32")}},Ad=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let o=0;o<d.length;o++)s[Number(d[o])]=Number(r[o]),s[Number(d[o])+n]=Number(r[o+d.length])}else r.forEach((d,o)=>s[Number(o)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),se({mode:t.mode,value:a,pads:u})}else return t},ms=(e,t)=>{yd(e.inputs);let r=Ad(e.inputs,t);e.compute(Cd(e.inputs,r),{inputs:[0]})},hs=e=>{let t=e.mode,r=e.value,a=e.pads;return se({mode:t,value:r,pads:a})}});var tn,ys,bs,ws,vs,$s,xs,Ss,Cs,As,Is,Es,Ts,Os,_s,Rs=j(()=>{"use strict";ge();Re();ve();tn=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},ys=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),o=s?t.dilations.slice():[],m=t.pads.slice();Tt.adjustPoolAttributes(r,n,u,d,o,m);let g=Tt.computePoolOutputShape(r,n,d,o,u,m,t.autoPad),S=Object.assign({},t);s?Object.assign(S,{kernelShape:u,strides:d,pads:m,dilations:o,cacheKey:t.cacheKey}):Object.assign(S,{kernelShape:u,strides:d,pads:m,cacheKey:t.cacheKey});let b=g.slice();return b.push(b.splice(1,1)[0]),[S,a?b:g]},bs=(e,t,r,a,n,s,u,d)=>{let o=n.format==="NHWC",m=r,g=t.type.value,S=m.length,b=B.size(a),y=q("output",t.type.tensor,a);if(n.kernelShape.length<=2){let x=n.kernelShape[n.kernelShape.length-1],w=n.strides[n.strides.length-1],C=n.pads[n.pads.length/2-1],A=n.pads[n.pads.length-1],_=S-(o?2:1),z="",D="",W="";if(C+A!==0?z=`\n                for (var i: u32 = 0u; i < ${x}u; i++) {\n                  xIndices[${_}] = indices[${_}] * ${w} - ${C} + i;\n                  if (xIndices[${_}] < 0 || xIndices[${_}] >= ${m[_]}) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:z=`\n                for (var i: u32 = 0u; i < ${x}u; i++) {\n                  xIndices[${_}] = indices[${_}] * ${w} - ${C} + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let M=n.kernelShape[n.kernelShape.length-2],H=n.strides[n.strides.length-2],X=n.pads[n.pads.length/2-2],le=n.pads[n.pads.length-2],k=S-(o?3:2),K=m[k];X+le!==0?D=`\n                for (var j: u32 = 0u; j < ${M}u; j++) {\n                  xIndices[${k}] = indices[${k}] * ${H} - ${X} + j;\n                  if (xIndices[${k}] < 0 || xIndices[${k}] >= ${K}) {\n                    pad+= ${x};\n                    continue;\n                  }\n              `:D=`\n                for (var j: u32 = 0u; j < ${M}u; j++) {\n                  xIndices[${k}] = indices[${k}] * ${H} - ${X} + j;\n                `,W=`\n              }\n            `}return`\n            ${e.declareVariables(t,y)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)}\n\n              let indices = ${y.offsetToIndices("global_idx")};\n              var xIndices = ${y.offsetToIndices("global_idx")};\n\n              var value: ${g} = ${g}(${d});\n              var pad = 0;\n              ${D}\n              ${z}\n              ${W}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(o)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let x=B.size(n.kernelShape),w=B.computeStrides(n.kernelShape),C=w.length,A=n.pads.length,_=n.pads.reduce((W,R)=>W+R),z="";return _?z=`\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:z=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.declareVariables(t,y)}\n\n            const pads = array<u32, ${A}>(${n.pads.map(W=>`${W}u`).join(",")});\n            const inputDims = array<u32, ${S}>(${m.map(W=>`${W}u`).join(",")});\n            const kernelStrides = array<u32, ${C}>(${w.map(W=>`${W}u`).join(",")});\n            const strides = array<u32, ${C}>(${n.strides.map(W=>`${W}u`).join(",")});\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)}\n\n              let indices = ${y.offsetToIndices("global_idx")};\n              let xIndices = ${y.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${C}>;\n\n              var value = ${y.type.value}(${d});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${x}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${C-1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${C-1}] = offset;\n\n                isPad = false;\n                for (var j = ${S-C}u; j < ${S}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${S-C}u]\n                    + offsets[j - ${S-C}u] - pads[j - 2u];\n                  ${z}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},ws=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),vs=(e,t,r,a)=>{let[n,s]=ys(t,a,r),u=B.size(n.kernelShape),d=L("x",t.dataType,t.dims),o=d.type.value,m="value += x_val;",g="";return n.countIncludePad?g+=`value /= ${o}(${u});`:g+=`value /= ${o}(${u} - pad);`,{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(B.size(s)/64)}}),getShaderSource:S=>bs(S,d,t.dims,s,n,m,g,"0.0")}},$s=e=>{let t=e.count_include_pad!==0,r=ws(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return se({countIncludePad:t,...r})},xs=(e,t)=>{tn(e.inputs),e.compute(vs("AveragePool",e.inputs[0],!1,t))},Ss={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Cs=e=>{let t=e.format;return{format:t,...Ss,cacheKey:t}},As=(e,t)=>{tn(e.inputs),e.compute(vs("GlobalAveragePool",e.inputs[0],!0,t))},Is=(e,t,r,a)=>{let[n,s]=ys(t,a,r),u=`\n      value = max(x_val, value);\n    `,d="",o=L("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(B.size(s)/64)}}),getShaderSource:m=>bs(m,o,t.dims,s,n,u,d,"-1e5")}},Es=(e,t)=>{tn(e.inputs),e.compute(Is("MaxPool",e.inputs[0],!1,t))},Ts=e=>{let t=e.storage_order,r=e.dilations,a=ws(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return se({storageOrder:t,dilations:r,...a})},Os=e=>{let t=e.format;return{format:t,...Ss,cacheKey:t}},_s=(e,t)=>{tn(e.inputs),e.compute(Is("GlobalMaxPool",e.inputs[0],!0,t))}});var Ed,Td,Ps,Ms=j(()=>{"use strict";zr();Be();ve();Ed=(e,t,r)=>{let a=e===t,n=e<t&&r<0,s=e>t&&r>0;if(a||n||s)throw new Error("Range these inputs\' contents are invalid.")},Td=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=q("output",a,s),o=d.type.storage,m=g=>`\n        ${g.declareVariables(d)}\n        ${g.mainStart()}\n        ${g.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        output[global_idx] = ${o}(${e}) + ${o}(global_idx) * ${o}(${r});\n      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(g=>g.toString()).join("_")},getShaderSource:m,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)}})}},Ps=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),ko.webgpu.validateInputContent&&Ed(t,r,a),e.compute(Td(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var Od,_d,Rd,Pd,Md,kd,Bd,Dd,Wd,zd,Vd,Nd,Gd,Ud,Ld,ks,Bs,Ds=j(()=>{"use strict";ge();Re();ve();Od=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},_d=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,s)=>a[n]=e[s]),a},Rd=(e,t,r,a,n,s)=>{let[u,d,o]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],m=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(g=>s.push(g));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(g=>a.push(g)),a.length!==0&&a.length!==m&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Od(a,t),t.axes.length>0&&_d(a,t.axes,m).forEach((g,S)=>a[S]=g)}if(o>0&&e.length>o&&(e[o].getBigInt64Array().forEach(g=>n.push(Number(g))),n.length!==m||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>m)throw new Error("Resize requires only of scales or sizes to be specified")},Pd=e=>"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { "+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }";case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`\n`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Md=(e,t)=>"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {"+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",kd=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((s,u)=>{a[s]=n[u],a[u+r]=n[t.length+u]}),a):n},Bd=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(s=>n.push(s)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},Dd=(e,t,r,a)=>{let n=(()=>{switch(a.keepAspectRatioPolicy){case"not_larger":return a.axes.length>0?Math.min(...a.axes.map(u=>r[u]),Number.MAX_VALUE):Math.min(...r,Number.MAX_VALUE);case"not_smaller":return a.axes.length>0?Math.max(...a.axes.map(u=>r[u]),Number.MIN_VALUE):Math.max(...r,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${a.keepAspectRatioPolicy} is not supported`)}})();r.fill(1,0,r.length);let s=e.slice();return a.axes.length>0?(a.axes.forEach(u=>r[u]=n),a.axes.forEach(u=>s[u]=Math.round(e[u]*r[u]))):(r.fill(n,0,r.length),s.forEach((u,d)=>s[d]=Math.round(u*r[d]))),s},Wd=(e,t,r,a,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<f32, ${r.length}> {\n      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});\n      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});\n      const scales = array<f32, ${a.length}>(${a.map(s=>`${s}f`).join(",")});\n      const roi = array<f32, ${n.length}>(${n.map(s=>`${s}f`).join(",")});\n      var originalIndices: array<f32, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};\n        if (scales[i] == 1.0) {\n          originalIndices[i] = f32(outputIndex);\n        } else {\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${t.length}]);\n        }\n      }\n      return originalIndices;\n    }`,zd=(e,t,r,a,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n        const inputShape = array<u32, ${r.length}>(${r.map(d=>`${d}u`).join(",")});\n        const outputShape = array<u32, ${a.length}>(${a.map(d=>`${d}u`).join(",")});\n        const scales = array<f32, ${n.length}>(${n.map(d=>`${d}f`).join(",")});\n        const roi = array<f32, ${s.length}>(${s.map(d=>`${d}f`).join(",")});\n        var inputIndices: ${e.type.indices};\n        for (var i:u32 = 0; i < ${a.length}; i++) {\n          var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};\n          var inputIndex: u32;\n          if (scales[i] == 1.0) {\n            inputIndex = outputIndex;\n          } else {\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${r.length}]);\n            if (!${u} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\n              if (original_idx < 0) {\n                inputIndex = 0;\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\n                inputIndex = inputShape[i] - 1;\n              } else {\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\n              }\n            } else {\n              inputIndex = u32(original_idx);\n            }\n          }\n          ${e.indicesSet("inputIndices","i","inputIndex")}\n        }\n        return inputIndices;\n    }`,Vd=(e,t)=>`\n    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {\n      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\n          return false;\n        }\n      }\n      return true;\n    }`,Nd=(e,t,r,a,n,s,u)=>{let[d,o,m,g]=r.length===2?[-1,0,1,-1]:n[1]===1?[0,2,3,1]:[0,1,2,3];return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\n      var inputIndices: ${e.type.indices};\n      inputIndices[${o}] = max(0, min(row, ${r[o]} - 1));\n      inputIndices[${m}] = max(0, min(col, ${r[m]} - 1));\n      if (${r.length} > 2) {\n        inputIndices[${g}] = channel;\n        inputIndices[${d}] = batch;\n      };\n      return input[${e.indicesToOffset("inputIndices")}];\n    }\n\n    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> f32 {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\n      var row:f32 = originalIndices[${o}];\n      var col:f32 = originalIndices[${m}];\n      if (${s} && (row < 0 || row > (${r[o]} - 1) || col < 0 || col > ${r[m]} - 1)) {\n        return ${u};\n      }\n      row = max(0, min(row, ${r[o]} - 1));\n      col = max(0, min(col, ${r[m]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${r.length>2}) {\n        channel = u32(originalIndices[${g}]);\n        batch = u32(originalIndices[${d}]);\n      }\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\n      var dx1: f32 = row - f32(row1);\n      var dx2: f32 = f32(row2 ) - row;\n      var dy1 = col - f32(col1);\n      var dy2 = f32(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},Gd=(e,t,r,a,n,s,u,d,o,m)=>{let[g,S]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],b=y=>{let x=y===g?"row":"col";return`\n      fn ${x}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> f32 {\n        var outputIndex = ${a.length===1?"outputIndices":`outputIndices[${y}]`};\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${n[y]},\n        f32(${a[y]}), f32(${r[y]}), ${s[y]}, ${s[y]} + ${r.length});\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${d} && (originalIdx < 0 || originalIdx > (${r[y]} - 1))) {\n          return ${o};\n        }\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${x}: f32 = originalIdx + f32(i);\n          if (${x} < 0 || ${x} >= ${r[y]}) {\n            if (${m}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${d}) {\n              return ${o};\n            } else {\n              ${x} = max(0, min(${x}, ${r[y]} - 1));\n            }\n          }\n          var inputIndicesCopy: ${e.type.indices} = inputIndices;\n          inputIndicesCopy[${y}] = u32(${x});\n          data[i + 1] = ${y===g?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${b(g)};\n    ${b(S)};\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\n    var absS = abs(s);\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: f32 = 1.0 - absS;\n    var twoMinusAbsS: f32 = 2.0 - absS;\n    var onePlusAbsS: f32 = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> f32 {\n    var inputIndices: ${e.type.indices} = outputIndices;\n    return colCubicInterpolation(inputIndices, outputIndices);\n  }\n    `},Ud=(e,t,r,a,n,s)=>{let u=e.dims,d=kd(s,t.axes,u.length),o=Bd(u,a,n,t.axes),m=a.slice();a.length===0&&(m=u.map((C,A)=>C===0?1:o[A]/C),t.keepAspectRatioPolicy!=="stretch"&&(o=Dd(u,o,m,t)));let g=q("output",e.dataType,o),S=L("input",e.dataType,u),b=B.size(o),y=u.length===o.length&&u.every((C,A)=>C===o[A]),x=t.coordinateTransformMode==="tf_crop_and_resize",w=C=>`\n      ${y?"":`\n      ${Pd(t.coordinateTransformMode)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${Vd(S,u)};\n              ${Md(t.nearestMode,r)};\n              ${zd(S,g,u,o,m,d,x)};\n              `;case"linear":return`\n              ${Wd(g,u,o,m,d)};\n              ${Nd(S,g,u,o,m,x,t.extrapolationValue)};\n              `;case"cubic":return`\n            ${Gd(S,g,u,o,m,d,t.cubicCoeffA,x,t.extrapolationValue,t.excludeOutside)};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${C.declareVariables(S,g)}\n      ${C.mainStart()}\n        ${C.guardAgainstOutOfBoundsWorkgroupSizes(b)}\n        ${y?"output[global_idx] = input[global_idx];":`\n        let outputIndices = ${g.offsetToIndices("global_idx")};\n        var inputIndices: ${S.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\n                if (checkInputIndices(inputIndices)) {\n                  output[global_idx] = input[${S.indicesToOffset("inputIndices")}];\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n        `}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${m.length>0?m:""}|${n.length>0?n:""}|${y}`},getShaderSource:w,getRunData:()=>({outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(b/64)}})}},Ld=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},ks=(e,t)=>{let r=[],a=[],n=[],s=Ld(e);Rd(e.inputs,t,s,r,a,n),e.compute(Ud(e.inputs[0],t,s,r,a,n),{inputs:[0]})},Bs=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,o=e.mode,m=e.nearestMode===""?"simple":e.nearestMode;return se({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:o,nearestMode:m})}});var Fd,Hd,Ws,zs,Vs=j(()=>{"use strict";Be();ge();Re();ve();Fd=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Hd=(e,t,r,a)=>{let n=e[0].dims,s=B.size(n),u=n,d=s,o=n.slice(-1)[0],m=a?n.slice(0,-1).concat(1):[],g=e.length>3,S=e.length>4,b=a&&r>1,y=a&&r>2,x=r>3,w=ft(o),C=[L("x",e[0].dataType,e[0].dims,w),L("skip",e[1].dataType,e[1].dims,w),L("gamma",e[2].dataType,e[2].dims,w)];g&&C.push(L("beta",e[3].dataType,e[3].dims,w)),S&&C.push(L("bias",e[4].dataType,e[4].dims,w)),C.push(q("output",e[0].dataType,u,w)),b&&C.push(q("meanOutput",1,m)),y&&C.push(q("invStdOutput",1,m)),x&&C.push(q("inputSkipBiasSum",e[0].dataType,u,w));let A=Pe(e[0].dataType),_=D=>`\n      const hiddenSize: f32 = ${o};\n      const hiddenSizeVectorized: u32 = ${o/w};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${D.declareVariables(...C)}\n\n      ${D.mainStart()}\n        ${D.guardAgainstOutOfBoundsWorkgroupSizes(d/o)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${Ye("f32",w)};\n        var squareSum = ${Ye("f32",w)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${S?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${x?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${_t(A,w,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${bt("sum",w)} / hiddenSize;\n        let variance = sqrt(${bt("squareSum",w)} / hiddenSize - mean * mean + epsilon);\n        ${b?"meanOutput[global_idx] = mean;":""}\n        ${y?"invStdOutput[global_idx] = 1.0 / variance;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${A}(mean)) / ${A}(variance) * gamma[i]\n           + ${g?"beta[i]":"0.0"};\n        }\n      }`,z=[{dims:u,dataType:e[0].dataType}];return r>1&&z.push({dims:m,dataType:1}),r>2&&z.push({dims:m,dataType:1}),r>3&&z.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:_,getRunData:()=>({outputs:z,dispatchGroup:{x:Math.ceil(d/o/64)}})}},Ws=(e,t)=>{Fd(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(Hd(e.inputs,t,e.outputCount,!1),{outputs:a})},zs=e=>{let t=e.epsilon;return se({epsilon:t})}});var jd,rn,Kd,Ns,qd,Yd,Gs,Us,Ls=j(()=>{"use strict";Be();ge();Re();ve();jd=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},rn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Kd=(e,t)=>{if(e.length>1){let r=rn(e,1),a=rn(e,2),n=rn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),se({starts:r,ends:a,axes:n})}else return t},Ns=(e,t,r,a,n)=>{let s=e;return e<0&&(s+=r[a[t]]),n[t]<0?Math.max(0,Math.min(s,r[a[t]]-1)):Math.max(0,Math.min(s,r[a[t]]))},qd=(e,t,r,a)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n          var inputIndices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\n            carry = inputIndex / inputShape[i];\n            inputIndex = inputIndex % inputShape[i];\n            if (signs[i] < 0) {\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\n            }\n            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;\n          }\n          return inputIndices;\n      }`,Yd=(e,t)=>{let r=e[0].dims,a=B.size(r),n=t.axes.length>0?B.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=rn(e,4);s.forEach(w=>w!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((w,C)=>Ns(w,C,r,n,s)),d=t.ends.map((w,C)=>Ns(w,C,r,n,s));if(n.length!==r.length)for(let w=0;w<r.length;++w)n.includes(w)||(u.splice(w,0,0),d.splice(w,0,r[w]),s.splice(w,0,1));let o=s.map(w=>Math.sign(w));s.forEach((w,C,A)=>{if(w<0){let _=(d[C]-u[C])/w,z=u[C],D=z+_*s[C];u[C]=D,d[C]=z,A[C]=-w}});let m=r.slice(0);n.forEach((w,C)=>{m[w]=Math.ceil((d[w]-u[w])/s[w])});let g={dims:m,dataType:e[0].dataType},S=q("output",e[0].dataType,m),b=L("input",e[0].dataType,r),y=B.size(m),x=w=>`\n      ${w.declareVariables(b,S)}\n        const signs = array<i32, ${o.length}>(${o.map(C=>`${C}i`).join(",")});\n        const starts = array<u32, ${u.length}>(${u.map(C=>`${C}u`).join(",")});\n        const ends = array<u32, ${d.length}>(${d.map(C=>`${C}u`).join(",")});\n        const steps = array<u32, ${s.length}>(${s.map(C=>`${C}u`).join(",")});\n        const inputShape = array<u32, ${r.length}>(${r.map(C=>`${C}u`).join(",")});\n\n        ${qd(b,S,r,m)}\n        ${w.mainStart()}\n          ${w.guardAgainstOutOfBoundsWorkgroupSizes(y)}\n          let outputIndices = ${S.offsetToIndices("global_idx")};\n          let inputIndices = calculateInputIndices(outputIndices);\n          ${S.setByOffset("global_idx",b.getByIndices("inputIndices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${t.cacheKey}|${e[4]?.dims??""}`},getShaderSource:x,getRunData:()=>({outputs:[g],dispatchGroup:{x:Math.ceil(a/64)}})}},Gs=(e,t)=>{jd(e.inputs,t);let r=Kd(e.inputs,t);e.compute(Yd(e.inputs,r),{inputs:[0]})},Us=e=>{let t=e.starts,r=e.ends,a=e.axes;return se({starts:t,ends:r,axes:a})}});var Xd,Jd,Fs,Hs,js=j(()=>{"use strict";ge();Re();ve();Xd=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Jd=(e,t)=>{let r=e.dims,a=B.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=a/u,o=ft(u),m=u/o,g=(C,A)=>A===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:A===2?`max(${C}.x, ${C}.y)`:A===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,S=L("x",e.dataType,e.dims,o),b=q("result",e.dataType,e.dims,o),y=S.type.value,x=Pe(e.dataType)==="f32"?`var threadMax = ${y}(-3.402823e+38f);`:`var threadMax = ${y}(-65504.0h);`,w=C=>`\n      var<workgroup> rowMaxShared : ${y};\n      var<workgroup> rowSumShared : ${y};\n      var<workgroup> threadShared : array<${y}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${y} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${y}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${C.registerUniform("packedCols","i32").declareVariables(S,b)}\n      ${C.mainStart()}\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${x}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${y}(${g("threadShared[0]",o)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${y}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${y}(${bt("threadShared[0]",o)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${o}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:m}]}),getShaderSource:w}},Fs=(e,t)=>{Xd(e.inputs),e.compute(Jd(e.inputs[0],t))},Hs=e=>se({axis:e.axis})});var Zd,Qd,ec,tc,rc,Ks,qs,Ys=j(()=>{"use strict";ge();Re();ve();Zd=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Qd=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),se({numOutputs:a,axis:t.axis,splitSizes:r})},ec=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,tc=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (outputNumber == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${a}) { ${n} }`)}return`\n      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},rc=(e,t)=>{let r=e[0].dims,a=B.size(r),n=e[0].dataType,s=r.length,u=t.axis,d=u<0?r.length+u:u,o=new Array(t.numOutputs),m=L("input",n,r),g=new Array(t.numOutputs),S=[],b=[],y=0;for(let C=0;C<t.numOutputs;C++){y+=t.splitSizes[C],g[C]=y;let A=r.slice();A[t.axis]=t.splitSizes[C],b.push(A),o[C]=q(`output${C}`,n,b[C]),S.push({dims:b[C],dataType:e[0].dataType})}let x=s<2?"indices":`indices[${d}]`,w=C=>`\n  ${C.declareVariables(m,...o)}\n  const sizeInConcatAxis = array<u32, ${g.length}>(${g.map(A=>`${A}u`).join(",")});\n  ${ec(g.length)}\n  ${tc(o)}\n\n  ${C.mainStart()}\n    ${C.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n\n    var indices = ${m.offsetToIndices("global_idx")};\n    let outputNumber = calculateOutputIndex(${x});\n    if (outputNumber != 0) {\n        ${x} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:w,getRunData:()=>({outputs:S,dispatchGroup:{x:Math.ceil(a/64)}})}},Ks=(e,t)=>{Zd(e.inputs);let r=e.inputs.length===1?t:Qd(e.inputs,t);e.compute(rc(e.inputs,r),{inputs:[0]})},qs=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return se({axis:t,numOutputs:a,splitSizes:r})}});var Xs,nc,oc,ac,Js,Zs=j(()=>{"use strict";Be();ge();ve();Xs=e=>Array.from(e.getBigInt64Array(),Number),nc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Xs(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},oc=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},ac=e=>{let t=e[0].dims,r=Xs(e[1]),a=oc(t,r),n=B.size(a),s=e[0].dataType,u=L("input",s,t),d=q("output",s,a),o=m=>`\n      const inputShape = ${u.indices(...t)};\n      ${m.declareVariables(u,d)}\n      ${m.mainStart()}\n      ${m.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n      var inputIndices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let inputDimValue = ${d.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};\n\n        ${u.indicesSet("inputIndices","i","inputDimValue")}\n      }\n      ${d.setByOffset("global_idx",u.getByIndices("inputIndices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:o}},Js=e=>{nc(e.inputs),e.compute(ac(e.inputs),{inputs:[0]})}});var ic,sc,Qs,eu=j(()=>{"use strict";Be();ge();ve();ic=(e,t,r,a,n)=>{let s=B.size(r),u=Math.ceil(s/4),d=q("outputData",n,r,4),o=L("aData",t[1].dataType,t[1].dims,4),m=L("bData",t[2].dataType,t[2].dims,4),g=L("cData",t[0].dataType,t[0].dims,4),S,b=(y,x,w)=>`select(${x}, ${y}, ${w})`;if(!a)S=d.setByOffset("global_idx",b(o.getByOffset("global_idx"),m.getByOffset("global_idx"),g.getByOffset("global_idx")));else{let y=(x,w,C="")=>{let A=`aData[indexA${w}][componentA${w}]`,_=`bData[indexB${w}][componentB${w}]`,z=`bool(cData[indexC${w}] & ${4278190080>>>(3-w)*8}u)`;return`\n            let outputIndices${w} = ${d.offsetToIndices(`global_idx * 4u + ${w}u`)};\n            let offsetA${w} = ${o.broadcastedIndicesToOffset(`outputIndices${w}`,d)};\n            let offsetB${w} = ${m.broadcastedIndicesToOffset(`outputIndices${w}`,d)};\n            let offsetC${w} = ${g.broadcastedIndicesToOffset(`outputIndices${w}`,d)};\n            let indexA${w} = offsetA${w} / 4u;\n            let indexB${w} = offsetB${w} / 4u;\n            let indexC${w} = offsetC${w} / 4u;\n            let componentA${w} = offsetA${w} % 4u;\n            let componentB${w} = offsetB${w} % 4u;\n            ${x}[${w}] = ${C}(${b(A,_,z)});\n          `};n===9?S=`\n            var data = vec4<u32>(0);\n            ${y("data",0,"u32")}\n            ${y("data",1,"u32")}\n            ${y("data",2,"u32")}\n            ${y("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:S=`\n            ${y("outputData[global_idx]",0)}\n            ${y("outputData[global_idx]",1)}\n            ${y("outputData[global_idx]",2)}\n            ${y("outputData[global_idx]",3)}\n          `}return`\n        ${e.declareVariables(g,o,m,d)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        ${S}\n      }`},sc=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,s=!(B.areEqual(t,r)&&B.areEqual(r,a)),u=t,d=B.size(t);if(s){let o=et.calcShape(et.calcShape(t,r,!1),a,!1);if(!o)throw new Error("Can\'t perform where op on the given tensors");u=o,d=B.size(u)}return{name:"Where",getShaderSource:o=>ic(o,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)}})}},Qs=e=>{e.compute(sc(e.inputs))}});var tu,ru=j(()=>{"use strict";Ba();Wa();gi();Ei();_i();Vn();Li();Ki();Xi();Qi();rs();as();us();cs();fs();gs();Rs();Ms();Lr();Ds();Vs();Ls();js();Ys();Zs();pr();Bn();eu();tu=new Map([["Abs",[za]],["Acos",[Va]],["Acosh",[Na]],["Add",[yi]],["ArgMax",[ka,Mn]],["ArgMin",[Ma,Mn]],["Asin",[Ga]],["Asinh",[Ua]],["Atan",[La]],["Atanh",[Fa]],["AveragePool",[xs,$s]],["BiasAdd",[Da]],["BiasSplitGelu",[hi]],["Cast",[ja,Ha]],["Ceil",[qa]],["ClipV10",[kn]],["Clip",[Ka]],["Concat",[Ti,Oi]],["Conv",[Gn,Nn]],["ConvTranspose",[Ui,Gi]],["Cos",[Ya]],["Cosh",[Xa]],["Div",[bi]],["Einsum",[Hi,ji]],["Elu",[Ja,Hr]],["Equal",[wi]],["Erf",[Za]],["Exp",[Qa]],["Expand",[Yi]],["Floor",[ei]],["FusedConv",[Gn,Nn]],["Gather",[Zi,Ji]],["GatherElements",[ts,es]],["Gelu",[ti]],["Gemm",[ns,os]],["GlobalAveragePool",[As,Cs]],["GlobalMaxPool",[_s,Os]],["Greater",[Si]],["GreaterOrEqual",[Ai]],["InstanceNormalization",[ss,is]],["LayerNormalization",[ds,ls]],["LeakyRelu",[ri,Hr]],["Less",[Ci]],["LessOrEqual",[Ii]],["Log",[mi]],["MatMul",[ps]],["MaxPool",[Es,Ts]],["Mul",[vi]],["Neg",[oi]],["Not",[ni]],["Pad",[ms,hs]],["Pow",[$i]],["Range",[Ps]],["Reciprocal",[ai]],["ReduceMin",[Ia,Xe]],["ReduceMean",[$a,Xe]],["ReduceMax",[Aa,Xe]],["ReduceSum",[Ta,Xe]],["ReduceProd",[Ea,Xe]],["ReduceL1",[xa,Xe]],["ReduceL2",[Sa,Xe]],["ReduceLogSum",[_a,Xe]],["ReduceLogSumExp",[Ca,Xe]],["ReduceSumSquare",[Oa,Xe]],["Relu",[ii]],["Resize",[ks,Bs]],["Sigmoid",[si]],["Sin",[ui]],["Sinh",[li]],["Slice",[Gs,Us]],["SkipLayerNormalization",[Ws,zs]],["Split",[Ks,qs]],["Sqrt",[di]],["Softmax",[Fs,Hs]],["Sub",[xi]],["Tan",[ci]],["Tanh",[pi]],["ThresholdedRelu",[fi,Hr]],["Tile",[Js]],["Transpose",[ua,la]],["Where",[Qs]]])});var nn,nu=j(()=>{"use strict";zr();Be();yt();ve();nn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,s,u,d){let o=this.backend.device,m=this.backend.getComputePassEncoder();m.setPipeline(t.computePipeline);let g=[];for(let b of n)g.push({binding:g.length,resource:{buffer:b.buffer}});for(let b of s)g.push({binding:g.length,resource:{buffer:b.buffer}});d&&g.push({binding:g.length,resource:d});let S=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:g,label:t.programInfo.name});if(m.setBindGroup(0,S),m.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let b=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,b.buffer,0,this.backend.querySetCount*8),this.backend.flush();let y=this.backend.currentKernelId,x=this.backend.kernels.get(y),w=`[${x[0]}] ${x[1]}`;b.buffer.mapAsync(GPUMapMode.READ).then(()=>{let C=new BigUint64Array(b.buffer.getMappedRange()),A=C[0],_=C[1];b.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=A);let z=Number(A-this.backend.queryTimeBase),D=Number(_-this.backend.queryTimeBase);if(!Number.isSafeInteger(z)||!Number.isSafeInteger(D))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(b.id);let W="";r.forEach((M,H)=>{W+=`input[${H}]: [${M.dims}] | ${lr(M.dataType)}, `});let R="";a.forEach((M,H)=>{R+=`output[${H}]: [${M.dims}] | ${lr(M.dataType)}, `}),console.log(`[profiling] kernel "${y}|${w}" ${W}${R}execution time: ${D-z} ns`),Lo(`programName=${t.programInfo.name}, time=${D-z}`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let s=ia(r),u=t.getShaderSource(s),d=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,o=a.createShaderModule({code:d,label:t.name});Ie("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let m=a.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:m}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&a<=s&&n<=s)return[r,a,n];let u=r*a*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var uc,lc,on,ou=j(()=>{"use strict";zr();yt();Qo();na();ru();nu();uc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[a].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[a].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},lc=(e,t)=>{let r=e.name;return e.shaderCache?.hint&&(r+="["+e.shaderCache.hint+"]"),r+=`:${uc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,r},on=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=ra(this),this.programManager=new nn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Jo(t.logLevel,!!t.debug),Uo(!!t.trace),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,s){let u=[];for(let A=0;A<r.length;++A){let _=this.gpuDataManager.get(r[A].data);if(!_)throw new Error(`no GPU data for input: ${r[A].data}`);u[A]=_}let d=lc(t,r),o=this.programManager.getArtifact(d),{outputs:m,dispatchGroup:g,programUniforms:S}=t.getRunData(r),b=a.length===0?m.map((A,_)=>_):a;if(b.length!==m.length)throw new Error(`Output size ${b.length} must be equal to ${m.length}.`);let y=[],x=[];for(let A=0;A<m.length;++A){if(!Number.isInteger(b[A])||b[A]<-3||b[A]>=m.length)throw new Error(`Invalid output index: ${b[A]}`);if(b[A]===-3)continue;let _=b[A]===-1,z=b[A]===-2,D=_||z?s(m[A].dataType,m[A].dims):n(b[A],m[A].dataType,m[A].dims),W=this.gpuDataManager.get(D.data);if(!W)throw new Error(`no GPU data for output: ${D.data}`);if(_&&this.temporaryData.push(W),z){let R=this.kernelPersistentData.get(this.currentKernelId);R||(R=[],this.kernelPersistentData.set(this.currentKernelId,R)),R.push(W)}y.push(D),x.push(W)}let w;if(S){let A=0,_=0,z=[],D=1;S.forEach(M=>{let H=typeof M.data=="number"?[M.data]:M.data,X;switch(H.length){case 1:X=4;break;case 2:X=8;break;case 3:X=16;break;case 4:X=16;break;case 5:X=16;break;case 6:X=16;break;default:throw new Error(`unsupported data length: ${H.length}`)}(_===5||_===6)&&(X=16),X>D&&(D=X),A=Math.ceil(A/X)*X,_=H.length,z.push(A),A+=H.length*4}),A=Math.ceil(A/D)*D;let W=new ArrayBuffer(A);S.forEach((M,H)=>{let X=z[H],le=typeof M.data=="number"?[M.data]:M.data;M.type==="int32"?new Int32Array(W,X,le.length).set(le):M.type==="uint32"?new Uint32Array(W,X,le.length).set(le):new Float32Array(W,X,le.length).set(le)});let R=this.gpuDataManager.create(A,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(R.buffer,0,W,0,A),this.gpuDataManager.release(R.id),w={offset:0,size:A,buffer:R.buffer}}let C=this.programManager.normalizeDispatchGroupSize(g);return o||(o=this.programManager.build(t,C),this.programManager.setArtifact(d,o)),Ie("info",()=>`[ProgramManager] run "${t.name}" (key=${d}) with ${C[0]}x${C[1]}x${C[2]}`),this.programManager.run(o,r,y,u,x,C,w),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let s=tu.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,d,o]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Ie("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let m=this.env.debug;this.temporaryData=[];try{return m&&this.device.pushErrorScope("validation"),d(r,o[1]),0}catch(g){return a.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${g}`)),1}finally{m&&a.push(this.device.popErrorScope().then(g=>g?`GPU validation error for kernel "[${s}] ${u}": ${g.message}`:null));for(let g of this.temporaryData)this.gpuDataManager.release(g.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return s.set(r,[d,a]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await En(this,t,r);return Zo(n.buffer,a)}}}});var au={};Pr(au,{init:()=>dc});var yr,jn,dc,iu=j(()=>{"use strict";Be();ou();yt();ge();yr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=B.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=B.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=B.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(B.size(t)!==B.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},jn=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=a>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let o=0;o<u;o++){let m=n[s++],g=n[s++],S=n[s++],b=[];for(let y=0;y<S;y++)b.push(n[s++]);d.push(new yr(t,m,g,b))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,o,m)=>new yr(this.module,o,this.output(d,m),m),u=(d,o)=>{let m=dr(d);if(!m)throw new Error(`Unsupported data type: ${d}`);let g=m*B.size(o);return new yr(this.module,d,this.backend.gpuDataManager.create(g).id,o)};return this.backend.run(t,a,n,s,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},dc=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let a=new on;await a.initialize(t),r(a,n=>a.alloc(n),n=>a.free(n),(n,s,u,d=!1)=>{if(d)Ie("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),a.memcpy(n,s);else{Ie("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let o=e.HEAPU8.subarray(n,n+u);a.upload(s,o)}},async(n,s,u)=>{Ie("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await a.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>a.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>a.releaseKernel(n),(n,s,u,d)=>{Ie("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let o=new jn(e,a,s);return a.computeKernel(n,o,d)})}}});var Co;Co=mo();var Bu=$o(),vn,$n=!1,Mr=!1,So=!1,Du=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Wu=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},zu=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Ao=async e=>{if($n)return Promise.resolve();if(Mr)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(So)throw new Error("previous call to \'initializeWebAssembly()\' failed.");Mr=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&Du(),s=a&&Wu(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,o=zu(s,n),m=typeof u=="object"?u[o]:void 0,g=!1,S=[];if(t>0&&S.push(new Promise(b=>{setTimeout(()=>{g=!0,b()},t)})),S.push(new Promise((b,y)=>{let x=n?Bu:Co,w={locateFile:(C,A)=>{if(n&&C.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([xo()],{type:"text/javascript"}));if(C.endsWith(".wasm")){if(m)return m;let _=d??A;return o==="ort-wasm-simd.wasm"?_+"ort-wasm-simd.jsep.wasm":o==="ort-wasm-simd-threaded.wasm"?_+"ort-wasm-simd-threaded.jsep.wasm":_+o}return A+C}};if(n)if(typeof Blob>"u")w.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let C=`var ortWasmThreaded=${x.toString()};`;w.mainScriptUrlOrBlob=new Blob([C],{type:"text/javascript"})}x(w).then(C=>{Mr=!1,$n=!0,vn=C,b()},C=>{Mr=!1,So=!0,y(C)})})),await Promise.race(S),g)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},_e=()=>{if($n&&vn)return vn;throw new Error("WebAssembly is not initialized yet.")};var ke=(e,t)=>{let r=_e(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},ur=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")ur(s,u+".",r,a);else if(typeof s=="string"||typeof s=="number")a(u,s.toString());else if(typeof s=="boolean")a(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Ce=e=>{let t=_e(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],s=t.HEAPU32[a/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var Io=e=>{let t=_e(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=ke(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Ce("Can\'t create run options."),e?.extra!==void 0&&ur(e.extra,"",new WeakSet,(u,d)=>{let o=ke(u,a),m=ke(d,a);t._OrtAddRunConfigEntry(r,o,m)!==0&&Ce(`Can\'t set a run config entry: ${u} - ${d}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),s}};var Vu=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Nu=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Gu=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Uu=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let d=ke("deviceType",r),o=ke(u.deviceType,r);_e()._OrtAddSessionConfigEntry(e,d,o)!==0&&Ce(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.powerPreference){let d=ke("powerPreference",r),o=ke(u.powerPreference,r);_e()._OrtAddSessionConfigEntry(e,d,o)!==0&&Ce(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let d=ke("preferredLayout",r),o=ke(u.preferredLayout,r);_e()._OrtAddSessionConfigEntry(e,d,o)!==0&&Ce(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=ke(n,r);_e()._OrtAppendExecutionProvider(e,s)!==0&&Ce(`Can\'t append execution provider: ${n}.`)}},Eo=e=>{let t=_e(),r=0,a=[],n=e||{};Gu(n);try{let s=Vu(n.graphOptimizationLevel??"all"),u=Nu(n.executionMode??"sequential"),d=typeof n.logId=="string"?ke(n.logId,a):0,o=n.logSeverityLevel??2;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log serverity level is not valid: ${o}`);let m=n.logVerbosityLevel??0;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log verbosity level is not valid: ${m}`);let g=typeof n.optimizedModelFilePath=="string"?ke(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,o,m,g),r===0&&Ce("Can\'t create session options."),n.executionProviders&&Uu(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[S,b]of Object.entries(n.freeDimensionOverrides)){if(typeof S!="string")throw new Error(`free dimension override name must be a string: ${S}`);if(typeof b!="number"||!Number.isInteger(b)||b<0)throw new Error(`free dimension override value must be a non-negative integer: ${b}`);let y=ke(S,a);t._OrtAddFreeDimensionOverride(r,y,b)!==0&&Ce(`Can\'t set a free dimension override: ${S} - ${b}.`)}return n.extra!==void 0&&ur(n.extra,"",new WeakSet,(S,b)=>{let y=ke(S,a),x=ke(b,a);t._OrtAddSessionConfigEntry(r,y,x)!==0&&Ce(`Can\'t set a session config entry: ${S} - ${b}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),s}};Be();var uu=!1,cc=e=>{let t=_e(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&Ce("Can\'t get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},pc=(e,t)=>{_e()._OrtInit(e,t)!==0&&Ce("Can\'t initialize onnxruntime.")},lu=async e=>{pc(e.wasm.numThreads,cr(e.logLevel));{let t=(iu(),Vt(au)).init;await t(_e(),e)}uu=!0},br=new Map,du=()=>uu,Kn=e=>{let t=_e(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},qn=(e,t)=>{let r=_e(),a=0,n=0,s=0,u=[],d=[],o=[];try{[n,u]=Eo(t),a=r._OrtCreateSession(e[0],e[1],n),a===0&&Ce("Can\'t create a session.");let[m,g]=cc(a),S=[],b=[],y=[];for(let w=0;w<m;w++){let C=r._OrtGetInputName(a,w);C===0&&Ce("Can\'t get an input name."),d.push(C),S.push(r.UTF8ToString(C))}for(let w=0;w<g;w++){let C=r._OrtGetOutputName(a,w);C===0&&Ce("Can\'t get an output name."),o.push(C);let A=r.UTF8ToString(C);b.push(A);{let _=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[A]??"cpu";if(_!=="cpu"&&_!=="cpu-pinned"&&_!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${_}.`);y.push(_)}}let x=null;return y.some(w=>w==="gpu-buffer")&&(s=r._OrtCreateBinding(a),s===0&&Ce("Can\'t create IO binding."),x={handle:s,outputPreferredLocations:y,outputPreferredLocationsEncoded:y.map(w=>Sn(w))}),br.set(a,[a,d,o,x]),[a,S,b]}catch(m){throw d.forEach(g=>r._OrtFree(g)),o.forEach(g=>r._OrtFree(g)),s!==0&&r._OrtReleaseBinding(s),a!==0&&r._OrtReleaseSession(a),m}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(m=>r._free(m))}},cu=(e,t)=>{let r=Kn(e);return qn(r,t)},pu=e=>{let t=_e(),r=br.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(d=>t._OrtFree(d)),s.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(a),br.delete(e)},su=(e,t,r,a,n)=>{if(!e){t.push(0);return}let s=_e(),u=e[0],d=e[1],o=e[3],m,g;if(u==="string"&&o==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o==="gpu-buffer"){let y=e[2].gpuBuffer,x=dr(xn(u));g=d.reduce((w,C)=>w*C,1)*x,m=s.jsepRegisterBuffer(a,n,y,g)}else{let y=e[2];if(Array.isArray(y)){g=4*y.length,m=s._malloc(g),r.push(m);let x=m/4;for(let w=0;w<y.length;w++){if(typeof y[w]!="string")throw new TypeError(`tensor data at index ${w} is not a string`);s.HEAPU32[x++]=ke(y[w],r)}}else g=y.byteLength,m=s._malloc(g),r.push(m),s.HEAPU8.set(new Uint8Array(y.buffer,y.byteOffset,g),m)}let S=s.stackSave(),b=s.stackAlloc(4*d.length);try{let y=b/4;d.forEach(w=>s.HEAP32[y++]=w);let x=s._OrtCreateTensor(xn(u),m,g,b,d.length,Sn(o));x===0&&Ce(`Can\'t create tensor for input/output. session=${a}, index=${n}.`),t.push(x)}finally{s.stackRestore(S)}},fu=async(e,t,r,a,n,s)=>{let u=_e(),d=br.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[o,m,g,S]=d,b=t.length,y=a.length,x=0,w=[],C=[],A=[],_=[],z=u.stackSave(),D=u.stackAlloc(b*4),W=u.stackAlloc(b*4),R=u.stackAlloc(y*4),M=u.stackAlloc(y*4);try{[x,w]=Io(s);for(let ae=0;ae<b;ae++)su(r[ae],C,_,e,t[ae]);for(let ae=0;ae<y;ae++)su(n[ae],A,_,e,b+a[ae]);let H=D/4,X=W/4,le=R/4,k=M/4;for(let ae=0;ae<b;ae++)u.HEAPU32[H++]=C[ae],u.HEAPU32[X++]=m[t[ae]];for(let ae=0;ae<y;ae++)u.HEAPU32[le++]=A[ae],u.HEAPU32[k++]=g[a[ae]];if(S){let{handle:ae,outputPreferredLocations:we,outputPreferredLocationsEncoded:F}=S;if(m.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model\'s input count (${m.length}).`);for(let Se=0;Se<b;Se++){let Te=t[Se];await u._OrtBindInput(ae,m[Te],C[Se])!==0&&Ce(`Can\'t bind input[${Se}] for session=${e}.`)}for(let Se=0;Se<y;Se++){let Te=a[Se];n[Se]?.[3]?u._OrtBindOutput(ae,g[Te],A[Se],0)!==0&&Ce(`Can\'t bind pre-allocated output[${Se}] for session=${e}.`):u._OrtBindOutput(ae,g[Te],0,F[Te])!==0&&Ce(`Can\'t bind output[${Se}] to ${we[Se]} for session=${e}.`)}}let K;S?K=await u._OrtRunWithBinding(o,S.handle,y,R,x):K=await u._OrtRun(o,W,D,b,M,y,R,x),K!==0&&Ce("failed to call OrtRun().");let xe=[];for(let ae=0;ae<y;ae++){let we=u.HEAPU32[R/4+ae];if(we===A[ae]){xe.push(n[ae]);continue}let F=u.stackSave(),Se=u.stackAlloc(4*4),Te=!1,Ae,Ee=0;try{u._OrtGetTensorData(we,Se,Se+4,Se+8,Se+12)!==0&&Ce(`Can\'t access output tensor data on index ${ae}.`);let Le=Se/4,Fe=u.HEAPU32[Le++];Ee=u.HEAPU32[Le++];let G=u.HEAPU32[Le++],ce=u.HEAPU32[Le++],de=[];for(let Oe=0;Oe<ce;Oe++)de.push(u.HEAPU32[G/4+Oe]);u._OrtFree(G);let We=de.reduce((Oe,Me)=>Oe*Me,1);Ae=lr(Fe);let Ne=S?.outputPreferredLocations[a[ae]];if(Ae==="string"){if(Ne==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Oe=[],Me=Ee/4;for(let Je=0;Je<We;Je++){let Ge=u.HEAPU32[Me++],He=Je===We-1?void 0:u.HEAPU32[Me]-Ge;Oe.push(u.UTF8ToString(Ge,He))}xe.push([Ae,de,Oe,"cpu"])}else if(Ne==="gpu-buffer"&&We>0){let Oe=u.jsepGetBuffer(Ee),Me=dr(Fe);if(Me===void 0||!To(Ae))throw new Error(`Unsupported data type: ${Ae}`);Te=!0,xe.push([Ae,de,{gpuBuffer:Oe,download:u.jsepCreateDownloader(Oe,We*Me,Ae),dispose:()=>{u._OrtReleaseTensor(we)}},"gpu-buffer"])}else{let Oe=kr(Ae),Me=new Oe(We);new Uint8Array(Me.buffer,Me.byteOffset,Me.byteLength).set(u.HEAPU8.subarray(Ee,Ee+Me.byteLength)),xe.push([Ae,de,Me,"cpu"])}}finally{u.stackRestore(F),Ae==="string"&&Ee&&u._free(Ee),Te||u._OrtReleaseTensor(we)}}return S&&u._OrtClearBoundOutputs(S.handle),xe}finally{u.stackRestore(z),C.forEach(H=>u._OrtReleaseTensor(H)),A.forEach(H=>u._OrtReleaseTensor(H)),_.forEach(H=>u._free(H)),x!==0&&u._OrtReleaseRunOptions(x),w.forEach(H=>u._free(H))}},mu=e=>{let t=_e(),r=br.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&Ce("Can\'t get an profile file name."),t._OrtFree(n)},hu=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t};self.onmessage=e=>{switch(e.data.type){case"init-wasm":try{Ao(e.data.in).then(()=>postMessage({type:"init-wasm"}),t=>postMessage({type:"init-wasm",err:t}))}catch(t){postMessage({type:"init-wasm",err:t})}break;case"init-ort":try{lu(e.data.in).then(()=>postMessage({type:"init-ort"}),t=>postMessage({type:"init-ort",err:t}))}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{let{model:t}=e.data.in,r=Kn(t);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{let{modeldata:t,options:r}=e.data.in,a=qn(t,r);postMessage({type:"create_finalize",out:a})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{let{model:t,options:r}=e.data.in,a=cu(t,r);postMessage({type:"create",out:a})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{let t=e.data.in;pu(t),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{let{sessionId:t,inputIndices:r,inputs:a,outputIndices:n,options:s}=e.data.in;fu(t,r,a,n,s).then(u=>{postMessage({type:"run",out:u},hu(u))},u=>{postMessage({type:"run",err:u})})}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{let t=e.data.in;mu(t),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}break;case"is-ort-env-initialized":try{let t=du();postMessage({type:"is-ort-env-initialized",out:t})}catch(t){postMessage({type:"is-ort-env-initialized",err:t})}break;default:}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var vt,He,_n,ka,Pa,Sa,Ca,Ia,Aa,Ea,_a,Oa,Ta,Ra,_t,Ap,En,hl,gl,yl,bl,Ma,wl,vl,$l,xl,Da=F(()=>{"use strict";at();fl();Qt();vt=()=>!!Ce.wasm.proxy&&typeof document<"u",_n=!1,ka=!1,Pa=!1,Ia=[],Aa=[],Ea=[],_a=[],Oa=[],Ta=[],Ra=[],_t=()=>{if(_n||!ka||Pa||!He)throw new Error("worker not ready")},Ap=e=>{switch(e.data.type){case"init-wasm":_n=!1,e.data.err?(Pa=!0,Sa[1](e.data.err)):(ka=!0,Sa[0]());break;case"init-ort":e.data.err?Ca[1](e.data.err):Ca[0]();break;case"create_allocate":e.data.err?Ia.shift()[1](e.data.err):Ia.shift()[0](e.data.out);break;case"create_finalize":e.data.err?Aa.shift()[1](e.data.err):Aa.shift()[0](e.data.out);break;case"create":e.data.err?Ea.shift()[1](e.data.err):Ea.shift()[0](e.data.out);break;case"release":e.data.err?_a.shift()[1](e.data.err):_a.shift()[0]();break;case"run":e.data.err?Oa.shift()[1](e.data.err):Oa.shift()[0](e.data.out);break;case"end-profiling":e.data.err?Ta.shift()[1](e.data.err):Ta.shift()[0]();break;case"is-ort-env-initialized":e.data.err?Ra.shift()[1](e.data.err):Ra.shift()[0](e.data.out);break;default:}},En=typeof document<"u"?document?.currentScript?.src:void 0,hl=async()=>{if(vt()){if(ka)return;if(_n)throw new Error("multiple calls to 'initWasm()' detected.");if(Pa)throw new Error("previous call to 'initWasm()' failed.");return _n=!0,Ce.wasm.wasmPaths===void 0&&En&&En.indexOf("blob:")!==0&&(Ce.wasm.wasmPaths=En.substr(0,+En.lastIndexOf("/")+1)),new Promise((e,t)=>{He?.terminate();let r=URL.createObjectURL(new Blob([ml()],{type:"text/javascript"}));He=new Worker(r,{name:"ort-wasm-proxy-worker"}),He.onerror=n=>t(n),He.onmessage=Ap,URL.revokeObjectURL(r),Sa=[e,t];let a={type:"init-wasm",in:Ce.wasm};He.postMessage(a)})}else return Uo(Ce.wasm)},gl=async e=>{if(vt())return _t(),new Promise((t,r)=>{Ca=[t,r];let a={type:"init-ort",in:e};He.postMessage(a)});await il(e)},yl=async e=>vt()?(_t(),new Promise((t,r)=>{Ia.push([t,r]);let a={type:"create_allocate",in:{model:e}};He.postMessage(a,[e.buffer])})):$a(e),bl=async(e,t)=>vt()?(_t(),new Promise((r,a)=>{Aa.push([r,a]);let n={type:"create_finalize",in:{modeldata:e,options:t}};He.postMessage(n)})):xa(e,t),Ma=async(e,t)=>{if(vt()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return _t(),new Promise((r,a)=>{Ea.push([r,a]);let n={type:"create",in:{model:e,options:t}};He.postMessage(n,[e.buffer])})}else return ul(e,t)},wl=async e=>{if(vt())return _t(),new Promise((t,r)=>{_a.push([t,r]);let a={type:"release",in:e};He.postMessage(a)});ll(e)},vl=async(e,t,r,a,n,s)=>{if(vt()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return _t(),new Promise((u,l)=>{Oa.push([u,l]);let o=r,p={type:"run",in:{sessionId:e,inputIndices:t,inputs:o,outputIndices:a,options:s}};He.postMessage(p,pl(o))})}else return dl(e,t,r,a,n,s)},$l=async e=>{if(vt())return _t(),new Promise((t,r)=>{Ta.push([t,r]);let a={type:"end-profiling",in:e};He.postMessage(a)});cl(e)},xl=async()=>vt()?(_t(),new Promise((e,t)=>{Ra.push([e,t]);let r={type:"is-ort-env-initialized"};He.postMessage(r)})):sl()});var On,Sl,Ep,Tn,Cl=F(()=>{"use strict";at();Da();Be();Sl=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Ep=e=>{switch(e[3]){case"cpu":return new Ve(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!on(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Ve.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},Tn=class{async createSessionAllocate(t){let r=await fetch(t);if(r.status!==200)throw new Error(`failed to load model: ${t}`);let a=await r.arrayBuffer();return yl(new Uint8Array(a))}async loadModel(t,r){if(await xl()||(On||(On=gl(Ce)),await On,On=void 0),typeof t=="string")if(typeof process<"u"&&process.versions&&process.versions.node){let a=await(void 0)(t);[this.sessionId,this.inputNames,this.outputNames]=await Ma(a,r)}else{let a=await this.createSessionAllocate(t);[this.sessionId,this.inputNames,this.outputNames]=await bl(a,r)}else[this.sessionId,this.inputNames,this.outputNames]=await Ma(t,r)}async dispose(){return wl(this.sessionId)}async run(t,r,a){let n=[],s=[];Object.entries(t).forEach(g=>{let y=g[0],$=g[1],v=this.inputNames.indexOf(y);if(v===-1)throw new Error(`invalid input '${y}'`);n.push($),s.push(v)});let u=[],l=[];Object.entries(r).forEach(g=>{let y=g[0],$=g[1],v=this.outputNames.indexOf(y);if(v===-1)throw new Error(`invalid output '${y}'`);u.push($),l.push(v)});let o=n.map((g,y)=>Sl(g,()=>`input "${this.inputNames[s[y]]}"`)),p=u.map((g,y)=>g?Sl(g,()=>`output "${this.outputNames[l[y]]}"`):null),m=await vl(this.sessionId,s,o,l,p,a),w={};for(let g=0;g<m.length;g++)w[this.outputNames[l[g]]]=u[g]??Ep(m[g]);return w}startProfiling(){}endProfiling(){$l(this.sessionId)}}});var _p,Rn,Il=F(()=>{"use strict";at();Da();Cl();_p=()=>{if((typeof Ce.wasm.initTimeout!="number"||Ce.wasm.initTimeout<0)&&(Ce.wasm.initTimeout=0),typeof Ce.wasm.simd!="boolean"&&(Ce.wasm.simd=!0),typeof Ce.wasm.proxy!="boolean"&&(Ce.wasm.proxy=!1),typeof Ce.wasm.numThreads!="number"||!Number.isInteger(Ce.wasm.numThreads)||Ce.wasm.numThreads<=0){let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Ce.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Rn=class{async init(){_p(),await hl()}async createInferenceSessionHandler(t,r){let a=new Tn;return await a.loadModel(t,r),Promise.resolve(a)}}});var Al={};zt(Al,{wasmBackend:()=>Op});var Op,El=F(()=>{"use strict";Il();Op=new Rn});var Rp={};zt(Rp,{InferenceSession:()=>$o,TRACE:()=>Jt,TRACE_BEGIN:()=>Qr,TRACE_END:()=>Zr,Tensor:()=>Ve,TrainingSession:()=>Io,configureTrace:()=>Jr,default:()=>Tp,env:()=>Ce,registerBackend:()=>bt});at();at();at();var Eo="1.17.0";var Tp=Ln;{let e=(El(),Ct(Al)).wasmBackend;typeof navigator<"u"&&navigator.gpu&&bt("webgpu",e,5),bt("cpu",e,10),bt("wasm",e,10),bt("xnnpack",e,9),bt("webnn",e,9)}Object.defineProperty(Ce.versions,"web",{value:Eo,enumerable:!0});return Ct(Rp);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
